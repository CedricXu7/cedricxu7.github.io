<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docker一键安装和基本配置</title>
      <link href="/2023/09/19/%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/17.Docker%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/09/19/%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/17.Docker%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="一键安装脚本"><a href="#一键安装脚本" class="headerlink" title="一键安装脚本"></a>一键安装脚本</h2><ul><li>注：该脚本需要root权限<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://get.docker.com/ | sh</span><br></pre></td></tr></table></figure><h2 id="非root组用户赋权"><a href="#非root组用户赋权" class="headerlink" title="非root组用户赋权"></a>非root组用户赋权</h2></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd docker  <span class="comment"># 若使用一键安装脚本会自动创建这个组，提示已存在</span></span><br><span class="line">sudo gpasswd -a <span class="variable">$&#123;USER&#125;</span> docker  <span class="comment"># 将当前用户添加到docker组，也可以手动指定用户名</span></span><br><span class="line">sudo service docker restart  <span class="comment"># 重启docker服务 获得新授权的用户需要重新登陆shell客户端</span></span><br></pre></td></tr></table></figure><h2 id="Docker-代理"><a href="#Docker-代理" class="headerlink" title="Docker 代理"></a>Docker 代理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /lib/systemd/system/docker.service</span><br><span class="line"></span><br><span class="line">Restart=always</span><br><span class="line">Environment=<span class="string">&quot;HTTP_PROXY=http://ip:port&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;HTTPS_PROXY=http://ip:port&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;NO_PROXY=localhost,127.0.0.1,192.168.*&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安装笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于pyqt的无边框浏览器</title>
      <link href="/2023/04/24/%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/18.%E5%9F%BA%E4%BA%8Epyqt%E7%9A%84%E6%97%A0%E8%BE%B9%E6%A1%86%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
      <url>/2023/04/24/%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/18.%E5%9F%BA%E4%BA%8Epyqt%E7%9A%84%E6%97%A0%E8%BE%B9%E6%A1%86%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>自己写了个基于pyqt的无边框浏览器，可以配合源阅读的web看书，自用自取<br>目录结构：</p><ul><li>ui<br>  |— ui_webview.py</li><li>call_webview.y</li></ul><p>环境安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install PyQt5</span><br><span class="line">pip install PyQtWebEngine</span><br></pre></td></tr></table></figure><p>我的本地环境：<br>python 3.7<br>PyQt5==5.15.9<br>PyQtWebEngine==5.15.6</p><p>直接执行 <code>call_webview.py</code> 即可使用，网址修改 <code>call_webview</code> 中对应位置即可，源码如下：</p><p><code>ui_webview.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore, QtGui, QtWidgets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ui_WebView</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setupUi</span>(<span class="params">self, WebView</span>):</span><br><span class="line">        WebView.setObjectName(<span class="string">&quot;WebView&quot;</span>)</span><br><span class="line">        WebView.setWindowModality(QtCore.Qt.NonModal)</span><br><span class="line">        WebView.resize(<span class="number">538</span>, <span class="number">276</span>)</span><br><span class="line">        WebView.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)</span><br><span class="line">        WebView.setAnimated(<span class="literal">True</span>)</span><br><span class="line">        self.centralwidget = QtWidgets.QWidget(WebView)</span><br><span class="line">        self.centralwidget.setObjectName(<span class="string">&quot;centralwidget&quot;</span>)</span><br><span class="line">        WebView.setCentralWidget(self.centralwidget)</span><br><span class="line">        self.statusBar = QtWidgets.QStatusBar(WebView)</span><br><span class="line">        self.statusBar.setObjectName(<span class="string">&quot;statusBar&quot;</span>)</span><br><span class="line">        WebView.setStatusBar(self.statusBar)</span><br><span class="line"></span><br><span class="line">        self.retranslateUi(WebView)</span><br><span class="line">        QtCore.QMetaObject.connectSlotsByName(WebView)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">retranslateUi</span>(<span class="params">self, WebView</span>):</span><br><span class="line">        _translate = QtCore.QCoreApplication.translate</span><br><span class="line">        WebView.setWindowTitle(_translate(<span class="string">&quot;WebView&quot;</span>, <span class="string">&quot; &quot;</span>))</span><br></pre></td></tr></table></figure><p><code>call_webview.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QMouseEvent</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWebEngineWidgets <span class="keyword">import</span> QWebEngineView</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QMainWindow, QHBoxLayout</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt, QPoint, QUrl</span><br><span class="line"><span class="keyword">import</span> ui.ui_webview <span class="keyword">as</span> ui</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WebViewWindow</span>(QMainWindow, ui.Ui_WebView):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(WebViewWindow, self).__init__()</span><br><span class="line">        self.setWindowFlags(Qt.FramelessWindowHint)</span><br><span class="line">        self.setupUi(self)</span><br><span class="line">        self.webview = WebEngineView(self)</span><br><span class="line">        self.webview.load(QUrl(<span class="string">&quot;http://手机ip地址/bookshelf/index.html#/&quot;</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 渲染到页面</span></span><br><span class="line">        self.setCentralWidget(self.webview)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mouseMoveEvent</span>(<span class="params">self, e: QMouseEvent</span>):  <span class="comment"># 重写移动事件</span></span><br><span class="line">        self._endPos = e.pos() - self._startPos</span><br><span class="line">        self.move(self.pos() + self._endPos)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mousePressEvent</span>(<span class="params">self, e: QMouseEvent</span>):</span><br><span class="line">        <span class="keyword">if</span> e.button() == Qt.LeftButton:</span><br><span class="line">            self._isTracking = <span class="literal">True</span></span><br><span class="line">            self._startPos = QPoint(e.x(), e.y())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mouseReleaseEvent</span>(<span class="params">self, e: QMouseEvent</span>):</span><br><span class="line">        <span class="keyword">if</span> e.button() == Qt.LeftButton:</span><br><span class="line">            self._isTracking = <span class="literal">False</span></span><br><span class="line">            self._startPos = <span class="literal">None</span></span><br><span class="line">            self._endPos = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建浏览器，重写重写createwindow方法实现页面连接的点击跳转</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WebEngineView</span>(<span class="title class_ inherited__">QWebEngineView</span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, mainwindow, parent=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="built_in">super</span>(WebEngineView, self).__init__(parent)</span><br><span class="line">    self.mainwindow = mainwindow</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 重写createwindow()</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">createWindow</span>(<span class="params">self, QWebEnginePage_WebWindowType</span>):</span><br><span class="line">    new_webview = WebEngineView(self.mainwindow)</span><br><span class="line">    self.mainwindow.create_tab(new_webview)</span><br><span class="line">    <span class="keyword">return</span> new_webview</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line">    <span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication</span><br><span class="line"></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    mainWindow = WebViewWindow()</span><br><span class="line">    mainWindow.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>效果如下图：<br><img src="https://blog.oss.langzihan.top/images/no-border-web-view-base-of-pyqt/8e25dc7d629426966c99f0d60fe017bb.jpg" alt="效果图"></p>]]></content>
      
      
      <categories>
          
          <category> 实用配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pyqt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git取消超过范围大文件并重新提交</title>
      <link href="/2023/04/17/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/24.git%E5%8F%96%E6%B6%88%E8%B6%85%E8%BF%87%E8%8C%83%E5%9B%B4%E5%A4%A7%E6%96%87%E4%BB%B6%E5%B9%B6%E9%87%8D%E6%96%B0%E6%8F%90%E4%BA%A4/"/>
      <url>/2023/04/17/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/24.git%E5%8F%96%E6%B6%88%E8%B6%85%E8%BF%87%E8%8C%83%E5%9B%B4%E5%A4%A7%E6%96%87%E4%BB%B6%E5%B9%B6%E9%87%8D%E6%96%B0%E6%8F%90%E4%BA%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="问题报错"><a href="#问题报错" class="headerlink" title="问题报错"></a>问题报错</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">remote: error: File: db383b59a623629b36cc62dd3917db21c1375cf0 690.93 MB, exceeds 100.00 MB.</span><br></pre></td></tr></table></figure><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ol><li>定位大文件位置 <code>git rev-list --objects --all | grep db383b59a623629b36cc62dd3917db21c1375cf0</code></li><li>查看push失败的commit版本号 <code>git log</code></li><li>回滚到无误的commit版本 <code>git reset 699db94c8edea41205b34923ae2cefb9b7dcc1d3</code></li><li>定义大文件规则纳入<code>gitignore</code></li><li>重新 <code>add</code> <code>commit</code> <code>push</code>三连</li></ol>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux开机自启服务简单配置</title>
      <link href="/2023/04/12/%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/17.linux%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E6%9C%8D%E5%8A%A1%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/04/12/%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/17.linux%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E6%9C%8D%E5%8A%A1%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>使用任意方式在  <code>/usr/lib/systemd/system</code> 路径下新建一个 <code>demo.service</code> 文件并在其中以如下模板编写内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=demo <span class="comment"># 任务描述</span></span><br><span class="line">After=network.target  <span class="comment"># 在什么启动项之后执行</span></span><br><span class="line"> </span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">WorkingDirectory=/usr/local/bin  <span class="comment"># 执行程序的上级文件夹路径 </span></span><br><span class="line">ExecStart=/usr/local/bin/alist command1 command2  <span class="comment"># 需要开机自启的命令</span></span><br><span class="line">Restart=on-failure</span><br><span class="line"> </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>执行 <code>systemctl daemon-reload</code> 重载配置<br>使用以下命令管理程序：</p><ul><li>启动: <code>systemctl start demo</code></li><li>关闭: <code>systemctl stop demo</code></li><li>配置开机自启: <code>systemctl enable demo</code></li><li>取消开机自启: <code>systemctl disable demo</code></li><li>状态: <code>systemctl status demo</code></li><li>重启: <code>systemctl restart demo</code></li></ul><p><strong>注：</strong><br>1.系统配置中也可以添加开机任务，路径为<code>/etc/systemd/system</code><br>2.可以将命令设置成 <code>@</code> 结尾来传入执行参数实现复用，如 <code>demo@.service</code> ,使用示例如 <code>systemctl start demo@8080</code> ，在 <code>ExecStart</code> 中使用 <code>%i</code> （数值）之类的形式获取@后的参数信息，如 <code>/usr/local/bin/demo -p %i</code></p>]]></content>
      
      
      <categories>
          
          <category> 实用配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开机自启 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手动安装btop</title>
      <link href="/2023/03/30/%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/16.%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85btop/"/>
      <url>/2023/03/30/%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/16.%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85btop/</url>
      
        <content type="html"><![CDATA[<p>转载源：<a href="https://www.jianshu.com/p/ea5426f8f6a8">https://www.jianshu.com/p/ea5426f8f6a8</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># centos</span></span><br><span class="line">yum install bzip2 -y</span><br><span class="line"><span class="comment"># ubuntu</span></span><br><span class="line">sudo apt-get install bzip2 -y</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> ~/btop</span><br><span class="line"><span class="built_in">cd</span> ~/btop</span><br><span class="line"></span><br><span class="line"><span class="comment"># ghproxy 加速下载，使用最新版本</span></span><br><span class="line">wget https://ghproxy.com/https://github.com/aristocratos/btop/releases/latest/download/btop-x86_64-linux-musl.tbz</span><br><span class="line"></span><br><span class="line">bunzip2 btop-x86_64-linux-musl.tbz</span><br><span class="line">tar xf btop-x86_64-linux-musl.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二进制安装</span></span><br><span class="line"><span class="built_in">cd</span> btop</span><br><span class="line">make install PREFIX=/opt/btop</span><br><span class="line"></span><br><span class="line"><span class="built_in">ln</span> -s /opt/btop/bin/btop /usr/bin/btop</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安装笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> btop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>paddlelite模型部署</title>
      <link href="/2023/03/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/01.paddlelite%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2/"/>
      <url>/2023/03/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/01.paddlelite%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>对完成训练的paddlehub的可用模型(人脸检测)进行转换，使其能够部署在paddlelite环境下，已完成x86架构linux(ubuntu)中的模型部署</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>linux下配置个新的conda环境用来测试，需要添加opencv模块和paddlelite模块<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conda create --name <span class="built_in">test</span> python=3.7</span><br><span class="line">conda activate <span class="built_in">test</span></span><br><span class="line">pip install paddlelite</span><br><span class="line">pip install opencv-python==4.5.1.48</span><br></pre></td></tr></table></figure></p><h2 id="模型转换"><a href="#模型转换" class="headerlink" title="模型转换"></a>模型转换</h2><p>有python脚本和shell脚本两种方式，分别用于windows环境和linux环境</p><ul><li>python脚本</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> paddlelite.lite <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 创建opt实例</span></span><br><span class="line">opt = Opt()</span><br><span class="line"><span class="comment"># 2. 指定输入模型地址</span></span><br><span class="line">opt.set_model_dir(<span class="string">r&quot;models\ultra_light_fast_generic_face_detector_1mb_640\ultra_light_fast_generic_face_detector_1mb_640&quot;</span>)</span><br><span class="line"><span class="comment"># 3. 指定转化类型： arm、x86、opencl、xpu、npu</span></span><br><span class="line">opt.set_valid_places(<span class="string">&quot;x86&quot;</span>)</span><br><span class="line"><span class="comment"># 4. 指定模型转化类型： naive_buffer、protobuf</span></span><br><span class="line">opt.set_model_type(<span class="string">&quot;naive_buffer&quot;</span>)</span><br><span class="line"><span class="comment"># 4. 输出模型地址</span></span><br><span class="line">opt.set_optimize_out(<span class="string">r&quot;models\new_models\ultra_light_fast_generic_face_detector_1mb_640&quot;</span>)</span><br><span class="line"><span class="comment"># 5. 执行模型优化</span></span><br><span class="line">opt.run()</span><br></pre></td></tr></table></figure><ul><li>bash命令，需要先切换到安装paddlelite的环境</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paddle_lite_opt --model_dir=./ultra_light_fast_generic_face_detector_1mb_640/ultra_light_fast_generic_face_detector_1mb_640 --optimize_out=./new_models/ultra_light_fast_generic_face_detector_1mb_640 --optimize_out_type=naive_buffer --valid_targets=x86</span><br></pre></td></tr></table></figure><p><img src="https://blog.oss.langzihan.top/images/model-deploy-base-of-paddlelite/00e9caa951d7b7d468eecc43028668e0.jpg" alt="模型转换"></p><p>通过模型转换获得一个以nb为后缀的模型文件</p><h2 id="模型的加载与使用"><a href="#模型的加载与使用" class="headerlink" title="模型的加载与使用"></a>模型的加载与使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> paddlelite.lite <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">image_path = <span class="string">&quot;./faces/0.jpg&quot;</span></span><br><span class="line">image_orig = cv2.imread(image_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 人脸模型输入要求 640*480</span></span><br><span class="line">c, h, w = <span class="number">3</span>, <span class="number">480</span>, <span class="number">640</span></span><br><span class="line"><span class="comment"># 归一化</span></span><br><span class="line">image_data = cv2.cvtColor(image_orig, cv2.COLOR_BGR2RGB)</span><br><span class="line">image_data = cv2.resize(image_data, (w, h))</span><br><span class="line">image_mean = np.array([<span class="number">127</span>, <span class="number">127</span>, <span class="number">127</span>])</span><br><span class="line">image_data = (image_data - image_mean) / <span class="number">128.0</span></span><br><span class="line">image_data = np.transpose(image_data, [<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">image_data = image_data.reshape([<span class="number">1</span>, c, h, w]).astype(<span class="string">&#x27;float32&#x27;</span>)</span><br><span class="line"></span><br><span class="line">config = MobileConfig()</span><br><span class="line">config.set_model_from_file(<span class="string">&#x27;ultra_light_fast_generic_face_detector_1mb_640.nb&#x27;</span>)</span><br><span class="line">predictor = create_paddle_predictor(config)</span><br><span class="line"></span><br><span class="line">input_tensor = predictor.get_input(<span class="number">0</span>)</span><br><span class="line">input_tensor.from_numpy(image_data)</span><br><span class="line">predictor.run()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有几个输出接几个，人脸检测模型有两路输出</span></span><br><span class="line">output_tensor_0 = predictor.get_output(<span class="number">0</span>)</span><br><span class="line">output_tensor_1 = predictor.get_output(<span class="number">1</span>)</span><br><span class="line">output_data_0 = output_tensor_0.numpy()[<span class="number">0</span>]</span><br><span class="line">output_data_1 = output_tensor_1.numpy()[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机视觉 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> paddle </tag>
            
            <tag> paddle-lite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于HomeAssistant搭建自家智能家居中枢（一）</title>
      <link href="/2023/02/10/%E7%99%BE%E5%91%B3%E6%9D%82%E8%B4%A7/01.%E5%9F%BA%E4%BA%8EHomeAssistant%E6%90%AD%E5%BB%BA%E8%87%AA%E5%AE%B6%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85%E4%B8%AD%E6%9E%A2%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2023/02/10/%E7%99%BE%E5%91%B3%E6%9D%82%E8%B4%A7/01.%E5%9F%BA%E4%BA%8EHomeAssistant%E6%90%AD%E5%BB%BA%E8%87%AA%E5%AE%B6%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85%E4%B8%AD%E6%9E%A2%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>当前市面上的智能家居各自为政，平台设备各为孤岛，目前正好老爹送了一个小度在家1s给我，但是面对家里华为系、小米系的生态，感觉小度的发挥受到了限制，为了最大化小度触屏音箱的智能中枢功能同时让即将闲置的玩客云（待机功率2~3w，价格45元的小型服务器不要太给力）继续发光发热，我决定折腾折腾Home Assistant，实现以智能音响为交互入口、打破全屋智能生态孤岛的目的</p><h1 id="期望"><a href="#期望" class="headerlink" title="期望"></a>期望</h1><p><strong>这是一个漫漫长路，需要一点一点实现，但目标还是要有的</strong></p><ul><li><del>华为生态智能插座接入控制</del> 目前没看到希望</li><li><del>华为生态体脂称接入</del> 以后还是买米家的设备吧</li><li>小度生态的可视门铃接入Home Assistant app控制</li><li>小爱音箱接入</li><li>美的家居接入</li><li>小度音箱接入</li></ul><h1 id="玩客云刷入armbian"><a href="#玩客云刷入armbian" class="headerlink" title="玩客云刷入armbian"></a>玩客云刷入armbian</h1><p>资料很多，不赘述，总的来说一句话“短接、刷包”<br>我当前的环境：<br>hzyitc大佬的直刷包（至少刷过一次系统才行），直接按住重置键公对公数据线刷，<a href="https://github.com/hzyitc/armbian-onecloud/releases/download/ci-20221213-192811-UTC/Armbian_23.02.0-trunk_Onecloud_bullseye_edge_6.1.0.burn.img.xz">下载传送门</a><br>docker常规安装方式不行，可以用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">sh get-docker.sh --mirror=Aliyun</span><br></pre></td></tr></table></figure><h1 id="安装Home-Assistant"><a href="#安装Home-Assistant" class="headerlink" title="安装Home Assistant"></a>安装Home Assistant</h1><p>这是docker的安装方式，比较省心，但是没有科学上网方式的话会比较慢<br>docker pull使用proxy的方式的设置如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/systemd/system/docker.service.d</span><br><span class="line">sudo vim /etc/systemd/system/docker.service.d/http-proxy.conf</span><br><span class="line"><span class="comment"># 填入以下配置</span></span><br><span class="line">[Service]</span><br><span class="line">Environment=<span class="string">&quot;HTTP_PROXY=http://proxy.example.com:80&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;HTTPS_PROXY=https://proxy.example.com:443&quot;</span></span><br><span class="line"></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><br>如没有以上需求则直接按如下命令安装，慢就慢点还是能装的：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /root/HA/config</span><br><span class="line">sudo docker pull ghcr.io/home-assistant/home-assistant:stable</span><br><span class="line"><span class="comment"># 以下是启动命令</span></span><br><span class="line">sudo docker run -d --restart=always --name homeassistant --privileged -e TZ=Asia/Shanghai -v /root/HA/config:/config --network=host ghcr.io/home-assistant/home-assistant:stable</span><br></pre></td></tr></table></figure><br>浏览器能顺利访问玩客云的IP加上8123端口号就算完成安装了</p><h1 id="安装HACS插件"><a href="#安装HACS插件" class="headerlink" title="安装HACS插件"></a>安装HACS插件</h1><p>国内版本的HACS极速版 <a href="https://github.com/hacs-china/integration/releases/">github传送门</a></p><ul><li>下载hacs.zip</li><li>在之前映射的config目录<code>/root/HA/config</code>中创建文件夹<code>themes</code>、<code>custom_components</code>、<code>www</code>，没有<code>tts</code>就再补个，以上文件夹有的话就不用新建了</li><li>将hacs.zip解压出来的文件夹hacs用xftp送到<code>custom_components</code>文件夹中就算完成了</li><li>重启Home Assistant，进入web页面，<code>配置-设备与服务-右下角添加集成-搜索hacs</code>点进去按步骤一步一步走就行<br><strong>注：这里需要你有一个github账户来授权</strong></li><li>ctrl+F5强制刷新下页面，左侧有一个HACS的栏目就是完成安装了，点击HACS右侧页面有个搜索栏，就可以在那里搜索对应的插件了</li></ul><h1 id="安装HAVCS插件"><a href="#安装HAVCS插件" class="headerlink" title="安装HAVCS插件"></a>安装HAVCS插件</h1><p>下载地址 <a href="https://github.com/cnk700i/havcs/releases">https://github.com/cnk700i/havcs/releases</a><br>安装方式同上，将解压后的havcs文件夹放到<code>custom_components</code>中，在到集成中添加相关信息<br><strong>注：该插件使用可参考<a href="https://ljr.im/articles/plugin-smart-speaker-access-home-assistant-integration-plusplus/">HAVCS V3手册文档</a></strong></p><p><strong>未完，待续。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 百味杂货 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Home Assistant </tag>
            
            <tag> 智能家居 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>debian换源笔记</title>
      <link href="/2023/01/18/%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/16.debian%E6%8D%A2%E6%BA%90%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/01/18/%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/16.debian%E6%8D%A2%E6%BA%90%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="1-备份源"><a href="#1-备份源" class="headerlink" title="1.备份源"></a>1.备份源</h1><p>ctrl+alt+t打开终端</p><p><code>sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</code></p><h1 id="2-打开源文件"><a href="#2-打开源文件" class="headerlink" title="2.打开源文件"></a>2.打开源文件</h1><p>用gedit打开源文件，ctrl+a全选删除，并粘贴更换源（任选一个）</p><p> <code>sudo vim /etc/apt/sources.list</code></p><h1 id="阿里源"><a href="#阿里源" class="headerlink" title="阿里源"></a>阿里源</h1><p><code>bullseye</code> 换源</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.aliyun.com/debian/ bullseye main non-free contrib</span><br><span class="line"><span class="comment">#deb-src https://mirrors.aliyun.com/debian/ bullseye main non-free contrib</span></span><br><span class="line">deb https://mirrors.aliyun.com/debian-security/ bullseye-security main</span><br><span class="line"><span class="comment">#deb-src https://mirrors.aliyun.com/debian-security/ bullseye-security main</span></span><br><span class="line">deb https://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib</span><br><span class="line"><span class="comment">#deb-src https://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib</span></span><br><span class="line">deb https://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib</span><br><span class="line"><span class="comment">#deb-src https://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib</span></span><br></pre></td></tr></table></figure><h4 id="3-更新源"><a href="#3-更新源" class="headerlink" title="3.更新源"></a>3.更新源</h4><p><code>sudo apt-get update</code></p>]]></content>
      
      
      <categories>
          
          <category> 实用配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 换源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker下的环境部署合集</title>
      <link href="/2023/01/18/%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/15.docker%E4%B8%8B%E7%9A%84%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2%E5%90%88%E9%9B%86/"/>
      <url>/2023/01/18/%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/15.docker%E4%B8%8B%E7%9A%84%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h1><p>一键安装脚本命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure></p><h1 id="可视化面板安装"><a href="#可视化面板安装" class="headerlink" title="可视化面板安装"></a>可视化面板安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart always --name fast -p 8081:8081 -d -v /var/run/docker.sock:/var/run/docker.sock wangbinxingkong/fast</span><br></pre></td></tr></table></figure><h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝配置文件到宿主机</span></span><br><span class="line">docker run --name tmp-nginx-container -d nginx</span><br><span class="line"><span class="built_in">mkdir</span> -p /root/nginx/</span><br><span class="line">docker <span class="built_in">cp</span> tmp-nginx-container:/etc/nginx/nginx.conf /root/nginx/nginx.conf</span><br><span class="line">docker <span class="built_in">cp</span> -a tmp-nginx-container:/usr/share/nginx/html /root/nginx</span><br><span class="line">docker <span class="built_in">cp</span> -a tmp-nginx-container:/etc/nginx/conf.d /root/nginx/conf.d</span><br><span class="line"><span class="comment"># 删除临时容器</span></span><br><span class="line">docker <span class="built_in">rm</span> -f tmp-nginx-container</span><br><span class="line"></span><br><span class="line"><span class="comment"># 映射目录运行容器</span></span><br><span class="line">docker run --name nignx -e TZ=<span class="string">&quot;Asia/Shanghai&quot;</span> -d -p 80:80 -v /root/nginx/html:/usr/share/nginx/html -v /root/nginx/nginx.conf:/etc/nginx/nginx.conf -v /root/nginx/conf.d:/etc/nginx/conf.d -v /root/nginx/logs:/var/log/nginx nginx</span><br></pre></td></tr></table></figure><h1 id="memcached安装"><a href="#memcached安装" class="headerlink" title="memcached安装"></a>memcached安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get install memcached libmemcached-dev -y</span><br><span class="line">pip3 install --timeout=3600 pylibmc django-pylibmc</span><br><span class="line">systemctl enable --now memcached</span><br></pre></td></tr></table></figure><h1 id="mariadb安装"><a href="#mariadb安装" class="headerlink" title="mariadb安装"></a>mariadb安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get install mariadb-server</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建root账户</span></span><br><span class="line">mysqladmin -uroot password &#x27;123456&#x27;</span><br></pre></td></tr></table></figure><ul><li>seafile解压<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">到指定目录创建seafile文件夹</span></span><br><span class="line">mkdir -p seafile/installed</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将下载的seafile-server-xxx.tar.gz复制到installed文件夹中进行解压</span></span><br><span class="line">tar -zxf seafile-server-9.0.2-bullseye-arm32v7l.tar.gz -C ../</span><br><span class="line">chmod -R 755 seafile-server-9.0.2/</span><br></pre></td></tr></table></figure>seafile目录结构如下：<br>seafile<br>├── installed<br>│   └── seafile-server-9.0.2-bullseye-arm32v7l.tar.gz<br>└── seafile-server-9.0.2<br>  ├── setup-seafile-mysql.sh<br>  ├── ……<br>然后执行安装脚本<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd seafile/seafile-server-9.0.2</span><br><span class="line">./setup-seafile-mysql.sh</span><br></pre></td></tr></table></figure>初始化安装步骤：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-------------------------------------------------------</span><br><span class="line">Please choose a way to initialize seafile databases:</span><br><span class="line">-------------------------------------------------------</span><br><span class="line"></span><br><span class="line">[1] Create new ccnet/seafile/seahub databases</span><br><span class="line">[2] Use existing ccnet/seafile/seahub databases</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入 1，然后根据提示依次提供相关信息即可</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安装笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> docker </tag>
            
            <tag> php </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pip换源笔记</title>
      <link href="/2023/01/06/%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/15.pip%E6%8D%A2%E6%BA%90%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/01/06/%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/15.pip%E6%8D%A2%E6%BA%90%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="临时使用"><a href="#临时使用" class="headerlink" title="临时使用"></a>临时使用</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple xxxx</span><br></pre></td></tr></table></figure><h1 id="永久更改pip源"><a href="#永久更改pip源" class="headerlink" title="永久更改pip源"></a>永久更改pip源</h1><p>可以选择升级下pip再配置<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install pip -U </span><br><span class="line">pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">pip config set global.trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure><br>查看当前pip源：<br><code>pip config list</code></p><div class="table-container"><table><thead><tr><th>国内源</th><th>地址</th></tr></thead><tbody><tr><td>阿里云</td><td><a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a></td></tr><tr><td>中国科技大学</td><td><a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a></td></tr><tr><td>豆瓣</td><td><a href="http://pypi.douban.com/simple">http://pypi.douban.com/simple</a></td></tr><tr><td>Python官方</td><td><a href="https://pypi.python.org/simple/">https://pypi.python.org/simple/</a></td></tr><tr><td>v2ex</td><td><a href="http://pypi.v2ex.com/simple/">http://pypi.v2ex.com/simple/</a></td></tr><tr><td>×××</td><td><a href="http://pypi.mirrors.opencas.cn/simple/">http://pypi.mirrors.opencas.cn/simple/</a></td></tr><tr><td>清华大学</td><td><a href="https://pypi.tuna.tsinghua.edu.cn/simple/">https://pypi.tuna.tsinghua.edu.cn/simple/</a></td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 实用配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 换源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python配合阿里云域名解析实现DDNS功能</title>
      <link href="/2023/01/05/%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/14.python%E9%85%8D%E5%90%88%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E5%AE%9E%E7%8E%B0DDNS%E5%8A%9F%E8%83%BD/"/>
      <url>/2023/01/05/%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/14.python%E9%85%8D%E5%90%88%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E5%AE%9E%E7%8E%B0DDNS%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="前置工作"><a href="#前置工作" class="headerlink" title="前置工作"></a>前置工作</h1><ol><li>安装阿里模块<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install aliyun-python-sdk-core-v3 </span><br><span class="line">pip install aliyun-python-sdk-alidns==3.0.1</span><br></pre></td></tr></table></figure></li><li>阿里云获取 AccessKey</li></ol><h1 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> aliyunsdkcore.client <span class="keyword">import</span> AcsClient</span><br><span class="line"><span class="keyword">from</span> aliyunsdkalidns.request.v20150109.DescribeSubDomainRecordsRequest <span class="keyword">import</span> DescribeSubDomainRecordsRequest</span><br><span class="line"><span class="keyword">from</span> aliyunsdkalidns.request.v20150109.DeleteSubDomainRecordsRequest <span class="keyword">import</span> DeleteSubDomainRecordsRequest</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DnsController</span>:</span><br><span class="line">    access_key_id = <span class="string">&quot;&quot;</span></span><br><span class="line">    access_key_secret = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    region = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 时区</span></span><br><span class="line">    record_type = <span class="string">&quot;A&quot;</span></span><br><span class="line"></span><br><span class="line">    domain = <span class="string">&quot;langzihan.top&quot;</span></span><br><span class="line">    name_ipv4 = [<span class="string">&quot;p330&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.client = AcsClient(</span><br><span class="line">            self.access_key_id,</span><br><span class="line">            self.access_key_secret,</span><br><span class="line">            self.region</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加新的域名解析记录</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, DomainName, RR, <span class="type">Type</span>, Value</span>):</span><br><span class="line">        <span class="keyword">from</span> aliyunsdkalidns.request.v20150109.AddDomainRecordRequest <span class="keyword">import</span> AddDomainRecordRequest</span><br><span class="line">        request = AddDomainRecordRequest()</span><br><span class="line">        request.set_accept_format(<span class="string">&#x27;json&#x27;</span>)</span><br><span class="line">        request.set_DomainName(DomainName)</span><br><span class="line">        request.set_RR(RR)</span><br><span class="line">        request.set_Type(<span class="type">Type</span>)</span><br><span class="line">        request.set_Value(Value)</span><br><span class="line">        response = self.client.do_action_with_exception(request)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实现ddns</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_target_dns</span>(<span class="params">self, ip_address</span>):</span><br><span class="line">        request = DescribeSubDomainRecordsRequest()</span><br><span class="line">        request.set_accept_format(<span class="string">&#x27;json&#x27;</span>)</span><br><span class="line">        request.set_DomainName(self.domain)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> self.name_ipv4:</span><br><span class="line">            request.set_SubDomain(item + <span class="string">&#x27;.&#x27;</span> + self.domain)</span><br><span class="line">            response = self.client.do_action_with_exception(request)</span><br><span class="line">            domain_list = json.loads(response)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> domain_list[<span class="string">&#x27;TotalCount&#x27;</span>] == <span class="number">0</span>:</span><br><span class="line">                self.add(self.domain, item, self.record_type, ip_address)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> domain_list[<span class="string">&#x27;DomainRecords&#x27;</span>][<span class="string">&#x27;Record&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;Value&#x27;</span>].strip() != ip_address.strip():</span><br><span class="line">                    request = DeleteSubDomainRecordsRequest()</span><br><span class="line">                    request.set_accept_format(<span class="string">&#x27;json&#x27;</span>)</span><br><span class="line">                    request.set_DomainName(self.domain)</span><br><span class="line">                    request.set_RR(item)</span><br><span class="line">                    response = self.client.do_action_with_exception(request)</span><br><span class="line">                    self.add(self.domain, item, self.record_type, ip_address)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    root_path = <span class="string">&#x27;.&#x27;</span></span><br><span class="line">    log_path = root_path + <span class="string">&#x27;/ip_log.log&#x27;</span></span><br><span class="line">    fa = <span class="built_in">open</span>(log_path, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    cur_ip = socket.gethostbyname(socket.gethostname())</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(log_path) <span class="keyword">and</span> fa.read().strip() == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        fa.write(cur_ip + <span class="string">&#x27;##&#x27;</span>)</span><br><span class="line">        DnsController().update_target_dns(cur_ip)</span><br><span class="line">        fa.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(log_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fr:</span><br><span class="line">        old_ip = fr.read().strip(<span class="string">&#x27;##&#x27;</span>).split(<span class="string">&#x27;##&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> old_ip != cur_ip <span class="keyword">or</span> old_ip <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># print(&#x27;old:&#x27;, old_ip)</span></span><br><span class="line">            fa.write(cur_ip + <span class="string">&#x27;##&#x27;</span>)</span><br><span class="line">            DnsController().update_target_dns(cur_ip)</span><br><span class="line"></span><br><span class="line">    fa.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 实用配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 阿里云 </tag>
            
            <tag> DDNS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>armbian下的seafile部署</title>
      <link href="/2022/12/25/%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/14.armbian%E4%B8%8B%E7%9A%84seafile%E9%83%A8%E7%BD%B2/"/>
      <url>/2022/12/25/%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/14.armbian%E4%B8%8B%E7%9A%84seafile%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="seafile简介"><a href="#seafile简介" class="headerlink" title="seafile简介"></a>seafile简介</h1><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Seafile 是一款开源的企业云盘，注重可靠性和性能。支持 Windows, Mac, Linux, iOS, Android 平台。支持文件同步或者直接挂载到本地访问。</span><br></pre></td></tr></table></figure><p>安装包下载地址：<a href="https://github.com/haiwen/seafile-rpi/releases/">社区版下载传送门</a>，<a href="https://download.seafile.com/d/6e5297246c/?p=/pro">专业版下载传送门</a></p><p>社区版使用按官网来就行，专业版不付费的话限制使用三个账号，本文使用的是(9.0.2版本)[]<br><strong>注意</strong>：seafile 9.0.x 版本不支持在 Centos 系统 tar 包部署，支持 Docker 方式部署 </p><h1 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get upgrade</span><br></pre></td></tr></table></figure><ul><li><p>软件依赖包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install python3 python3-setuptools python3-pip python3-ldap  libmysqlclient-dev  -y</span><br><span class="line">pip3 install --timeout=3600 django==3.2.* future mysqlclient pymysql Pillow pylibmc captcha jinja2 sqlalchemy==1.4.3 psd-tools django-pylibmc django-simple-captcha pycryptodome==3.12.0 lxml</span><br></pre></td></tr></table></figure></li><li><p>nginx安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y nginx</span><br></pre></td></tr></table></figure></li><li><p>memcached安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get install memcached libmemcached-dev -y</span><br><span class="line">pip3 install --timeout=3600 pylibmc django-pylibmc</span><br><span class="line">systemctl enable --now memcached</span><br></pre></td></tr></table></figure></li><li><p>mariadb安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get install mariadb-server</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建root账户</span></span><br><span class="line">mysqladmin -uroot password &#x27;123456&#x27;</span><br></pre></td></tr></table></figure></li><li><p>seafile解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">到指定目录创建seafile文件夹</span></span><br><span class="line">mkdir -p seafile/installed</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将下载的seafile-server-xxx.tar.gz复制到installed文件夹中进行解压</span></span><br><span class="line">tar -zxf seafile-server-9.0.2-bullseye-arm32v7l.tar.gz -C ../</span><br><span class="line">chmod -R 755 seafile-server-9.0.2/</span><br></pre></td></tr></table></figure><p>seafile目录结构如下：<br>seafile<br>├── installed<br>│   └── seafile-server-9.0.2-bullseye-arm32v7l.tar.gz<br>└── seafile-server-9.0.2<br>  ├── setup-seafile-mysql.sh<br>  ├── ……<br>然后执行安装脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd seafile/seafile-server-9.0.2</span><br><span class="line">./setup-seafile-mysql.sh</span><br></pre></td></tr></table></figure><p>初始化安装步骤：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-------------------------------------------------------</span><br><span class="line">Please choose a way to initialize seafile databases:</span><br><span class="line">-------------------------------------------------------</span><br><span class="line"></span><br><span class="line">[1] Create new ccnet/seafile/seahub databases</span><br><span class="line">[2] Use existing ccnet/seafile/seahub databases</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入 1，然后根据提示依次提供相关信息即可</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h1><ul><li><p>修改监听地址<br><code>vim ../conf/gunicorn.conf.py</code><br>将其中<code>bind</code>地址修改成<code>0.0.0.0:8000</code></p></li><li><p>配置nginx<br>移除nginx的默认配置<code>rm /etc/nginx/sites-enabled/default</code><br><code>vim /etc/nginx/sites-available/seafile.conf</code>填入以下配置，通过反代理实现80端口访问seafile，同时开启webdav功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name default_server;</span><br><span class="line">    proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass         http://127.0.0.1:8000;</span><br><span class="line">        proxy_set_header   Host $host;</span><br><span class="line">        proxy_set_header   X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header   X-Forwarded-Host $server_name;</span><br><span class="line">        proxy_read_timeout  1200s;</span><br><span class="line">        client_max_body_size 0;</span><br><span class="line">        access_log      /var/log/nginx/seahub.access.log;</span><br><span class="line">        error_log       /var/log/nginx/seahub.error.log;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /seafhttp &#123;</span><br><span class="line">        rewrite ^/seafhttp(.*)$ $1 break;</span><br><span class="line">        proxy_pass http://127.0.0.1:8082;</span><br><span class="line">        client_max_body_size 0;</span><br><span class="line">        proxy_request_buffering off;</span><br><span class="line">        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_connect_timeout  36000s;</span><br><span class="line">        proxy_read_timeout  36000s;</span><br><span class="line">        proxy_send_timeout  36000s;</span><br><span class="line">        send_timeout  36000s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /media &#123;</span><br><span class="line">        root /media/sda1/seafile/seafile-server-latest/seahub;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /seafdav &#123;</span><br><span class="line">        proxy_pass         http://127.0.0.1:8080/seafdav;</span><br><span class="line">        proxy_set_header   Host $host;</span><br><span class="line">        proxy_set_header   X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header   X-Forwarded-Host $server_name;</span><br><span class="line">        proxy_set_header   X-Forwarded-Proto $scheme;</span><br><span class="line">        proxy_read_timeout  1200s;</span><br><span class="line">        client_max_body_size 0;</span><br><span class="line">        access_log      /var/log/nginx/seafdav.access.log seafileformat;</span><br><span class="line">        error_log       /var/log/nginx/seafdav.error.log;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /:dir_browser &#123;</span><br><span class="line">        proxy_pass  http://127.0.0.1:8080/:dir_browser;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>若要开启webdav还得修改conf/seafdav.conf如下</strong></p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[WEBDAV]</span><br><span class="line">enabled = true</span><br><span class="line">port = 8080</span><br><span class="line">share_name = /seafdav</span><br></pre></td></tr></table></figure><p>创建符号链接: <code>ln -s /etc/nginx/sites-available/seafile.conf /etc/nginx/sites-enabled/seafile.conf</code></p><ul><li><p>配置memcached优化性能<br>在<code>conf/seahub_settings.py</code>中追加以下配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django_pylibmc.memcached.PyLibMCCache&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;LOCATION&#x27;</span>: <span class="string">&#x27;127.0.0.1:11211&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;locmem&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.core.cache.backends.locmem.LocMemCache&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">COMPRESS_CACHE_BACKEND = <span class="string">&#x27;locmem&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>seafile注册为系统服务，开启开机自启<br><code>vim /etc/systemd/system/seafile.service</code>seafile的开机自启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Seafile</span><br><span class="line">After=network.target mariadb.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">ExecStart=/media/sda1/seafile/seafile-server-latest/seafile.sh start</span><br><span class="line">ExecStop=/media/sda1/seafile/seafile-server-latest/seafile.sh stop</span><br><span class="line">ExecReload=/media/sda1/seafile/seafile-server-latest/seafile.sh restart</span><br><span class="line">RemainAfterExit=yes</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p><code>vim /etc/systemd/system/seahub.service</code>seahub的开机自启</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Seafile hub</span><br><span class="line">After=network.target seafile.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/media/sda1/seafile/seafile-server-latest/seahub.sh start</span><br><span class="line">ExecStop=/media/sda1/seafile/seafile-server-latest/seahub.sh stop</span><br><span class="line">ExecReload=/media/sda1/seafile/seafile-server-latest/seahub.sh restart</span><br><span class="line">Type=oneshot</span><br><span class="line">RemainAfterExit=yes</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>保存配置后设置开机自启<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable seafile.service</span><br><span class="line">systemctl enable seahub.service</span><br></pre></td></tr></table></figure></p><h1 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h1><p>启动服务有两种方式，一般情况下先启动seafile，再启动seahub，关闭的话则反着来<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">seafile/seafile-server-latest/seafile.sh start # stop,restart</span><br><span class="line">seafile/seafile-server-latest/seahub.sh start # stop,restart</span><br></pre></td></tr></table></figure><br>或者使用系统服务命令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start seafile nginx</span><br><span class="line">systemctl start seahub</span><br></pre></td></tr></table></figure><br><strong>注：</strong>如果一切配置不出错，在初次启动seahub后将会有一段配置管理员登陆信息的交互<br>直接访问主机地址 <a href="http://192.168.2.15">http://192.168.2.15</a> 即可访问seafile，若配置有域名映射去管理面板中更改seafile、seahub服务器地址信息即可</p>]]></content>
      
      
      <categories>
          
          <category> 安装笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> armbian </tag>
            
            <tag> seafile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于sakura-frp的内网穿透安装部署</title>
      <link href="/2022/12/25/%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/13.%E5%9F%BA%E4%BA%8Esakura-frp%E7%9A%84%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
      <url>/2022/12/25/%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/13.%E5%9F%BA%E4%BA%8Esakura-frp%E7%9A%84%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="sakura-frp简介"><a href="#sakura-frp简介" class="headerlink" title="sakura frp简介"></a>sakura frp简介</h1><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sakura frp是一个提供基于 frp (Fast Reverse Proxy) 的内网穿透服务的平台，官网https://www.natfrp.com/，适用于docker、linux、windows等多个系统环境，支持多种架构，免费版支持10M带宽，2条隧道，每月5GB流量（每天签到可获取至少1GB额外流量，上月结余可转到下一个月）</span><br></pre></td></tr></table></figure><p>程序下载地址：<a href="https://www.natfrp.com/tunnel/download">官网下载传送门</a></p><h1 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.先确认处理器架构，根据架构去官网下载对应程序</span></span><br><span class="line">uname -m</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.将程序复制到以下目录中，并改名为frpc，赋予执行权限</span></span><br><span class="line">cd /usr/local/bin</span><br><span class="line">mv frpc_linux_armv7l frpc</span><br><span class="line">chmod +x frpc</span><br></pre></td></tr></table></figure><p>到这里就已经完成程序安装了，然后可以去官网完成节点选择、创建隧道等等前置工作</p><h1 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h1><ul><li>配置开机自启<br>1、<code>vim /etc/systemd/system/frpc@.service</code>粘贴一下配置<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Description=SakuraFrp Service</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=idle</span><br><span class="line">User=nobody</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=60s</span><br><span class="line">ExecStart=/usr/local/bin/frpc -f %i</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>2、重启下系统服务的守护程序<code>systemctl daemon-reload</code><br>3、去官网复制隧道配置第一行带<code>-f</code>的那一条信息，复制<code>-f</code>后面那个带冒号的信息类似<code>ndk***3lz:60***80</code>信息<br>4、启动内网穿透服务<code>systemctl start frpc@ndk***3lz:60***80</code>，<code>@</code>后面跟的就是步骤3中复制的配置信息<br>5、将该隧道的穿透服务设置为开机自启<code>systemctl enable frpc@ndk***3lz:60***80</code><br><strong>到这里frp内网穿透就配置完成了</strong><br><code>systemctl list-units &quot;frpc@*&quot;</code>可以查询当前系统运行的穿透服务<br><code>systemctl status frpc@ndk***3lz:60***80</code>可以查看对应隧道的状态<br><code>journalctl -u frpc@ndk***3lz:60***80</code>可以查看隧道日志</li></ul>]]></content>
      
      
      <categories>
          
          <category> 安装笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> frp </tag>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>debian下的nextcloud部署</title>
      <link href="/2022/12/22/%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/12.debian%E4%B8%8B%E7%9A%84nextcloud%E9%83%A8%E7%BD%B2%20-%20%E5%89%AF%E6%9C%AC/"/>
      <url>/2022/12/22/%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/12.debian%E4%B8%8B%E7%9A%84nextcloud%E9%83%A8%E7%BD%B2%20-%20%E5%89%AF%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="nextcloud简介"><a href="#nextcloud简介" class="headerlink" title="nextcloud简介"></a>nextcloud简介</h1><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nextcloud是开源的网络硬盘系统，不仅可以搭建私有云存储和同步数据，也提供联系人、日程管理功能，web端还提供私密的语音视频通话功能，还致力于数据安全，云端的数据均可选择加密，并遵循安全行业最佳实践。客户端支持windows、macos、linux三大pc平台，以及安卓ios两大移动平台，完全足够家庭或中小型团队协作使用。</span><br></pre></td></tr></table></figure><p>安装包下载地址：<a href="https://nextcloud.com/changelog/">官网下载传送门</a></p><h1 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get upgrade</span><br></pre></td></tr></table></figure><ul><li><p>基本组件安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y libreoffice ffmpeg</span><br></pre></td></tr></table></figure></li><li><p>nginx安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y nginx</span><br></pre></td></tr></table></figure></li><li><p>redis安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y redis</span><br></pre></td></tr></table></figure></li><li><p>mariadb安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install mariadb-server</span><br></pre></td></tr></table></figure></li><li><p>php及推荐模块安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y php7.4 php7.4-fpm php7.4-curl php7.4-gd php-redis php-mysql php7.4-zip php-mbstring php7.4-dom php7.4-intl</span><br></pre></td></tr></table></figure><p><strong>注：</strong>这里可以使用<code>apt-cache search php</code>命令先查询下看看当前源能够支持哪个版本的<code>php</code>，注意<code>nextcloud</code>部分版本是有<code>php</code>版本要求的，如我使用的<code>25.0.2</code>版本就要求至少<code>php7.4</code></p></li><li><p>解压nextcloud压缩包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip nextcloud-25.0.2.zip -d /var/www/html/</span><br></pre></td></tr></table></figure></li></ul><h1 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h1><ul><li><p>创建数据目录，更改目录权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/www/html/nextcloud/data &amp;&amp; chown -R www-data:www-data /var/www/html/nextcloud</span><br></pre></td></tr></table></figure></li><li><p>配置php<br><code>vim /etc/php/7.4/fpm/php.ini</code><br>具体修改以下配置，前面存在;注释的，取消注释，值不一致的修改成一致</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">expose_php=off</span><br><span class="line">date.timezone=Asia/Shanghai</span><br><span class="line">opcache.enable=1</span><br><span class="line">opcache.validate_timestamps=1</span><br><span class="line">opcache.revalidate_freq=30</span><br></pre></td></tr></table></figure></li><li><p>配置fpm<br><code>vim /etc/php/7.4/fpm/pool.d/www.conf</code><br>具体修改以下配置，前面存在;注释的，取消注释，值不一致的修改成一致</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">clear_env=no</span><br><span class="line">env[HOSTNAME] = $HOSTNAME</span><br><span class="line">env[PATH] = /usr/local/bin:/usr/bin:/bin</span><br><span class="line">env[TMP] = /tmp</span><br><span class="line">env[TMPDIR] = /tmp</span><br><span class="line">env[TEMP] = /tmp</span><br><span class="line">php_admin_value[memory_limit] = 512M</span><br></pre></td></tr></table></figure></li><li><p>数据库配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建root账户</span></span><br><span class="line">mysqladmin -uroot password &#x27;123456&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登陆mysql</span></span><br><span class="line">mysql -uroot -p&#x27;123456&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建数据库和用户</span></span><br><span class="line">create user &#x27;nextcloud&#x27;@&#x27;%&#x27; identified by &#x27;nextcloud&#x27;;</span><br><span class="line">grant all privileges on nextcloud.* to nextcloud@&quot;%&quot;;</span><br><span class="line">flush privileges;</span><br><span class="line">exit</span><br></pre></td></tr></table></figure></li><li><p>nginx配置<br>定位到<code>site-enabled</code>目录<code>cd /etc/nginx/sites-enabled</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改默认配置端口号，把80端口释放出来</span></span><br><span class="line">vim default</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建配置文件</span></span><br><span class="line">vim nextcloud</span><br></pre></td></tr></table></figure><p>粘贴以下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">upstream php-handler &#123;</span><br><span class="line">    server unix:/run/php/php7.4-fpm.sock;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    listen [::]:80;</span><br><span class="line">    server_name 192.168.2.15;</span><br><span class="line">    </span><br><span class="line">    root /var/www/html/nextcloud;</span><br><span class="line">    </span><br><span class="line">    location = /robots.txt &#123;</span><br><span class="line">        allow all;</span><br><span class="line">        log_not_found off;</span><br><span class="line">        access_log off;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    location = /.well-known/carddav &#123;</span><br><span class="line">    return 301 $scheme://$host:$server_port/remote.php/dav;</span><br><span class="line">    &#125;</span><br><span class="line">    location = /.well-known/caldav &#123;</span><br><span class="line">    return 301 $scheme://$host:$server_port/remote.php/dav;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    client_max_body_size 512M;</span><br><span class="line">    fastcgi_buffers 64 4K;</span><br><span class="line">    </span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_vary on;</span><br><span class="line">    gzip_comp_level 4;</span><br><span class="line">    gzip_min_length 256;</span><br><span class="line">    gzip_proxied expired no-cache no-store private no_last_modified no_etag auth;</span><br><span class="line">    gzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy;</span><br><span class="line"> </span><br><span class="line">    location / &#123;</span><br><span class="line">        rewrite ^ /index.php;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    location ~ ^\/(?:build|tests|config|lib|3rdparty|templates|data)\/ &#123;</span><br><span class="line">        deny all;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ ^\/(?:\.|autotest|occ|issue|indie|db_|console) &#123;</span><br><span class="line">        deny all;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    location ~ ^\/(?:index|remote|public|cron|core\/ajax\/update|status|ocs\/v[12]|updater\/.+|oc[ms]-provider\/.+)\.php(?:$|\/) &#123;</span><br><span class="line">        fastcgi_split_path_info ^(.+?\.php)(\/.*|)$;</span><br><span class="line">        set $path_info $fastcgi_path_info;</span><br><span class="line">        try_files $fastcgi_script_name =404;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">        fastcgi_param PATH_INFO $path_info;</span><br><span class="line">        fastcgi_param modHeadersAvailable true;</span><br><span class="line">        fastcgi_param front_controller_active true;</span><br><span class="line">        fastcgi_pass php-handler;</span><br><span class="line">        fastcgi_intercept_errors on;</span><br><span class="line">        fastcgi_request_buffering off;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    location ~ ^\/(?:updater|oc[ms]-provider)(?:$|\/) &#123;</span><br><span class="line">        try_files $uri/ =404;</span><br><span class="line">        index index.php;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location ~ \.(?:css|js|woff2?|svg|gif|map)$ &#123;</span><br><span class="line">        try_files $uri /index.php$request_uri;</span><br><span class="line">        add_header Cache-Control &quot;public, max-age=15778463&quot;;</span><br><span class="line">        add_header Referrer-Policy &quot;no-referrer&quot; always;</span><br><span class="line">        add_header X-Content-Type-Options &quot;nosniff&quot; always;</span><br><span class="line">        add_header X-Download-Options &quot;noopen&quot; always;</span><br><span class="line">        add_header X-Frame-Options &quot;SAMEORIGIN&quot; always;</span><br><span class="line">        add_header X-Permitted-Cross-Domain-Policies &quot;none&quot; always;</span><br><span class="line">        add_header X-Robots-Tag &quot;none&quot; always;</span><br><span class="line">        add_header X-XSS-Protection &quot;1; mode=block&quot; always;</span><br><span class="line">        access_log off;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ \.(?:png|html|ttf|ico|jpg|jpeg|bcmap)$ &#123;</span><br><span class="line">        try_files $uri /index.php$request_uri;</span><br><span class="line">        access_log off;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h1><p><code>systemctl restart nginx php7.4-fpm redis-server mariadb</code></p><p>浏览器输入<a href="http://192.168.2.15即可访问">http://192.168.2.15即可访问</a></p><h1 id="简单优化"><a href="#简单优化" class="headerlink" title="简单优化"></a>简单优化</h1><ul><li><p>缓存配置<br><code>vim /var/www/html/nextcloud/config/config.php</code>文件，在最后的);前添加缓存配置：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;memcache.distributed&#x27;</span> =&gt; <span class="string">&#x27;\\OC\\Memcache\\Redis&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;redis&#x27;</span> =&gt; [</span><br><span class="line">    <span class="string">&#x27;host&#x27;</span>     =&gt; <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;port&#x27;</span>     =&gt; <span class="number">6379</span>,</span><br><span class="line">],</span><br></pre></td></tr></table></figure></li><li><p>修改数据存放路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、将当前data目录复制到相应路径</span></span><br><span class="line">cp -r /var/www/html/nextcloud/data /media/sda1/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、修改文件夹权限</span></span><br><span class="line">chown -R www-data:www-data /media/sda1/data/</span><br><span class="line">chmod -R 777 /media/sda1/data</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、修改nextcloud配置文件</span></span><br><span class="line">vim /var/www/html/nextcloud/config/config.php</span><br></pre></td></tr></table></figure><p>参数值修改成如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;datadirectory&#x27;</span> =&gt; <span class="string">&#x27;/media/sda1/data&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>修改应用源<br><code>vim /var/www/html/nextcloud/config/config.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;appstoreenabled&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line"><span class="string">&#x27;appstoreurl&#x27;</span> =&gt; <span class="string">&#x27;https://www.orcy.net/ncapps/v2/&#x27;</span>,</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安装笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> debian </tag>
            
            <tag> php </tag>
            
            <tag> nginx </tag>
            
            <tag> nextcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux实用小命令</title>
      <link href="/2022/12/21/%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/13.linux%E5%AE%9E%E7%94%A8%E5%B0%8F%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/12/21/%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/13.linux%E5%AE%9E%E7%94%A8%E5%B0%8F%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="安装类命令"><a href="#安装类命令" class="headerlink" title="安装类命令"></a>安装类命令</h1><ul><li><p>删除没有用的依赖包，不会非apt-get安装的依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get autoremove</span><br></pre></td></tr></table></figure></li><li><p>删除手动安装的依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get install deborphan</span><br><span class="line">deborphan <span class="comment"># 列出来</span></span><br><span class="line">deborphan | xargs sudo apt-get purge -y <span class="comment"># 删除</span></span><br></pre></td></tr></table></figure></li><li><p>删除某个软件包的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg --purge &lt;package-name&gt;</span><br></pre></td></tr></table></figure></li><li><p>删除卸载后的遗留配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dpkg --list | grep <span class="string">&quot;^rc&quot;</span> | <span class="built_in">cut</span> -d <span class="string">&quot; &quot;</span> -f 3 <span class="comment"># 列出来</span></span><br><span class="line">dpkg --list | grep <span class="string">&quot;^rc&quot;</span> | <span class="built_in">cut</span> -d <span class="string">&quot; &quot;</span> -f 3 | xargs sudo dpkg --purge</span><br></pre></td></tr></table></figure></li></ul><h1 id="占用空间类命令"><a href="#占用空间类命令" class="headerlink" title="占用空间类命令"></a>占用空间类命令</h1><ul><li><p>当前目录下的空间占用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -h -x --max-depth=1 </span><br></pre></td></tr></table></figure></li><li><p>挂载磁盘</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看</span></span><br><span class="line"><span class="built_in">df</span> -h</span><br><span class="line">blkid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化</span></span><br><span class="line">mkfs.ext4 /dev/sda</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建挂载目录</span></span><br><span class="line"><span class="built_in">mkdir</span> /mnt/disk</span><br><span class="line"><span class="comment"># 挂载</span></span><br><span class="line">mount /dev/sda /mnt/disk</span><br><span class="line"></span><br><span class="line">vim /etc/fstab <span class="comment"># 编辑追加开机挂载</span></span><br><span class="line">/dev/sda /mnt/disk ext4 defaults 0 0</span><br></pre></td></tr></table></figure><ul><li>查看进程的线程占用<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -Lf 8629|<span class="built_in">wc</span> -l</span><br></pre></td></tr></table></figure></li></ul><h1 id="时间类命令"><a href="#时间类命令" class="headerlink" title="时间类命令"></a>时间类命令</h1><ul><li>更改时区<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timedatectl set-timezone Asia/Shanghai</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 实用配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Sub-process usrbindpkg returned an error code (1)</title>
      <link href="/2022/12/20/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/23.%E8%A7%A3%E5%86%B3Sub-process%20usrbindpkg%20returned%20an%20error%20code%20(1)/"/>
      <url>/2022/12/20/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/23.%E8%A7%A3%E5%86%B3Sub-process%20usrbindpkg%20returned%20an%20error%20code%20(1)/</url>
      
        <content type="html"><![CDATA[<p> 转载源：<a href="https://blog.csdn.net/qq_44060543/article/details/124101863">https://blog.csdn.net/qq_44060543/article/details/124101863</a></p><h1 id="问题报错"><a href="#问题报错" class="headerlink" title="问题报错"></a>问题报错</h1><p>apt-get执行安装后报以下错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get 报错 Sub-process usrbindpkg returned an error code (1)</span><br></pre></td></tr></table></figure><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /var/lib/dpkg/</span><br><span class="line">sudo mv info/ info_bak          <span class="comment"># 现将info文件夹更名</span></span><br><span class="line">sudo mkdir info                 <span class="comment"># 再新建一个新的info文件夹</span></span><br><span class="line">sudo apt-get update             <span class="comment"># 更新</span></span><br><span class="line">sudo apt-get -f install         <span class="comment"># 修复</span></span><br><span class="line">sudo mv info/* info_bak/        <span class="comment"># 执行完上一步操作后会在新的info文件夹下生成一些文件，现将这些文件全部移到info_bak文件夹下</span></span><br><span class="line">sudo rm -rf info                <span class="comment"># 把自己新建的info文件夹删掉</span></span><br><span class="line">sudo mv info_bak info           <span class="comment"># 把以前的info文件夹重新改回名</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matplotlib is currently using agg</title>
      <link href="/2022/12/01/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/22.Matplotlib%20is%20currently%20using%20agg/"/>
      <url>/2022/12/01/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/22.Matplotlib%20is%20currently%20using%20agg/</url>
      
        <content type="html"><![CDATA[<h1 id="问题报错"><a href="#问题报错" class="headerlink" title="问题报错"></a>问题报错</h1><p>pyplot存在大量绘图时报以下错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure</span><br></pre></td></tr></table></figure><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>在报出异常的py文件中导包末尾部分追加<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line">matplotlib.use(<span class="string">&#x27;TkAgg&#x27;</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SteamCMD创建下载饥荒专用服务器</title>
      <link href="/2022/11/08/%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/11.SteamCMD%E5%88%9B%E5%BB%BA%E4%B8%8B%E8%BD%BD%E9%A5%A5%E8%8D%92%E4%B8%93%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2022/11/08/%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/11.SteamCMD%E5%88%9B%E5%BB%BA%E4%B8%8B%E8%BD%BD%E9%A5%A5%E8%8D%92%E4%B8%93%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="下载SteamCMD"><a href="#下载SteamCMD" class="headerlink" title="下载SteamCMD"></a>下载SteamCMD</h1><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">官方网站：https://developer.valvesoftware.com/wiki/SteamCMD</span><br><span class="line">Windows版本下载地址：https://steamcdn-a.akamaihd.net/client/installer/steamcmd.zip </span><br></pre></td></tr></table></figure><h1 id="使用SteamCMD"><a href="#使用SteamCMD" class="headerlink" title="使用SteamCMD"></a>使用SteamCMD</h1><ul><li>1.解压得到的steamcmd.zip到任意不包含中文的目录</li><li>2.运行得到的steamcmd.exe，软件会自行安装并更新，完成后会出现 Steam&gt; 提示符即表示安装完成</li><li>3.使用login anonymous登录匿名账号</li><li>4.后面接其他需要架设服务器的教程。</li></ul><h1 id="执行如下命令"><a href="#执行如下命令" class="headerlink" title="执行如下命令"></a>执行如下命令</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">force_install_dir &lt;目标目录&gt;</span><br><span class="line">login anonymous</span><br><span class="line">app_update 343050 validate</span><br><span class="line">quit</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安装笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Steam </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监控IP变化并发送邮件到指定邮箱</title>
      <link href="/2022/10/27/%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/12.%E7%9B%91%E6%8E%A7IP%E5%8F%98%E5%8C%96%E5%B9%B6%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E5%88%B0%E6%8C%87%E5%AE%9A%E9%82%AE%E7%AE%B1/"/>
      <url>/2022/10/27/%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/12.%E7%9B%91%E6%8E%A7IP%E5%8F%98%E5%8C%96%E5%B9%B6%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E5%88%B0%E6%8C%87%E5%AE%9A%E9%82%AE%E7%AE%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="邮箱准备"><a href="#邮箱准备" class="headerlink" title="邮箱准备"></a>邮箱准备</h1><p>1.注册126邮箱</p><p>2.邮箱设置<code>POP3/SMTP服务</code></p><p>3.保存授权码</p><h1 id="python脚本"><a href="#python脚本" class="headerlink" title="python脚本"></a>python脚本</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_email</span>(<span class="params">new_ip</span>):</span><br><span class="line">    <span class="comment"># 创建 SMTP 对象</span></span><br><span class="line">    smtp = smtplib.SMTP()</span><br><span class="line">    <span class="comment"># 连接（connect）指定服务器</span></span><br><span class="line">    smtp.connect(<span class="string">&quot;smtp.126.com&quot;</span>, port=<span class="number">25</span>)</span><br><span class="line">    <span class="comment"># 登录，需要：登录邮箱和授权码</span></span><br><span class="line">    smtp.login(user=<span class="string">&quot;monitor_lzh@126.com&quot;</span>, password=<span class="string">&quot;*****保存的授权码*****&quot;</span>)</span><br><span class="line"></span><br><span class="line">    message = MIMEText(<span class="string">&#x27;P330工作站 IP变更为&#x27;</span> + new_ip, <span class="string">&#x27;plain&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    message[<span class="string">&#x27;From&#x27;</span>] = Header(<span class="string">&quot;P330 IP变更监控&quot;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    message[<span class="string">&#x27;To&#x27;</span>] = Header(<span class="string">&quot;Users&quot;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    message[<span class="string">&#x27;Subject&#x27;</span>] = Header(<span class="string">&#x27;P330工作站IP变更 &#x27;</span> + new_ip, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    smtp.sendmail(from_addr=<span class="string">&quot;monitor_lzh@126.com&quot;</span>, to_addrs=<span class="string">&quot;指定收件邮箱&quot;</span>, msg=message.as_string())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(<span class="string">&#x27;./email.txt&#x27;</span>):</span><br><span class="line">        fr = <span class="built_in">open</span>(<span class="string">&#x27;./email.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        emails = fr.readline().strip(<span class="string">&#x27;\n&#x27;</span>).split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> emails:</span><br><span class="line">            <span class="keyword">for</span> email <span class="keyword">in</span> emails:</span><br><span class="line">                <span class="keyword">if</span> email.strip() != <span class="string">&#x27;&#x27;</span> <span class="keyword">and</span> email.strip() != <span class="string">&#x27;\n&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;@&#x27;</span> <span class="keyword">in</span> email:</span><br><span class="line">                    smtp.sendmail(from_addr=<span class="string">&quot;monitor_lzh@126.com&quot;</span>, to_addrs=email, msg=message.as_string())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    log_path = <span class="string">&#x27;./ip_log.log&#x27;</span></span><br><span class="line">    fa = <span class="built_in">open</span>(log_path, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    cur_ip = socket.gethostbyname(socket.gethostname())</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(log_path) <span class="keyword">and</span> fa.read().strip() == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        fa.write(cur_ip + <span class="string">&#x27;##&#x27;</span>)</span><br><span class="line">        send_email(cur_ip)</span><br><span class="line">        fa.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(log_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fr:</span><br><span class="line">        old_ip = fr.read().strip(<span class="string">&#x27;##&#x27;</span>).split(<span class="string">&#x27;##&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> old_ip != cur_ip <span class="keyword">or</span> old_ip <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># print(&#x27;old:&#x27;, old_ip)</span></span><br><span class="line">            fa.write(cur_ip + <span class="string">&#x27;##&#x27;</span>)</span><br><span class="line">            send_email(cur_ip)</span><br><span class="line"></span><br><span class="line">    fa.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>注：在该同目录新建一个<code>email.txt</code>可以给多个邮箱发送邮件，一行一个邮箱地址，不留空格</p><h1 id="打包成exe程序"><a href="#打包成exe程序" class="headerlink" title="打包成exe程序"></a>打包成exe程序</h1><p>安装pyinstaller模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyinstaller</span><br></pre></td></tr></table></figure><p>在相应py脚本目录下打开命令行执行<code>pyinstaller -F ./get_ip.py</code></p><p>对应的exe文件在dist文件夹中</p><h1 id="配置任务计划"><a href="#配置任务计划" class="headerlink" title="配置任务计划"></a>配置任务计划</h1><p><code>win+r</code> 输入 <code>taskschd.msc</code> 打开任务计划窗口，根据需要创建基本任务，指定到exe程序，关键点部分我已截图标注</p><p><img src="https://blog.oss.langzihan.top/images/%E7%9B%91%E6%8E%A7IP%E5%8F%98%E5%8C%96%E5%B9%B6%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E5%88%B0%E6%8C%87%E5%AE%9A%E9%82%AE%E7%AE%B1/af317fa99b84627b2bb55ba86c291274.png" alt="image-20221027125216947"></p><p><img src="https://blog.oss.langzihan.top/images/%E7%9B%91%E6%8E%A7IP%E5%8F%98%E5%8C%96%E5%B9%B6%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E5%88%B0%E6%8C%87%E5%AE%9A%E9%82%AE%E7%AE%B1/4bd310524e7b8ddf7f04f93095663142.png" alt="image-20221027125639960"></p><p>设定程序每5分钟执行一次即可，5分钟的间隔设置可以在创建完任务后选中该任务，打开<code>属性→触发器</code>进行设置</p><p><img src="https://blog.oss.langzihan.top/images/%E7%9B%91%E6%8E%A7IP%E5%8F%98%E5%8C%96%E5%B9%B6%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E5%88%B0%E6%8C%87%E5%AE%9A%E9%82%AE%E7%AE%B1/a23181ea9ac5c43c497298ee23b9f24a.png" alt="image-20221027125841242"></p><p><img src="https://blog.oss.langzihan.top/images/%E7%9B%91%E6%8E%A7IP%E5%8F%98%E5%8C%96%E5%B9%B6%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E5%88%B0%E6%8C%87%E5%AE%9A%E9%82%AE%E7%AE%B1/c33b6c11d9d72bc2d0408d153dba1ab3.png" alt="image-20221027125442315"></p><p><img src="https://blog.oss.langzihan.top/images/%E7%9B%91%E6%8E%A7IP%E5%8F%98%E5%8C%96%E5%B9%B6%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E5%88%B0%E6%8C%87%E5%AE%9A%E9%82%AE%E7%AE%B1/5fe3ec03ab716042555d800d5a7c0574.png" alt="image-20221027125507878"></p><p><img src="https://blog.oss.langzihan.top/images/%E7%9B%91%E6%8E%A7IP%E5%8F%98%E5%8C%96%E5%B9%B6%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E5%88%B0%E6%8C%87%E5%AE%9A%E9%82%AE%E7%AE%B1/51f942c768bdfb7212c3e5a886a04c7b.png" alt="image-20221027130135192"></p><p>然后可以右键指定任务点击<code>运行</code>跑一次看看</p>]]></content>
      
      
      <categories>
          
          <category> 实用配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IP监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>conda配置文档</title>
      <link href="/2022/10/19/%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/11.conda%E9%85%8D%E7%BD%AE%E6%96%87%E6%A1%A3/"/>
      <url>/2022/10/19/%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/11.conda%E9%85%8D%E7%BD%AE%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<p><code>.condarc</code>文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">channels:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</span></span><br><span class="line"><span class="attr">ssl_verify:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">show_channel_urls:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">default_channels:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span></span><br><span class="line"><span class="attr">custom_channels:</span></span><br><span class="line">  <span class="attr">conda-forge:</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span></span><br><span class="line">  <span class="attr">msys2:</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span></span><br><span class="line">  <span class="attr">bioconda:</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span></span><br><span class="line">  <span class="attr">menpo:</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span></span><br><span class="line">  <span class="attr">pytorch:</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span></span><br><span class="line">  <span class="attr">pytorch-lts:</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span></span><br><span class="line">  <span class="attr">simpleitk:</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span></span><br><span class="line"><span class="attr">envs_dirs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">C:\Users\xuxingchen\.conda\envs</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 实用配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> conda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>anaconda安装虚拟环境后pip异常</title>
      <link href="/2022/10/19/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/21.anaconda%E5%AE%89%E8%A3%85%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%90%8Epip%E5%BC%82%E5%B8%B8/"/>
      <url>/2022/10/19/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/21.anaconda%E5%AE%89%E8%A3%85%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%90%8Epip%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="问题前置"><a href="#问题前置" class="headerlink" title="问题前置"></a>问题前置</h1><p>anaconda安装虚拟环境，删了又装，装了又删几次往复，然后导致pip异常，报以下错误：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;C:\Users\xuxingchen\.conda\envs\cv\Scripts\pip-script.py&quot;, line 6, in &lt;module&gt;</span><br><span class="line">    from pip._internal.cli.main import main</span><br><span class="line">  File &quot;C:\Users\xuxingchen\.conda\envs\cv\lib\site-packages\pip\__init__.py&quot;, line 1, in &lt;module&gt; </span><br><span class="line">    from pip._internal.utils.typing import MYPY_CHECK_RUNNING</span><br><span class="line">ModuleNotFoundError: No module named &#x27;pip._internal&#x27;</span><br></pre></td></tr></table></figure><br>并且执行<code>python -m ensurepip</code>查看后发现pip版本为9.x，所以直接判定pip存在版本冲突所以异常了</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>1.删除出现问题的虚拟环境下中的<code>\envs\cv\Lib\site-packages\pip</code>文件夹<br>2.将正常环境下的<code>\envs\cv\Lib\site-packages\pip</code>文件夹拷贝一份放进去<br>同理还要对其他冲突的模块也操作一番</p><p>收工，最后遇到这种问题最简单的方式是换个虚拟环境名重新建一个~~</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>paddlepaddle-gpu安装</title>
      <link href="/2022/10/19/%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/10.paddlepaddle-gpu%E5%AE%89%E8%A3%85/"/>
      <url>/2022/10/19/%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/10.paddlepaddle-gpu%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p><strong>安装环境</strong>：CUDA 11.6 + cuNN 8.4.0 + python 3.6.13<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install paddlepaddle-gpu==2.3.2.post116 -f https://www.paddlepaddle.org.cn/whl/windows/mkl/avx/stable.html</span><br></pre></td></tr></table></figure></p><p>还有部分需手动安装的依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install imageio==2.3.0</span><br><span class="line">pip install matplotlib</span><br><span class="line">pip install scipy==1.0.1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安装笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> paddle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>conda创建虚拟环境并在jupyter中使用</title>
      <link href="/2022/10/19/%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/09.conda%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%B9%B6%E5%9C%A8jupyter%E4%B8%AD%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/10/19/%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/09.conda%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%B9%B6%E5%9C%A8jupyter%E4%B8%AD%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-conda下创建新虚拟环境"><a href="#1-conda下创建新虚拟环境" class="headerlink" title="1. conda下创建新虚拟环境"></a>1. conda下创建新虚拟环境</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --prefix=C:\Users\xuxingchen\.conda\envs\cv python=3.6</span><br></pre></td></tr></table></figure><h2 id="2-查看安装情况"><a href="#2-查看安装情况" class="headerlink" title="2. 查看安装情况"></a>2. 查看安装情况</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env list</span><br></pre></td></tr></table></figure><h2 id="3-虚拟环境下安装jupyter依赖"><a href="#3-虚拟环境下安装jupyter依赖" class="headerlink" title="3. 虚拟环境下安装jupyter依赖"></a>3. 虚拟环境下安装jupyter依赖</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conda install nb_conda_kernels</span><br><span class="line"></span><br><span class="line">activate cv</span><br><span class="line">pip install ipykernel</span><br></pre></td></tr></table></figure><h2 id="4-将虚拟环境信息注入到jupyter配置中"><a href="#4-将虚拟环境信息注入到jupyter配置中" class="headerlink" title="4. 将虚拟环境信息注入到jupyter配置中"></a>4. 将虚拟环境信息注入到jupyter配置中</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">activate cv</span><br><span class="line">python -m ipykernel install --name cv  # 若是服务器需加上 --user 避免权限问题注入失败</span><br></pre></td></tr></table></figure><h2 id="5-测试效果"><a href="#5-测试效果" class="headerlink" title="5. 测试效果"></a>5. 测试效果</h2><p>在jupyter中调用相应环境<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys </span><br><span class="line">sys.executable</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 安装笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jupyter </tag>
            
            <tag> conda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytorch-gpu安装</title>
      <link href="/2022/10/19/%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/08.CUDA%E4%B8%8B%E7%9A%84pytorch%E5%AE%89%E8%A3%85/"/>
      <url>/2022/10/19/%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/08.CUDA%E4%B8%8B%E7%9A%84pytorch%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p><code>nvcc -V</code>查看cuda版本</p><p>CUDA 11.2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install pytorch==1.8.0 torchvision==0.9.0 torchaudio==0.8.0 cudatoolkit=11.2 -c pytorch -c conda-forge</span><br></pre></td></tr></table></figure><p>CUDA 11.6</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cu116</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">torch.cuda.is_available()       <span class="comment"># cuda是否可用</span></span><br><span class="line">torch.cuda.current_device()     <span class="comment"># 返回当前设备索引</span></span><br><span class="line">torch.cuda.device_count()       <span class="comment"># 返回GPU的数量</span></span><br><span class="line">torch.cuda.get_device_name(<span class="number">0</span>)   <span class="comment"># 返回gpu名字，设备索引默认从0开始</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安装笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HexoSEOAutoPush安装使用</title>
      <link href="/2022/10/18/%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/10.HexoSEOAutoPush%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/10/18/%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/10.HexoSEOAutoPush%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>github项目地址 <a href="https://github.com/Lete114/Hexo-SEO-AutoPush">https://github.com/Lete114/Hexo-SEO-AutoPush</a></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>每天中午 12 点推送一次网站信息到 Baidu 和 Bing，提高爬虫抓取几率</p><p>可手动点击<code>star</code>触发 Actions</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-seo-autopush --save</span><br></pre></td></tr></table></figure><ol><li>配置文件<br>在 hexo 的 _config.yml 配置文件中添加以下内容</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># enable: 开启/关闭 推送</span></span><br><span class="line"><span class="comment"># cron: 执行时间周期</span></span><br><span class="line"><span class="comment"># count: 每次提交最新的10篇文章，输入0或者不填写则默认为所有文章(建议是最新的10篇文章)</span></span><br><span class="line"><span class="comment"># date: 更新时间(updated)|创建日期(created)</span></span><br><span class="line"><span class="comment"># https://github.com/Lete114/hexo-seo-autopush.git</span></span><br><span class="line"><span class="attr">hexo_seo_autopush:</span></span><br><span class="line">  <span class="attr">cron:</span> <span class="number">0</span> <span class="number">4</span> <span class="string">*</span> <span class="string">*</span> <span class="string">*</span></span><br><span class="line">  <span class="attr">baidu:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">date:</span> <span class="string">created</span></span><br><span class="line">    <span class="attr">count:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">bing:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">date:</span> <span class="string">created</span></span><br><span class="line">    <span class="attr">count:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">google:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">date:</span> <span class="string">created</span></span><br><span class="line">    <span class="attr">count:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><p>由于生成的 actions 是在<code>.github/workflows/HexoSeoAutoPush.yml</code>，点开头的文件或文件夹都会被视为隐藏文件，所以 hexo 不会将隐藏文件部署到 pages，需要新增配置<code>ignore_hidden</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/&lt;username&gt;/&lt;project&gt;</span></span><br><span class="line">  <span class="comment"># example, https://github.com/hexojs/hexojs.github.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">gh-pages</span></span><br><span class="line">  <span class="attr">ignore_hidden:</span> <span class="literal">false</span> <span class="comment"># 忽略隐藏文件及文件夹(目录)</span></span><br></pre></td></tr></table></figure><ol><li>安全设置<br>打开你博客仓库地址如下图<br><img src="https://blog.oss.langzihan.top/images/10.HexoSEOAutoPush%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/a3b2df23ae7fd57fb33ae19e2d2b0f11.png" alt="Secrets"></li></ol><div class="table-container"><table><thead><tr><th>Name</th><th>Value</th><th>说明</th></tr></thead><tbody><tr><td>baidu_token</td><td>UlxxxxxxxxxxxxxB9</td><td>【必填】Value 输入百度的 token</td></tr><tr><td>bing_apikey</td><td>47xxxxxxxxxxxxx91</td><td>【必填】Value 输入必应的 apikey</td></tr><tr><td>google_private_key</td><td>xxxxxxxxxxxxxxxxx</td><td>【必填】Value 输入谷歌的 private_key （注意：填写的时候需要使用<strong>双引号</strong>包起来，如: <code>&quot;private_key&quot;</code>）</td></tr><tr><td>google_client_email</td><td>xxxxxxxxxxxxxxxxx</td><td>【必填】Value 输入谷歌的 client_email</td></tr></tbody></table></div><h2 id="Baidu-key"><a href="#Baidu-key" class="headerlink" title="Baidu key"></a>Baidu key</h2><p>打开百度站长平台，点击左侧的普通收录<a href="https://ziyuan.baidu.com">https://ziyuan.baidu.com</a><br><img src="https://blog.oss.langzihan.top/images/10.HexoSEOAutoPush%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/072521c946337fcc60740de58916bddc.png" alt="baidu"></p><h2 id="Bing-key"><a href="#Bing-key" class="headerlink" title="Bing key"></a>Bing key</h2><ol><li>打开 Bing 站长平台 <a href="https://www.bing.com/webmasters/home">https://www.bing.com/webmasters/home</a></li><li>点击右上角头像 旁边的齿轮，跟着下图操作<br><img src="https://blog.oss.langzihan.top/images/10.HexoSEOAutoPush%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/2ba714004aa4afba22aa625770b9c480.png" alt="bing"></li></ol><h2 id="Google-key"><a href="#Google-key" class="headerlink" title="Google key"></a>Google key</h2><h3 id="1-开启Indexing-API"><a href="#1-开启Indexing-API" class="headerlink" title="(1) 开启Indexing API"></a>(1) 开启Indexing API</h3><p>打开<a href="https://console.developers.google.com/flows/enableapi?apiid=indexing.googleapis.com&amp;credential=client_key">Google indexing API</a></p><p><img src="https://blog.oss.langzihan.top/images/10.HexoSEOAutoPush%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/879f20312ceb99115fcfde4fb6d8eebf.jpg" alt=""></p><p>如果账号中没有项目, 点击<code>创建项目</code>, 创建完项目后继续下面的操作.</p><p>点击<code>下一步</code>, <code>开启</code>即可.</p><p><img src="https://blog.oss.langzihan.top/images/10.HexoSEOAutoPush%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/b89b658741e6a4aefaa4f4408f97b42e.jpg" alt=""></p><p>开启完成就是这样, 感觉像是卡住了.</p><p><img src="https://blog.oss.langzihan.top/images/10.HexoSEOAutoPush%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/7afa9226629048ed8764377c4998b649.jpg" alt=""></p><h3 id="2-打开凭证页面"><a href="#2-打开凭证页面" class="headerlink" title="(2) 打开凭证页面"></a>(2) 打开凭证页面</h3><p><img src="https://blog.oss.langzihan.top/images/10.HexoSEOAutoPush%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/4a4be281504dcff3b356b5b9a379fd48.jpg" alt=""></p><h3 id="3-创建服务账号"><a href="#3-创建服务账号" class="headerlink" title="(3) 创建服务账号"></a>(3) 创建服务账号</h3><p>点击<code>创建凭证</code>, 点击<code>服务账号</code>.</p><p><img src="https://blog.oss.langzihan.top/images/10.HexoSEOAutoPush%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/889add672893e54a7f58dad792b07c6e.jpg" alt=""></p><p><code>输入</code>服务账号名称, 然后直接点击<code>完成</code>, </p><p><img src="https://blog.oss.langzihan.top/images/10.HexoSEOAutoPush%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/8957a845178d3be0a92ea0c2e1dc3f79.jpg" alt=""></p><h3 id="4-创建凭证"><a href="#4-创建凭证" class="headerlink" title="(4) 创建凭证"></a>(4) 创建凭证</h3><p>点击刚刚创建的服务账号</p><p><img src="https://blog.oss.langzihan.top/images/10.HexoSEOAutoPush%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/c608908fc4a641f4fe593da39aa6c2a3.jpg" alt=""></p><p>点击<code>密钥</code>标签, 点击<code>添加密钥</code>, 点击<code>创建新密钥</code>.</p><p><img src="https://blog.oss.langzihan.top/images/10.HexoSEOAutoPush%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/3cfb66b6b39ab56795b8d0a25805a102.jpg" alt=""></p><p>选择JSON格式, 点击<code>创建</code>, 然后JSON格式的密钥就会自动下载到电脑中.</p><p><img src="https://blog.oss.langzihan.top/images/10.HexoSEOAutoPush%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/6e772e4d1db0d55ceff706386d6ca454.jpg" alt=""></p><p>json文件内的内容, </p><blockquote><p>以下信息已经过修改，并且已删除相关的申请，仅用于参考</p><p>其中<code>private_key</code>和<code>client_email</code>是该项目需要的, </p><p>注意在GitHub中的Secrets名为, <code>google_private_key</code>和<code>google_client_email</code></p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;service_account&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;project_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;elated-guild-298003&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private_key_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cf58d669c0e8c8e082b2c403ade5e2548078e384&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private_key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDEAJw89yeylRrA\nB+bzOAfQQNgOCABIwEKCy5mMxWSaiXy2RktyCJWjMR2Pgz770NJgClQHPJjsFn0c\nukHufpnuiX3VPlimLANPCRFdU/qp+yiaw4quIhYF1UZJkhmhL30anghUcvi+r9hQ\nw+RwcKrgA4EUzqUJaPdvjtzSoo315PPGfR91ASD5S8gE02yVI8igtYMX7v2x1JYR\n7PwHJwOVemiM9lot8ilvoUbV4BU0vSlwFoxKMJAbEXTmJjEKQi9992rcMW0GzXO8\ncHldUUtURXkt3VFjYTH27KhHiTkTXw+uZRBu1rkubDJkS8lGIWN7Fc/r4HMMCVTu\nXPS6HbJ/AgMBAAECggEANSS7OBaFd3jRL3cVCiZLjA5A5pEJzq/+eKtOn2oYDISx\nwVRO+YTVWdGj47kg1zM4D11NikbGaeDxHFxuKwW9o/04lpyYebneTcw2Hpl6EiOs\nz0WssOlCEmPQ8nrAI0GWiKSHuqoPwtg37TIoGsqZsjKRCby759DDokZYnm3/0sc+\niEllT0ZyBZhGDzyguVLEdCIR2P02q/hQzLyd6ejWGGwZebImbGoILhmuOjVrco0p\nV0JbrrNskjM5Epe7w+CpGftEASJ7Dxa8oj0qIT6cyAipra2AZAGnG9jrLcWpJuhu\nvNeDIFnTfpNEac+khXZZE2++MIQfTX9wGJc8tox2vQKBgQD6yiNvAL7sxExiy6ER\ntLtFQ3bvmMpKRFGvFOyPOtMbmjZ3D1GEtNNKGH4v1TI+tncEy7Q5Dm7nWwpi8yvL\nbh8xKghelAc/CU1nw0xDEDCkMbAwpFg5A5ZDImy3LZsQh0kNXniIMy1vMSt5yLKS\n80gXQKGCxG8t3rP8Qd/2a55g1QKBgQDIExP1nG9sHJaigmitEUwr0Ow6Shqr56Me\nd7995gaV1oLWWCQzrXt/viWkb1W5ZGIxzcWNWz99m4CbvqfewRr598Eenald0csN\nVcIEk+0C+6KqA+jU9Tfs2zow/C7JuKULP2N++o0EoSz/ngokP7f1yLOYbr507v/R\n0cLElQBQAwKBgAbxDWYHKUG4dTzO0hiBXiWepm4fVooTtgcYlyunvywmapeFDwaT\nUr3cS7HbPtbJiiXR1Z02rw8sT+9JN88brzVXKoAjrMer5D6ZA0Vf71i8H1pZUi/R\nz5jwHP48/uvIMtdx4/gxInLPc5qdWYQDw90Q5ueNtF4aqfSzhhV2CR45AoGBAJN9\nPOF6iMjx6jmyWOf8MGK8iOgPaMoA4Ea9j/SHdaNPlvPb1hQid0AcNDObv14Dmj+M\nqW0jLxKxZ4VobufPAsvyz/J51zjKRx11cqldQwNH7QnYB/O1MZzxn1wtC3C5JTG9\ncONSYFJhXoKxRliigEI3ye089jnNVdifAS1ZiflxAoGBANTX1fEMEeNuYU0v3rtd\n5CkPZg4TNZ+y2MGl5xR1LdIgrJ8c9xKoW4rpp7SsOIvHpWX494f90D7o9uFEGSQ4\nyQK53jVzJ0ekGV5BdPF3n3/2j2VEqFLHi7LL4CJSxr6ci7OfBoHOGE8odhevQCCK\njnFzEin0QsBEgIC73fBh6XcH\n-----END PRIVATE KEY-----\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;client_email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;googleindexing@elated-guild-298003.iam.gserviceaccount.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;client_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;103034240916368863393&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;auth_uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://accounts.google.com/o/oauth2/auth&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;token_uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://oauth2.googleapis.com/token&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;auth_provider_x509_cert_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://www.googleapis.com/oauth2/v1/certs&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;client_x509_cert_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://www.googleapis.com/robot/v1/metadata/x509/googleindexing%40elated-guild-298003.iam.gserviceaccount.com&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="5-为服务账号授权"><a href="#5-为服务账号授权" class="headerlink" title="(5) 为服务账号授权"></a>(5) 为服务账号授权</h3><p>打开<a href="https://search.google.com/search-console">谷歌站长</a>, <code>选择</code>需要设置的网站, 点击<code>设置</code>, 点击<code>用户和权限</code>, 点击<code>添加用户</code>.</p><p>电子邮箱地址: json文件中的client_email字段</p><p>权限: 选择<code>拥有者</code>, 选择<code>完整</code>GitHub执行时会报权限错误.</p><p><img src="https://blog.oss.langzihan.top/images/10.HexoSEOAutoPush%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/200a01c6a03cd18f789c47d5b4e7ca07.jpg" alt=""></p><h3 id="6-GitHub填入secrets"><a href="#6-GitHub填入secrets" class="headerlink" title="(6) GitHub填入secrets"></a>(6) GitHub填入secrets</h3><p>google_private_key: json文件中的private_key字段, 填入时要带双引号<br>google_client_email: json文件中的client_email字段, 填入时不带双引号</p><p><img src="https://blog.oss.langzihan.top/images/10.HexoSEOAutoPush%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/57da44e728f0dd5a803b29a640a49f8b.jpg" alt=""></p><h3 id="7-官网说明"><a href="#7-官网说明" class="headerlink" title="(7) 官网说明"></a>(7) 官网说明</h3><p>由于谷歌常更新页面, 所以如果以上操作出现问题, 可参考官方教程, 不过官方教程也不是完成100%跟页面同步的.</p><p><a href="https://developers.google.com/search/apis/indexing-api/v3/prereqs?hl=zh_CN">使用 Indexing API 的前提条件  |  Google Developers</a></p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>取消Star, 再点击Star, 触发自动提交.</p><h3 id="GitHub-Action结果"><a href="#GitHub-Action结果" class="headerlink" title="GitHub Action结果"></a>GitHub Action结果</h3><p>点击Actions, 查看执行情况.</p><p>如果返回更新内容, 就说明成功了.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 百度的</span><br><span class="line">&#123;&quot;remain&quot;:2990,&quot;success&quot;:10&#125;</span><br><span class="line"># 必应的</span><br><span class="line">&#123;&quot;d&quot;:null&#125;</span><br><span class="line"># 谷歌的</span><br><span class="line">Google response: &#123;...&#125;</span><br></pre></td></tr></table></figure><p><img src="https://blog.oss.langzihan.top/images/10.HexoSEOAutoPush%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/c39a74e2d4513ae2f7b9c43fae506c75.jpg" alt=""></p><h3 id="百度页面结果"><a href="#百度页面结果" class="headerlink" title="百度页面结果"></a>百度页面结果</h3><p>打开<a href="https://ziyuan.baidu.com/linksubmit/">百度站长</a>, 选择对应站点, 选择普通收录中的数据反馈.</p><p>看到当日API提交有值, 说明成功了. 但是这个页面好像有延迟, 不是GitHub Action那么指定完这个页面就能刷出来结果.</p><p><img src="https://blog.oss.langzihan.top/images/10.HexoSEOAutoPush%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/47eb1b4826b8e453cf93074ead1af973.jpg" alt=""></p><h3 id="必应页面结果"><a href="#必应页面结果" class="headerlink" title="必应页面结果"></a>必应页面结果</h3><p>打开<a href="https://www.bing.com/webmasters/">Home - Bing Webmaster Tools</a>, <code>URL提交</code>标签</p><p>有提交信息说明成功了.</p><p><img src="https://blog.oss.langzihan.top/images/10.HexoSEOAutoPush%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/9a96fd4eb8ccb71246c2074b544d6e83.jpg" alt=""></p><h3 id="谷歌页面结果"><a href="#谷歌页面结果" class="headerlink" title="谷歌页面结果"></a>谷歌页面结果</h3><p>在<a href="https://console.cloud.google.com/apis/dashboard">Google Cloud Platform</a> 中查看. </p><p>错误率只要不是100%, 就说明成功了.</p><p><img src="https://blog.oss.langzihan.top/images/10.HexoSEOAutoPush%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/b071f7bde3c69d4f46a10ca882c39932.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 实用配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git和npm代理设置</title>
      <link href="/2022/10/14/%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/09.git%E5%92%8Cnpm%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/"/>
      <url>/2022/10/14/%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/09.git%E5%92%8Cnpm%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="git设置代理"><a href="#git设置代理" class="headerlink" title="git设置代理"></a>git设置代理</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy &#x27;socks5://127.0.0.1:7890&#x27;</span><br><span class="line">git config --global https.proxy &#x27;socks5://127.0.0.1:7890&#x27;</span><br></pre></td></tr></table></figure><p>查看配置效果 <code>git config --global --list</code></p><h1 id="npm设置代理"><a href="#npm设置代理" class="headerlink" title="npm设置代理"></a>npm设置代理</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set proxy socks5://127.0.0.1:7890</span><br><span class="line">npm config set https-proxy socks5://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>查看配置效果打开文件<code>C:\Users\xxxx\.npmrc</code></p>]]></content>
      
      
      <categories>
          
          <category> 实用配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows添加右键打开cmd命令窗口</title>
      <link href="/2022/10/14/%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/08.windows%E6%B7%BB%E5%8A%A0%E5%8F%B3%E9%94%AE%E6%89%93%E5%BC%80cmd%E5%91%BD%E4%BB%A4%E7%AA%97%E5%8F%A3/"/>
      <url>/2022/10/14/%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/08.windows%E6%B7%BB%E5%8A%A0%E5%8F%B3%E9%94%AE%E6%89%93%E5%BC%80cmd%E5%91%BD%E4%BB%A4%E7%AA%97%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<p><strong>目标</strong><br>在新安装的windows系统中添加文件夹空白处“在此处打开命令窗口”的功能，如下图</p><p><img src="https://blog.oss.langzihan.top/images/windows%E6%B7%BB%E5%8A%A0%E5%8F%B3%E9%94%AE%E6%89%93%E5%BC%80cmd%E5%91%BD%E4%BB%A4%E7%AA%97%E5%8F%A3/bdfa7771fba8a19c3d3c813e220d3842.jpg" alt=""></p><p>具体步骤如下：</p><ol><li><p><code>win+r</code>输入<code>regedit</code>打开注册表</p></li><li><p>打开到<code>计算机\HKEY_CLASSES_ROOT\Directory\Background\shell</code></p></li><li><p>右键<code>新建-&gt;项</code>，如果需要管理员模式的命令行就新建俩，分别命名为<code>OpenCMD</code>与<code>ShieldCMD</code>按个人喜好命名即可</p></li><li><p><code>OpenCMD</code>用于<code>在此处打开命令窗口</code>，<code>ShieldCMD</code>用于“以管理员身份打开命令窗口”，分别在<code>OpenCMD</code>、<code>ShieldCMD</code>下再新建一个名为<code>command</code>的项</p></li><li><p>选中<code>OpenCMD</code>修改默认数值数据为“在此打开命令行”，选中<code>ShieldCMD</code>修改默认数据为“以管理员身份打开命令窗口”</p><p><img src="https://blog.oss.langzihan.top/images/windows%E6%B7%BB%E5%8A%A0%E5%8F%B3%E9%94%AE%E6%89%93%E5%BC%80cmd%E5%91%BD%E4%BB%A4%E7%AA%97%E5%8F%A3/00bf5c2c5c79bdddebb3da7b9d96fbe1.png" alt="image-20221017094042296"></p></li><li><p>右键<code>OpenCMD</code>新建一个<code>字符串值</code>，名称为<code>Icon</code>，数值数据为<code>cmd.exe</code>，右键<code>ShieldCMD</code>新建一个<code>字符串值</code>，名称为<code>HasLUAShield</code>，数值数据不填</p></li><li>分别修改二者下级的<code>command</code>中的默认数值数据为<code>cmd.exe /s /k pushd &quot;%V&quot;</code></li></ol><p><img src="https://blog.oss.langzihan.top/images/windows%E6%B7%BB%E5%8A%A0%E5%8F%B3%E9%94%AE%E6%89%93%E5%BC%80cmd%E5%91%BD%E4%BB%A4%E7%AA%97%E5%8F%A3/b1235ccf4bee55be8bc47f920f2daeef.png" alt="image-20221017094556600"></p>]]></content>
      
      
      <categories>
          
          <category> 实用配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注册表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hugging face 模型微调 - 命名实体识别</title>
      <link href="/2022/09/29/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/01.Hugging%20face%20%E6%A8%A1%E5%9E%8B%E5%BE%AE%E8%B0%83%20-%20%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%AB/"/>
      <url>/2022/09/29/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/01.Hugging%20face%20%E6%A8%A1%E5%9E%8B%E5%BE%AE%E8%B0%83%20-%20%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="任务目标"><a href="#任务目标" class="headerlink" title="任务目标"></a>任务目标</h1><p>1、投入目标任务的文本数据集重新训练哈工大已完成MLM任务预训练的roberta模型</p><p>2、使其能够完成下游文本的命名实体识别（专业领域的实体如：面积、金额、户型等）</p><h1 id="载入模型"><a href="#载入模型" class="headerlink" title="载入模型"></a>载入模型</h1><p><a href="https://huggingface.co/hfl/chinese-roberta-wwm-ext/tree/main">模型下载地址</a>，只需下载模型相关文件即可，config.json、pytorch_model.bin、vocab.txt<br>最后一层的num_labels为实体标记的总类数，每一类实体都有两种标记，一种代表实体开始，一种代表实体结束，在本文设计中实体结束的标记为实体开始的的序列+1的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> AutoTokenizer</span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span>  AutoModelForTokenClassification</span><br><span class="line"></span><br><span class="line">model_path = <span class="string">&#x27;D:/Models/chinese-roberta-wwm-ext&#x27;</span></span><br><span class="line">tokenizer = AutoTokenizer.from_pretrained(model_path)</span><br><span class="line">model = AutoModelForTokenClassification.from_pretrained(model_path, num_labels=<span class="number">11</span>)</span><br></pre></td></tr></table></figure><h1 id="构建训练数据"><a href="#构建训练数据" class="headerlink" title="构建训练数据"></a>构建训练数据</h1><p>本文训练数据参照<a href="https://github.com/hltcoe/golden-horse">数据集下载地址</a>的结构进行构造，内部数据结构如下，具体信息可见下载链接中readme文件描述</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">现O</span><br><span class="line">在O</span><br><span class="line">住O</span><br><span class="line">欧B-COMM.NAME</span><br><span class="line">洲I-COMM.NAME</span><br><span class="line">花I-COMM.NAME</span><br><span class="line">园I-COMM.NAME</span><br><span class="line">1B-VALUE.AREA</span><br><span class="line">6I-VALUE.AREA</span><br><span class="line">0I-VALUE.AREA</span><br><span class="line">左O</span><br><span class="line">右O</span><br><span class="line">房O</span><br><span class="line">子O</span><br><span class="line">也O</span><br><span class="line">重O</span><br><span class="line">新O</span><br><span class="line">装O</span><br><span class="line">修O</span><br><span class="line">了O</span><br></pre></td></tr></table></figure><p>其中<code>labeldic</code>存放的就是实体的开始标记，例如<code>VALUE.AREA</code>的开始标记（<code>B-VALUE.AREA</code>）为1，则结束标记以及中间标记（<code>I-VALUE.AREA</code>）为2<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">labeldic = &#123;</span><br><span class="line">    <span class="string">&quot;VALUE.AREA&quot;</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;VALUE.PRICE&quot;</span>:<span class="number">3</span>,</span><br><span class="line">    <span class="string">&quot;VALUE.SCALE&quot;</span>:<span class="number">5</span>,</span><br><span class="line">    <span class="string">&quot;TYPE.HOUSE&quot;</span>:<span class="number">7</span>,</span><br><span class="line">    <span class="string">&quot;COMM.NAME&quot;</span>:<span class="number">9</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_train_data</span>(<span class="params">file_path, col_num</span>):</span><br><span class="line">    max_lenth = <span class="number">100</span></span><br><span class="line">    data = []</span><br><span class="line">    label = []</span><br><span class="line">    num = <span class="number">1</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        mask = [<span class="number">0</span>] * max_lenth</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">            <span class="keyword">if</span> num &gt; col_num:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> line == <span class="string">&#x27;\n&#x27;</span>:</span><br><span class="line">                num += <span class="number">1</span></span><br><span class="line">                data.append(content.replace(<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">                content = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                label.append(mask)</span><br><span class="line">                mask = [<span class="number">0</span>] * max_lenth</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            items = line.replace(<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;&#x27;</span>).split(<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(content) &lt; max_lenth:</span><br><span class="line">                content += items[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> items[<span class="number">1</span>] != <span class="string">&#x27;O&#x27;</span>:</span><br><span class="line">                <span class="comment"># entity_type = re.search(&quot;\-([A-Z]*\.)&quot;,items[1]).group()[1:-1]</span></span><br><span class="line">                entity_type = items[<span class="number">1</span>].split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> entity_type <span class="keyword">in</span> labeldic.keys():</span><br><span class="line">                    <span class="keyword">if</span> items[<span class="number">1</span>][<span class="number">0</span>] == <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">                        mask[<span class="built_in">len</span>(content)-<span class="number">1</span>] = labeldic[entity_type]</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        mask[<span class="built_in">len</span>(content)-<span class="number">1</span>] = labeldic[entity_type]+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> data,label            </span><br><span class="line">            </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">padding_label</span>(<span class="params">label, maxlen = <span class="number">100</span></span>):</span><br><span class="line">    label.insert(<span class="number">0</span>,<span class="number">0</span>)  <span class="comment"># CLS对应位置补0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(label) &gt; maxlen:</span><br><span class="line">        <span class="keyword">return</span> label[:maxlen]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        label += [<span class="number">0</span>] * (maxlen -<span class="built_in">len</span>(label))</span><br><span class="line">        <span class="keyword">return</span> label</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">data = get_train_data(<span class="string">&quot;./file/beizhu_ner_train.txt&quot;</span>, <span class="number">1000</span>)     </span><br></pre></td></tr></table></figure><br>完成预处理的data变量中的训练样本数据格式如下：<br><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">([[&#x27;现在住欧洲花园160左右房子也重新装修了&#x27;],[&#x27;&#x27;],...], </span><br><span class="line">[[0, 0, 0, 9, 10, 10, 10, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],...])</span><br></pre></td></tr></table></figure></p><h1 id="定义优化器和学习率"><a href="#定义优化器和学习率" class="headerlink" title="定义优化器和学习率"></a>定义优化器和学习率</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> TensorDataset, DataLoader, RandomSampler, SequentialSampler</span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">16</span></span><br><span class="line">train_data = tokenizer(data[<span class="number">0</span>], padding = <span class="string">&quot;max_length&quot;</span>, max_length = <span class="number">100</span>, truncation=<span class="literal">True</span> ,return_tensors = <span class="string">&quot;pt&quot;</span>)</span><br><span class="line">train_label = [padding_label(i) <span class="keyword">for</span> i <span class="keyword">in</span> data[<span class="number">1</span>]]</span><br><span class="line">train = TensorDataset(train_data[<span class="string">&quot;input_ids&quot;</span>], train_data[<span class="string">&quot;attention_mask&quot;</span>], torch.tensor(train_label))</span><br><span class="line">train_sampler = RandomSampler(train)</span><br><span class="line">train_dataloader = DataLoader(train, sampler=train_sampler, batch_size=batch_size)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> torch.optim <span class="keyword">import</span> AdamW</span><br><span class="line"></span><br><span class="line">optimizer = AdamW(model.parameters(), lr=<span class="number">1e-4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> get_scheduler</span><br><span class="line"></span><br><span class="line">num_epochs = <span class="number">12</span></span><br><span class="line">num_training_steps = num_epochs * <span class="built_in">len</span>(train_dataloader)</span><br><span class="line">lr_scheduler = get_scheduler(</span><br><span class="line">    name=<span class="string">&quot;linear&quot;</span>, optimizer=optimizer, num_warmup_steps=<span class="number">0</span>, num_training_steps=num_training_steps</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line">device = torch.device(<span class="string">&quot;cuda&quot;</span>) <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> torch.device(<span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">model.to(device)</span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line">    total_loss = <span class="number">0</span></span><br><span class="line">    model.train()</span><br><span class="line">    <span class="keyword">with</span> tqdm(<span class="built_in">list</span>(<span class="built_in">enumerate</span>(train_dataloader)),ncols=<span class="number">100</span>) <span class="keyword">as</span> _tqdm:</span><br><span class="line">        <span class="keyword">for</span> step, batch <span class="keyword">in</span> _tqdm:</span><br><span class="line">            _tqdm.set_description(<span class="string">&#x27;epoch &#123;&#125;/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(epoch+<span class="number">1</span>, num_epochs))</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> step == <span class="number">0</span>:</span><br><span class="line">                cur_loss = total_loss/(step*batch_size)</span><br><span class="line">                avg_train_loss = total_loss / <span class="built_in">len</span>(train_dataloader)</span><br><span class="line">                _tqdm.set_postfix(loss=cur_loss, avg_loss=avg_train_loss)</span><br><span class="line">                _tqdm.update(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                _tqdm.set_postfix(loss=<span class="number">0.00000</span>)</span><br><span class="line">            b_input_ids = batch[<span class="number">0</span>].to(device)</span><br><span class="line">            b_input_mask = batch[<span class="number">1</span>].to(device)</span><br><span class="line">            b_labels = batch[<span class="number">2</span>].to(device)</span><br><span class="line">            model.zero_grad()        </span><br><span class="line">            outputs = model(b_input_ids, </span><br><span class="line">                        token_type_ids=<span class="literal">None</span>, </span><br><span class="line">                        attention_mask=b_input_mask, </span><br><span class="line">                        labels=b_labels)</span><br><span class="line"></span><br><span class="line">            loss = outputs.loss       </span><br><span class="line">            total_loss += loss.item()</span><br><span class="line">            loss.backward()</span><br><span class="line">            torch.nn.utils.clip_grad_norm_(model.parameters(), <span class="number">1.0</span>)</span><br><span class="line">            optimizer.step()</span><br><span class="line">            lr_scheduler.step()</span><br></pre></td></tr></table></figure><h1 id="模型预测"><a href="#模型预测" class="headerlink" title="模型预测"></a>模型预测</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_entity</span>(<span class="params">model,sen,flag=<span class="string">&#x27;run&#x27;</span></span>):</span><br><span class="line">    res = &#123;&#125;</span><br><span class="line">    sen_input = <span class="string">&#x27;[CLS]&#x27;</span> + sen</span><br><span class="line">    test = tokenizer(sen_input,return_tensors=<span class="string">&quot;pt&quot;</span>,padding=<span class="string">&quot;max_length&quot;</span>,max_length=<span class="number">100</span>)</span><br><span class="line">    test.to(device)</span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():  </span><br><span class="line">        outputs = model(test[<span class="string">&quot;input_ids&quot;</span>], </span><br><span class="line">                        token_type_ids=<span class="literal">None</span>, </span><br><span class="line">                        attention_mask=test[<span class="string">&quot;attention_mask&quot;</span>])</span><br><span class="line">    logits = outputs[<span class="string">&quot;logits&quot;</span>].cpu()</span><br><span class="line">    pred_flat = np.argmax(logits,axis=<span class="number">2</span>).numpy().squeeze()</span><br><span class="line">    <span class="keyword">if</span> flag == <span class="string">&#x27;debug&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(pred_flat, <span class="built_in">len</span>(pred_flat))</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># pred = list(enumerate(pred_flat))</span></span><br><span class="line">        res_index = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> label <span class="keyword">in</span> labeldic.keys():</span><br><span class="line">            hits = [index <span class="keyword">for</span> index,value <span class="keyword">in</span> <span class="built_in">enumerate</span>(pred_flat[:<span class="built_in">len</span>(sen)+<span class="number">1</span>]) <span class="keyword">if</span> value == labeldic[label]]</span><br><span class="line">            <span class="keyword">if</span> hits:</span><br><span class="line">                res_index[label] = hits</span><br><span class="line">                res[label] = []  </span><br><span class="line">        <span class="keyword">if</span> flag == <span class="string">&#x27;debug&#x27;</span>:                  </span><br><span class="line">            <span class="built_in">print</span>(res_index)</span><br><span class="line">        <span class="keyword">for</span> label,indexs <span class="keyword">in</span> res_index.items():</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> indexs:</span><br><span class="line">                j = i</span><br><span class="line">                <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                    <span class="keyword">if</span> pred_flat[j+<span class="number">1</span>] != labeldic[label]+<span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">if</span> i != j <span class="keyword">and</span> sen[i-<span class="number">2</span>:j-<span class="number">1</span>] != <span class="string">&#x27;&#x27;</span>:  <span class="comment"># 排除单字</span></span><br><span class="line">                            res[label].append(sen[i-<span class="number">2</span>:j-<span class="number">1</span>])</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    j += <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">import</span> copy</span><br><span class="line">    labels = copy.deepcopy(res)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> res.items():</span><br><span class="line">        <span class="keyword">if</span> item[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            labels.pop(item[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> labels</span><br><span class="line">    </span><br><span class="line">get_entity(model,<span class="string">&quot;客户本人住在新建城有一套70平米房子&quot;</span>, <span class="string">&#x27;debug&#x27;</span>) </span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[0 0 0 0 0 0 0 0 9 0 0 0 0 0 1 2 2 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 0 0 0 0 0</span><br><span class="line"> 1 1 1 0 0 0 1 1 2 2 0 0 0 0 0 0 1 0 0 0 0 1 1 2 0 0 0 0 0 0 1 1 0 0 0 1 1</span><br><span class="line"> 1 2 2 1 2 0 0 0 0 1 1 0 0 1 1 1 1 2 2 0 0 0 0 0 1 1] 100</span><br><span class="line">&#123;&#x27;VALUE.AREA&#x27;: [14], &#x27;COMM.NAME&#x27;: [8]&#125;</span><br><span class="line">&#123;&#x27;VALUE.AREA&#x27;: [&#x27;70平&#x27;]&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 自然语言处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> transfomers </tag>
            
            <tag> 命名实体识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQT5环境配置与基本使用</title>
      <link href="/2022/09/27/%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/07.PyQT5%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/09/27/%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/07.PyQT5%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="pyqt5-安装"><a href="#pyqt5-安装" class="headerlink" title="pyqt5 安装"></a>pyqt5 安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install PyQt5</span><br><span class="line">pip install PyQt5-tools</span><br></pre></td></tr></table></figure><p>在site-packages中的qt\bin的路径配置到环境变量中，我的路径如下:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\Python36\Lib\site-packages\qt5_applications\Qt\bin</span><br></pre></td></tr></table></figure><br>使用cmd启动designer，成功启动即完成配置</p><h1 id="pycharm-编译工具配置"><a href="#pycharm-编译工具配置" class="headerlink" title="pycharm 编译工具配置"></a>pycharm 编译工具配置</h1><p>为了使qt desginer生成的ui文件、资源qrc转化成py文件，在pycharm开发环境下需要配置一个能够快速打开qt desginer界面以及将.ui、.qrc转.py的工具</p><p>pycharm  ⏩ file ⏩ setting ⏩ Tools ⏩ External Tools<br>在External Tool中新建三个工具</p><p><img src="https://blog.oss.langzihan.top/images/PyQT5%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/bc4ccc2d977c15ca3dd62a0a0d77d254.jpg" alt="external tool"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Name: Qt Designer</span><br><span class="line">Description: PyQt5相关工具</span><br><span class="line">Program: designer的安装地址</span><br><span class="line">Arguments: $FilePath$</span><br><span class="line">Working directory: $ProjectFileDir$</span><br><span class="line"></span><br><span class="line">Name: QRC2PY</span><br><span class="line">Description: 将Qt设计的资源文件qrc转换成py文件</span><br><span class="line">Program: pyrcc5的地址 例：C:\Program Files\Python36\Scripts\pyrcc5.exe</span><br><span class="line">Arguments: $FileName$ -o ..\$FileNameWithoutExtension$_rc.py</span><br><span class="line">Working directory: $FileDir$</span><br><span class="line"></span><br><span class="line">Name: UI2PY</span><br><span class="line">Description: 将Qt设计的资源文件qrc转换成py文件</span><br><span class="line">Program: python的地址 例：C:\Program Files\Python36\python.exe</span><br><span class="line">Arguments: -m PyQt5.uic.pyuic $FileName$ -o $FileNameWithoutExtension$.py</span><br><span class="line">Working directory: $FileDir$</span><br></pre></td></tr></table></figure><p>配置完成后就可以在文件栏的右键菜单使用了</p><p><img src="https://blog.oss.langzihan.top/images/PyQT5%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/9f7a65f754c5fc4266939ec9c9b9f8a8.jpg" alt="菜单"></p><p>之后就是用Designer可视化编辑窗口生成ui文件</p><p>右键ui文件使用UI2PY生成对应窗体的py脚本</p><p>若编辑窗体时导入过外部资源则会生成qrc文件，执行QRC2PY同样生成对应的py脚本</p>]]></content>
      
      
      <categories>
          
          <category> 实用配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置 </tag>
            
            <tag> pycharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Github Action实现Hexo博客自动化部署</title>
      <link href="/2022/09/23/%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/06.%E5%88%A9%E7%94%A8Github%20Action%E5%AE%9E%E7%8E%B0Hexo%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
      <url>/2022/09/23/%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/06.%E5%88%A9%E7%94%A8Github%20Action%E5%AE%9E%E7%8E%B0Hexo%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<mark class="hl-label blue">注：以下步骤为完成hexo本地化部署无误后的操作</mark> <h1 id="文件配置"><a href="#文件配置" class="headerlink" title="文件配置"></a>文件配置</h1><ol><li>在<code>github</code>构建仓库<code>blog</code>用于存储博客源码</li><li>本地<code>git clone</code>仓库</li><li>将能够正常部署的<code>hexo</code>博客文档复制到本地<code>git</code>仓库中，执行提交<code>push</code></li><li>创建 <code>.github/workflows/Hexo-Auto-Deploy.yml</code>文件并填入执行脚本（脚本在下面）</li></ol><p>需要提交至blog源码目录结构如下：</p><p><img src="https://blog.oss.langzihan.top/images/%E5%88%A9%E7%94%A8Github%20Action%E5%AE%9E%E7%8E%B0Hexo%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/a47b471490758eea630a2708f4ff489f.jpg" alt="微信图片_20220923101325"></p><p>图中红框是必要的源码文件，其余是我写的git上传脚本，<code>theme</code>文件夹为非必要文件<br><code>Hexo-Auto-Deploy.yml</code> 脚本代码如下，配置需要根据个人需要修改几个变量：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">Auto</span> <span class="string">Deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="comment"># 触发条件1：main 分支收到 push 后执行任务。</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">  <span class="comment"># 触发条件2：手动按钮</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 环境变量</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">GIT_USER:</span> <span class="comment"># github用户名</span></span><br><span class="line">  <span class="attr">GIT_EMAIL:</span> <span class="comment"># git提交email</span></span><br><span class="line">  <span class="attr">GIT_DEPLOY_REPO:</span> <span class="comment"># 部署目标仓库，就是之前正常部署的仓库 我的是：xuxingchen1996/xuxingchen1996.github.io</span></span><br><span class="line">  <span class="attr">GIT_DEPLOY_BRANCH:</span> <span class="string">master</span> <span class="comment"># 部署目标仓库的分支</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span> <span class="string">on</span> <span class="string">node</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span> <span class="string">and</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.os</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">github.event.repository.owner.id</span> <span class="string">==</span> <span class="string">github.event.sender.id</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">os:</span> [<span class="string">ubuntu-20.04</span>]</span><br><span class="line">        <span class="attr">node_version:</span> [<span class="number">16.</span><span class="string">x</span>]</span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">deploy</span> <span class="string">repo</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.GIT_DEPLOY_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.GIT_DEPLOY_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">.deploy_git</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Configuration</span> <span class="string">environment</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">HEXO_DEPLOY_PRI:</span> <span class="string">$&#123;&#123;secrets.GITEE_PRIVATE_KEY&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          sudo timedatectl set-timezone &quot;Asia/Shanghai&quot;</span></span><br><span class="line"><span class="string">          mkdir -p ~/.ssh/</span></span><br><span class="line"><span class="string">          echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          chmod 600 ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          eval `ssh-agent -s`</span></span><br><span class="line"><span class="string">          ssh-add ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          ssh-keyscan -t rsa github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class="line"><span class="string">          ssh-keyscan -t rsa gitee.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class="line"><span class="string">          sudo chown -R runner:runner ~/.ssh</span></span><br><span class="line"><span class="string">          git config --global user.name $GIT_USER</span></span><br><span class="line"><span class="string">          git config --global user.email $GIT_EMAIL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">run</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure><p>若需要部署到阿里<code>oss</code>实现静态页面托管可追加以下代码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Aliyun</span> <span class="string">OSS</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">manyuanrong/setup-ossutil@master</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">endpoint:</span> <span class="string">oss-cn-beijing.aliyuncs.com</span>  <span class="comment"># oss对应endpoint</span></span><br><span class="line">    <span class="attr">access-key-id:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.OSS_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">access-key-secret:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.OSS_SECRET</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      </span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">aliyun</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">ossutil</span> <span class="string">cp</span> <span class="string">-rf</span> <span class="string">public</span> <span class="string">oss://xxxx/</span>  <span class="comment"># 对应的Bucket名字 覆盖式上传</span></span><br></pre></td></tr></table></figure><p><code>OSS_KEY</code>与<code>OSS_SECRET</code>为阿里的<code>AccessID</code>和<code>AccessSecret</code>参照下方<code>GITEE_PRIVATE_KEY</code>的配置</p><h1 id="github配置"><a href="#github配置" class="headerlink" title="github配置"></a>github配置</h1><p>看到上面的<code>action</code>脚本配置也能知道我们需要一套<code>ssh</code>密钥了，</p><ol><li><p>用本地git命令行<code>ssh-keygen</code>重新生成一套<code>rsa</code>公钥私钥</p></li><li><p>按正常配置<code>ssh</code>与<code>github</code>的方式，将<code>*.pub</code>里的公钥添加到<code>github</code>账户<code>ssh key</code>中</p></li><li><p>将<code>id_rsa</code>里的私钥添加在仓库的 <code>Settings -&gt; Secrets -&gt; Actions</code> 中，取个<code>GITEE_PRIVATE_KEY</code>的名字（因为之前做<code>github</code>与<code>gitee</code>交互所以用的这个名字，可以根据自己需要更改但也要更改脚本里的名字）存放私钥</p></li><li><p>到这里就可以写完博客直接执行push命令自动化部署了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;文件更新&#x27;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 实用配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> git-action </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hugging face 模型微调 - 文本分类任务</title>
      <link href="/2022/09/15/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/00.Hugging%20face%20%E6%A8%A1%E5%9E%8B%E5%BE%AE%E8%B0%83%20-%20%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/"/>
      <url>/2022/09/15/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/00.Hugging%20face%20%E6%A8%A1%E5%9E%8B%E5%BE%AE%E8%B0%83%20-%20%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="任务目标"><a href="#任务目标" class="headerlink" title="任务目标"></a>任务目标</h1><p>1、投入目标任务的文本数据集重新训练哈工大已完成MLM任务预训练的roberta模型</p><p>2、使其能够完成下游文本分类任务</p><h1 id="载入模型"><a href="#载入模型" class="headerlink" title="载入模型"></a>载入模型</h1><p><a href="https://huggingface.co/hfl/chinese-roberta-wwm-ext/tree/main">模型下载地址</a>，只需下载模型相关文件即可，config.json、pytorch_model.bin、vocab.txt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> AutoModelForSequenceClassification</span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> AutoTokenizer</span><br><span class="line"></span><br><span class="line">model_path = <span class="string">&#x27;D:/Models/chinese-roberta-wwm-ext&#x27;</span></span><br><span class="line">tokenizer = AutoTokenizer.from_pretrained(model_path)</span><br><span class="line">model = AutoModelForSequenceClassification.from_pretrained(model_path, num_labels=<span class="number">15</span>)  <span class="comment"># 分类个数</span></span><br></pre></td></tr></table></figure><h1 id="构建训练数据"><a href="#构建训练数据" class="headerlink" title="构建训练数据"></a>构建训练数据</h1><p><a href="https://github.com/fateleak/toutiao-text-classfication-dataset">数据集下载地址</a>，内部数据结构如下，具体信息可见下载链接中readme文件描述</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">6551700932705387022_!_101_!_news_culture_!_京城最值得你来场文化之旅的博物馆_!_保利集团,马未都,中国科学技术馆,博物馆,新中国</span><br><span class="line">6552368441838272771_!_101_!_news_culture_!_发酵床的垫料种类有哪些？哪种更好？_!_</span><br><span class="line">6552310157706002702_!_102_!_news_entertainment_!_成龙改口决定不裸捐了，20亿财产给儿子一半，你怎么看？_!_</span><br><span class="line">6552309039697494532_!_103_!_news_sports_!_亚洲杯夺冠赔率：日本、伊朗领衔 中国竟与泰国并列_!_土库曼斯坦,乌兹别克斯坦,亚洲杯,赔率,小组赛</span><br><span class="line">6552477789642031623_!_103_!_news_sports_!_9轮4球本土射手仅次武磊 黄紫昌要抢最强U23头衔_!_黄紫昌,武磊,卡佩罗,惠家康,韦世豪</span><br><span class="line">6552495859798376712_!_103_!_news_sports_!_如果今年勇士夺冠，下赛季詹姆斯何去何从？_!_</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> sklearn.utils <span class="keyword">import</span> shuffle</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">label_dic = &#123;</span><br><span class="line">    <span class="string">&#x27;news_story&#x27;</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="string">&#x27;news_culture&#x27;</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;news_entertainment&#x27;</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;news_sports&#x27;</span>:<span class="number">3</span>,</span><br><span class="line">    <span class="string">&#x27;news_finance&#x27;</span>:<span class="number">4</span>,</span><br><span class="line">    <span class="string">&#x27;news_house&#x27;</span>:<span class="number">5</span>,</span><br><span class="line">    <span class="string">&#x27;news_car&#x27;</span>:<span class="number">6</span>,</span><br><span class="line">    <span class="string">&#x27;news_edu&#x27;</span>:<span class="number">7</span>,</span><br><span class="line">    <span class="string">&#x27;news_tech&#x27;</span>:<span class="number">8</span>,</span><br><span class="line">    <span class="string">&#x27;news_military&#x27;</span>:<span class="number">9</span>,</span><br><span class="line">    <span class="string">&#x27;news_travel&#x27;</span>:<span class="number">10</span>,</span><br><span class="line">    <span class="string">&#x27;news_world&#x27;</span>:<span class="number">11</span>,</span><br><span class="line">    <span class="string">&#x27;stock&#x27;</span>:<span class="number">12</span>,</span><br><span class="line">    <span class="string">&#x27;news_agriculture&#x27;</span>:<span class="number">13</span>,</span><br><span class="line">    <span class="string">&#x27;news_game&#x27;</span>:<span class="number">14</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_train_data</span>(<span class="params">file_path, col_num</span>):</span><br><span class="line">    content = []</span><br><span class="line">    label = []</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        num = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> f.readlines():</span><br><span class="line">            <span class="keyword">if</span> num &gt; col_num:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            lines = i.split(<span class="string">&quot;_!_&quot;</span>)</span><br><span class="line">            content.append(re.sub(<span class="string">&#x27;[^\u4e00-\u9fa5]&#x27;</span>,<span class="string">&quot;&quot;</span>,lines[<span class="number">3</span>]))  <span class="comment"># 去除非中文</span></span><br><span class="line">            label.append(label_dic.get(lines[<span class="number">2</span>]))</span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> content,label</span><br><span class="line">        </span><br><span class="line">content,label = get_train_data(<span class="string">&quot;./file/toutiao_cat_data.txt&quot;</span>, <span class="number">8000</span>)</span><br><span class="line">data = pd.DataFrame(&#123;<span class="string">&quot;content&quot;</span>:content,<span class="string">&quot;label&quot;</span>:label&#125;)</span><br><span class="line">data = shuffle(data)</span><br><span class="line"></span><br><span class="line">train_data = tokenizer(data.content.to_list(), padding = <span class="string">&quot;max_length&quot;</span>, max_length = <span class="number">100</span>, truncation=<span class="literal">True</span> ,return_tensors = <span class="string">&quot;pt&quot;</span>)</span><br><span class="line">train_label = data.label.to_list()</span><br></pre></td></tr></table></figure><p>完成预处理的data变量中的训练样本数据格式如下：</p><div class="table-container"><table><thead><tr><th style="text-align:center">index</th><th style="text-align:left">content</th><th style="text-align:center">label</th></tr></thead><tbody><tr><td style="text-align:center">4383</td><td style="text-align:left">以色列警告称如果战机被击落将会轰炸俄军事基地你怎么看</td><td style="text-align:center">9</td></tr><tr><td style="text-align:center">5244</td><td style="text-align:left">月份北京楼市各区成交排名昌平丰台密云三区热度高</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">5608</td><td style="text-align:left">市值与业绩倒挂华大基因是第二个乐视网吗</td><td style="text-align:center">12</td></tr></tbody></table></div><h1 id="定义优化器和学习率"><a href="#定义优化器和学习率" class="headerlink" title="定义优化器和学习率"></a>定义优化器和学习率</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> TensorDataset, DataLoader, RandomSampler, SequentialSampler</span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">16</span></span><br><span class="line">train = TensorDataset(train_data[<span class="string">&quot;input_ids&quot;</span>], train_data[<span class="string">&quot;attention_mask&quot;</span>], torch.tensor(train_label))</span><br><span class="line">train_sampler = RandomSampler(train)</span><br><span class="line">train_dataloader = DataLoader(train, sampler=train_sampler, batch_size=batch_size)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义优化器</span></span><br><span class="line"><span class="keyword">from</span> torch.optim <span class="keyword">import</span> AdamW</span><br><span class="line">optimizer = AdamW(model.parameters(), lr=<span class="number">1e-4</span>)</span><br><span class="line"><span class="comment"># 定义学习率和训练轮数</span></span><br><span class="line">num_epochs = <span class="number">1</span></span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> get_scheduler</span><br><span class="line">num_training_steps = num_epochs * <span class="built_in">len</span>(train_dataloader)</span><br><span class="line">lr_scheduler = get_scheduler(</span><br><span class="line">    name=<span class="string">&quot;linear&quot;</span>, optimizer=optimizer, num_warmup_steps=<span class="number">0</span>, num_training_steps=num_training_steps</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line">device = torch.device(<span class="string">&quot;cuda&quot;</span>) <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> torch.device(<span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">model.to(device)</span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line">    total_loss = <span class="number">0</span></span><br><span class="line">    model.train()</span><br><span class="line">    <span class="keyword">with</span> tqdm(<span class="built_in">list</span>(<span class="built_in">enumerate</span>(train_dataloader)),ncols=<span class="number">100</span>) <span class="keyword">as</span> _tqdm:</span><br><span class="line">        <span class="keyword">for</span> step, batch <span class="keyword">in</span> _tqdm:</span><br><span class="line">            _tqdm.set_description(<span class="string">&#x27;epoch &#123;&#125;/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(epoch+<span class="number">1</span>, num_epochs))</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> step == <span class="number">0</span>:</span><br><span class="line">                cur_loss = total_loss/(step*batch_size)</span><br><span class="line">                avg_train_loss = total_loss / <span class="built_in">len</span>(train_dataloader)</span><br><span class="line">                _tqdm.set_postfix(loss=cur_loss, avg_loss=avg_train_loss)</span><br><span class="line">                _tqdm.update(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                _tqdm.set_postfix(loss=<span class="number">0.00000</span>)</span><br><span class="line">            b_input_ids = batch[<span class="number">0</span>].to(device)</span><br><span class="line">            b_input_mask = batch[<span class="number">1</span>].to(device)</span><br><span class="line">            b_labels = batch[<span class="number">2</span>].to(device)</span><br><span class="line">            model.zero_grad()        </span><br><span class="line">            outputs = model(b_input_ids, </span><br><span class="line">                        token_type_ids=<span class="literal">None</span>, </span><br><span class="line">                        attention_mask=b_input_mask, </span><br><span class="line">                        labels=b_labels)</span><br><span class="line"></span><br><span class="line">            loss = outputs.loss       </span><br><span class="line">            total_loss += loss.item()</span><br><span class="line">            loss.backward()</span><br><span class="line">            torch.nn.utils.clip_grad_norm_(model.parameters(), <span class="number">1.0</span>)</span><br><span class="line">            optimizer.step()</span><br><span class="line">            lr_scheduler.step()</span><br></pre></td></tr></table></figure><h1 id="模型预测"><a href="#模型预测" class="headerlink" title="模型预测"></a>模型预测</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">test = tokenizer(<span class="string">&quot;通过考研大纲谈农学复习之化学部分年农学将第二次实行全国统一考试这使农学考生的复习备考十分迷茫&quot;</span>,return_tensors=<span class="string">&quot;pt&quot;</span>,padding=<span class="string">&quot;max_length&quot;</span>,max_length=<span class="number">100</span>)</span><br><span class="line">test.to(device)</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">eval</span>()</span><br><span class="line"><span class="keyword">with</span> torch.no_grad():  </span><br><span class="line">    outputs = model(test[<span class="string">&quot;input_ids&quot;</span>], </span><br><span class="line">                    token_type_ids=<span class="literal">None</span>, </span><br><span class="line">                    attention_mask=test[<span class="string">&quot;attention_mask&quot;</span>])</span><br><span class="line"></span><br><span class="line">logits = outputs[<span class="string">&quot;logits&quot;</span>].cpu()</span><br><span class="line">pred_flat = np.argmax(logits,axis=<span class="number">1</span>).numpy().squeeze()</span><br><span class="line"><span class="built_in">print</span>(pred_flat.tolist())</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(label_dic.keys())[<span class="built_in">list</span>(label_dic.values()).index(pred_flat.tolist())])</span><br></pre></td></tr></table></figure><p><strong>注：</strong>预训练模型的finetune基本就是这个套路，模型部分基本没太大变动，一般只需要根据数据集进行预处理，处理成模型适用的输入格式</p>]]></content>
      
      
      <categories>
          
          <category> 自然语言处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> transfomers </tag>
            
            <tag> 文本分类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机下ubuntu server扩容方案</title>
      <link href="/2022/05/07/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/20.%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8Bubuntu%20server%E6%89%A9%E5%AE%B9%E6%96%B9%E6%A1%88/"/>
      <url>/2022/05/07/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/20.%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8Bubuntu%20server%E6%89%A9%E5%AE%B9%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>总的来说，虚拟机下的ubuntu扩容分为三步：</p><p>1、虚拟机扩容</p><p>2、进入系统对多出来的容量新建分区</p><p>3、将新分区挂在到指定目录并完成固化</p><h1 id="虚拟机扩容"><a href="#虚拟机扩容" class="headerlink" title="虚拟机扩容"></a>虚拟机扩容</h1><p>这点没什么好说，VMware的虚拟机扩容得先删掉所有快照，不然没法扩容只能加磁盘</p><h1 id="新建分区"><a href="#新建分区" class="headerlink" title="新建分区"></a>新建分区</h1><p>1、将多出来的内存新建分区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建目录用于挂载新分出来的分区</span></span><br><span class="line">mkdir /data</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进如root模式，不进也行，每个命令前加上sudo就行</span></span><br><span class="line">su root</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入fdisk交互式命令行</span></span><br><span class="line">fdisk /dev/sda</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入 m 可以查看命令说明</span></span><br><span class="line">Command (m for help): m</span><br><span class="line"></span><br><span class="line">Help:</span><br><span class="line"></span><br><span class="line">  Generic</span><br><span class="line">   d   delete a partition</span><br><span class="line">   F   list free unpartitioned space</span><br><span class="line">   l   list known partition types</span><br><span class="line">   n   add a new partition</span><br><span class="line">   p   print the partition table</span><br><span class="line">   t   change a partition type</span><br><span class="line">   v   verify the partition table</span><br><span class="line">   i   print information about a partition</span><br><span class="line"></span><br><span class="line">  Misc</span><br><span class="line">   m   print this menu</span><br><span class="line">   x   extra functionality (experts only)</span><br><span class="line"></span><br><span class="line">  Script</span><br><span class="line">   I   load disk layout from sfdisk script file</span><br><span class="line">   O   dump disk layout to sfdisk script file</span><br><span class="line"></span><br><span class="line">  Save &amp; Exit</span><br><span class="line">   w   write table to disk and exit</span><br><span class="line">   q   quit without saving changes</span><br><span class="line"></span><br><span class="line">  Create a new label</span><br><span class="line">   g   create a new empty GPT partition table</span><br><span class="line">   G   create a new empty SGI (IRIX) partition table</span><br><span class="line">   o   create a new empty DOS partition table</span><br><span class="line">   s   create a new empty Sun partition table</span><br><span class="line">   </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、输入 n 新建分区，一切默认回车即可</span></span><br><span class="line">Command (m for help): n</span><br><span class="line">Partition number (6-128, default 6): </span><br><span class="line">First sector (41940992-104857566, default 41940992): </span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G,T,P&#125; (41940992-104857566, default 104857566): </span><br><span class="line"></span><br><span class="line">Created a new partition 6 of type &#x27;Linux filesystem&#x27; and of size 30 GiB.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、输入 p 查看新建分区情况，sda6就是新分区</span></span><br><span class="line">Command (m for help): p</span><br><span class="line">Disk /dev/sda: 50 GiB, 53687091200 bytes, 104857600 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel type: gpt</span><br><span class="line">Disk identifier: D7617B57-3A11-4B5B-B28D-FE5A8EEAD05D</span><br><span class="line"></span><br><span class="line">Device        Start       End  Sectors Size Type</span><br><span class="line">/dev/sda1      2048      4095     2048   1M BIOS boot</span><br><span class="line">/dev/sda2      4096   2101247  2097152   1G Linux filesystem</span><br><span class="line">/dev/sda3   2101248   8392703  6291456   3G Linux swap</span><br><span class="line">/dev/sda4   8392704  29364223 20971520  10G Linux filesystem</span><br><span class="line">/dev/sda5  29364224  41940991 12576768   6G Linux filesystem</span><br><span class="line">/dev/sda6  41940992 104857566 62916575  30G Linux filesystem</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、输入 w 保存分区，此时<span class="built_in">df</span> -lh还看不到新建的分区</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4、格式化sda6分区，至此分区新建完成</span></span><br><span class="line">mkfs -t /dev/sda6</span><br></pre></td></tr></table></figure><h1 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区"></a>挂载分区</h1><p>只有将分区挂载到指定目录上，这个空间才能投入使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/sda6 /data</span><br></pre></td></tr></table></figure><p>但是这样挂载的目录有一个缺陷，重启后就没了，还得重新挂载，所以需要执行固化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、确定分区uuid</span></span><br><span class="line">blkid /dev/sda6</span><br></pre></td></tr></table></figure><p><code>/dev/sda6: UUID=&quot;01c6810e-738f-47c2-882f-2451b93a163d&quot; TYPE=&quot;ext4&quot; PARTUUID=&quot;212a7071-d49e-0f41-95df-b7a35eef881b&quot;</code></p><p>复制下UUID的值，后面需要使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、将分区信息固化到系统配置信息中</span></span><br><span class="line">vim /etc/fstab</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参照原文件格式编写</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/etc/fstab: static file system information.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Use &#x27;blkid&#x27; to print the universally unique identifier for a</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">device; this may be used with UUID= as a more robust way to name devices</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">that works even <span class="keyword">if</span> disks are added and removed. See fstab(5).</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># &lt;file system&gt; &lt;mount point&gt;   &lt;type&gt;  &lt;options&gt;       &lt;dump&gt;  &lt;pass&gt;</span></span></span><br><span class="line">/dev/disk/by-uuid/bfae9057-2637-4bdb-b355-395ab9ca30f1 none swap sw 0 0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/ was on /dev/sda4 during curtin installation</span></span><br><span class="line">/dev/disk/by-uuid/9bdde825-6d74-45e2-bbf5-0b497e0d0fcf / ext4 defaults 0 1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/home was on /dev/sda5 during curtin installation</span></span><br><span class="line">/dev/disk/by-uuid/40ca4129-cacf-4d8b-a213-fd3c654ca1ce /home ext4 defaults 0 1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/boot was on /dev/sda2 during curtin installation</span></span><br><span class="line">/dev/disk/by-uuid/1e0131bc-9662-41b6-81e7-9a5db92f3509 /boot ext4 defaults 0 1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参照/home的挂载配置，追加上相似的配置信息</span></span><br><span class="line">/dev/disk/by-uuid/01c6810e-738f-47c2-882f-2451b93a163d /data ext4 defaults 0 1</span><br><span class="line">/swap.img       none    swap    sw      0       0</span><br></pre></td></tr></table></figure><p>保存文件，重启系统，至此完成扩容，重启后就可以在<code>df -lh</code>中看到相关容量信息了</p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NLP线上环境部署</title>
      <link href="/2022/02/23/%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/07.nlp%E7%BA%BF%E4%B8%8A%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
      <url>/2022/02/23/%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/07.nlp%E7%BA%BF%E4%B8%8A%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="Anconda环境部署"><a href="#Anconda环境部署" class="headerlink" title="Anconda环境部署"></a>Anconda环境部署</h1><p>1、创建文件夹，下载Anaconda</p><blockquote><p>wget <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2021.05-Linux-x86_64.sh">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2021.05-Linux-x86_64.sh</a></p></blockquote><p>2、安装</p><blockquote><p>chmod +x Anaconda3-2021.05-Linux-x86_64.sh</p><p>./Anaconda3-2021.05-Linux-x86_64.sh</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Please, press ENTER to <span class="built_in">continue</span></span><br><span class="line"><span class="comment"># 按enter 出现用户协议 一直按enter</span></span><br><span class="line">Please answer <span class="string">&#x27;yes&#x27;</span> or <span class="string">&#x27;no&#x27;</span>:<span class="string">&#x27;</span></span><br><span class="line"><span class="string"># 输入 yes 按 enter</span></span><br><span class="line"><span class="string">[/root/anaconda3] &gt;&gt;&gt; /root/Anaconda</span></span><br><span class="line"><span class="string"># 设置安装目录(必须未存在的文件夹)，直接enter就是默认的目录，显示在左边中括号那个</span></span><br><span class="line"><span class="string">Unpacking payload ...  </span></span><br><span class="line"><span class="string">#出现就是就是在安装了</span></span><br><span class="line"><span class="string">by running conda init? [yes|no] </span></span><br><span class="line"><span class="string"># 是否初始化conda，这里一定要输入yes 不要直接按enter，因为默认是no 然后就安装完成了</span></span><br></pre></td></tr></table></figure><p>打开~/.bashrc会看到这段配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &gt;&gt;&gt; conda initialize &gt;&gt;&gt;</span></span><br><span class="line"><span class="comment"># !! Contents within this block are managed by &#x27;conda init&#x27; !!</span></span><br><span class="line">__conda_setup=<span class="string">&quot;<span class="subst">$(&#x27;/root/Anaconda/bin/conda&#x27; &#x27;shell.bash&#x27; &#x27;hook&#x27; 2&gt; /dev/null)</span>&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">eval</span> <span class="string">&quot;<span class="variable">$__conda_setup</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="string">&quot;/root/Anaconda/etc/profile.d/conda.sh&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        . <span class="string">&quot;/root/Anaconda/etc/profile.d/conda.sh&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">export</span> PATH=<span class="string">&quot;/root/Anaconda/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">unset</span> __conda_setup</span><br><span class="line"><span class="comment"># &lt;&lt;&lt; conda initialize &lt;&lt;&lt;</span></span><br></pre></td></tr></table></figure><p>3、验证安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"><span class="comment"># 检查是否安装成功</span></span><br><span class="line">conda -V</span><br><span class="line">conda 4.10.1 <span class="comment"># 出来这个就说明安装成功了</span></span><br></pre></td></tr></table></figure><p>4、取消默认自动进入base环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda config --<span class="built_in">set</span> auto_activate_base <span class="literal">false</span></span><br><span class="line">conda deactivate</span><br></pre></td></tr></table></figure><p>5、配置清华镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启下载时通道显示</span></span><br><span class="line">conda config --<span class="built_in">set</span> show_channel_urls <span class="built_in">yes</span></span><br><span class="line"><span class="comment"># ./condarc 中追加镜像信息</span></span><br><span class="line">channels:</span><br><span class="line">  - defaults</span><br><span class="line">default_channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span><br><span class="line">custom_channels:</span><br><span class="line">  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch-lts: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br></pre></td></tr></table></figure><p><code>conda config --show</code>验证</p><h1 id="开发环境配置"><a href="#开发环境配置" class="headerlink" title="开发环境配置"></a>开发环境配置</h1><p>1、新建<code>nlp</code>虚拟环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n nlp python=3.6.8</span><br></pre></td></tr></table></figure><h1 id="Jupyter-Lab环境搭建"><a href="#Jupyter-Lab环境搭建" class="headerlink" title="Jupyter Lab环境搭建"></a>Jupyter Lab环境搭建</h1><p>1、安装jupyter lab</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install jupyterlab</span><br></pre></td></tr></table></figure><p>2、编辑配置信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成配置文件</span></span><br><span class="line">jupyter notebook --generate-config </span><br><span class="line"><span class="comment"># 在配置文件中追加</span></span><br><span class="line">c.ServerApp.open_browser = False  <span class="comment"># 禁止自动打开浏览器</span></span><br><span class="line">c.ServerApp.ip=<span class="string">&#x27;*&#x27;</span>  <span class="comment"># 就是设置所有ip皆可访问</span></span><br><span class="line">c.ServerApp.allow_remote_access = True  <span class="comment"># 允许远程访问</span></span><br><span class="line">c.ServerApp.allow_root = True  <span class="comment"># 以root身份运行</span></span><br><span class="line">c.ServerApp.port = 8888  <span class="comment"># 指定端口，默认8888</span></span><br><span class="line">c.ServerApp.root_dir = <span class="string">&#x27;/jupyter/xuxingchen&#x27;</span>  <span class="comment"># 工作目录</span></span><br><span class="line">c.ServerApp.password = <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>3、生成远程密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入python命令行</span></span><br><span class="line">from jupyter_server.auth import passwd; passwd()</span><br><span class="line"><span class="comment"># 输入密码、验证密码后会输出&#x27;sha1:*****&#x27;结果，复制粘贴到配置文件中的c.ServerApp.password值中</span></span><br></pre></td></tr></table></figure><p>4、使用conda的Python环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">conda install nb_conda_kernels</span><br><span class="line"><span class="comment"># 定位到anaconda/etc/jupyter/jupyter_config.json，修正配置为以下：</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;CondaKernelSpecManager&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;kernelspec_path&quot;</span>: <span class="string">&quot;--user&quot;</span>,</span><br><span class="line">    <span class="string">&quot;name_format&quot;</span>: <span class="string">&quot;&#123;kernel&#125; (&#123;environment&#125;)&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># base下直接指定环境安装ipykernel</span></span><br><span class="line">conda install -n 环境名称 ipykernel</span><br><span class="line"><span class="comment"># 切换到对应环境中 写入jupyter notebook 的kernel</span></span><br><span class="line">python -m ipykernel install --user --name 环境名称</span><br></pre></td></tr></table></figure><p>5、多用户配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 复制多份.jupyter/jupyter_lab_config.py，修改其中端口号与密码，以脚本形式后台执行</span></span><br><span class="line"><span class="comment"># 启动脚本</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /root/Anaconda/etc/profile.d/conda.sh</span><br><span class="line"><span class="comment"># 切换环境</span></span><br><span class="line">conda activate base</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行jupyter</span></span><br><span class="line">root_dir=<span class="string">&quot;/jupyter/&quot;</span></span><br><span class="line">log_dir=<span class="string">&quot;/root/.jupyter/logs/&quot;</span></span><br><span class="line"><span class="built_in">declare</span> -A dic</span><br><span class="line">dic=([zl]=8888 [xj]=8889 [zgp]=8890 [xxc]=8891)</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$1</span> == <span class="string">&quot;all&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">dirname</span> <span class="keyword">in</span> <span class="variable">$&#123;!dic[*]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">(jupyter-lab --port=<span class="variable">$&#123;dic[$dirname]&#125;</span> --notebook-dir=$root_dir<span class="variable">$dirname</span>) &gt; $log_dir<span class="variable">$dirname</span>.<span class="built_in">log</span> 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="built_in">sleep</span> 2</span><br><span class="line"><span class="built_in">cat</span> $log_dir<span class="variable">$dirname</span>.<span class="built_in">log</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;jupyter lab <span class="variable">$dirname</span> are running successfully&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">(jupyter-lab --port=<span class="variable">$&#123;dic[$1]&#125;</span> --notebook-dir=$root_dir<span class="variable">$1</span>) &gt; $log_dir<span class="variable">$1</span>.<span class="built_in">log</span> 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="built_in">sleep</span> 3</span><br><span class="line"><span class="built_in">cat</span> $log_dir<span class="variable">$1</span>.<span class="built_in">log</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;jupyter lab <span class="variable">$1</span> is running successfully&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭脚本</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$1</span> == <span class="string">&quot;all&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">list=(<span class="string">&quot;zl&quot;</span> <span class="string">&quot;xj&quot;</span> <span class="string">&quot;zgp&quot;</span> <span class="string">&quot;xxc&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">dirname</span> <span class="keyword">in</span> <span class="variable">$&#123;!list[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="comment"># 获取进程pid</span></span><br><span class="line">PID=$(pgrep -f <span class="built_in">dir</span>=/jupyter/<span class="variable">$&#123;list[$dirname]&#125;</span>)</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$PID</span> ]</span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line"><span class="built_in">kill</span> -n 15 <span class="variable">$PID</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;已终止<span class="variable">$&#123;list[$dirname]&#125;</span> <span class="variable">$PID</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;未找到<span class="variable">$&#123;list[$dirname]&#125;</span>相关进程&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="comment"># 获取进程pid</span></span><br><span class="line">PID=$(pgrep -f <span class="built_in">dir</span>=/jupyter/<span class="variable">$1</span>)</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$PID</span> ]</span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line"><span class="built_in">kill</span> -n 15 <span class="variable">$PID</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;已终止<span class="variable">$1</span> <span class="variable">$PID</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;未找到<span class="variable">$1</span>相关进程&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>6、代码提示</p><p>① 先去Node官网下载<a href="https://nodejs.org/zh-cn/download/">安装包</a>，解压安装到指定位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /usr/local/lib/nodejs</span><br><span class="line">sudo tar -xJvf node-xxx.tar.xz -C /usr/local/lib/nodejs</span><br><span class="line">vim ~/.profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 追加环境变量</span></span><br><span class="line"><span class="built_in">export</span> PATH=/usr/local/lib/nodejs/node-<span class="variable">$VERSION</span>-<span class="variable">$DISTRO</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="comment"># 刷新bash环境</span></span><br><span class="line"><span class="built_in">source</span> ~/.profile</span><br><span class="line"><span class="comment"># 验证安装</span></span><br><span class="line">node -v</span><br></pre></td></tr></table></figure><p>② 关闭所有jupyter进程</p><p>③ 激活base环境，安装jupyterlab-lsp插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conda activate</span><br><span class="line">pip install jupyterlab-lsp</span><br><span class="line">pip install python-lsp-server[all]</span><br><span class="line">pip install nbclassic==0.2.8</span><br></pre></td></tr></table></figure><p>④ 重启jupyter，看到左下角状态栏有✔Fully字样即为成功</p><p>⑤ 去除下划线纠错标识，工具栏 - Settings - Advanced Settings，开启json视图，添加下方键值对即可关闭：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;ignoreMessagesPatterns&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;.*&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安装笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> anaconda </tag>
            
            <tag> jupyter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu上编译安装python源码</title>
      <link href="/2022/02/11/%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/06.ubuntu%E4%B8%8A%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85python%E6%BA%90%E7%A0%81/"/>
      <url>/2022/02/11/%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/06.ubuntu%E4%B8%8A%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85python%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>注：本文是对<a href="https://www.myfreax.com/how-to-install-python-3-9-on-ubuntu-20-04/">文章</a>的部分转载</p><p>首先安装构建Python所需的依赖项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev libsqlite3-dev wget libbz2-dev</span><br></pre></td></tr></table></figure><p>下载最新版本的源代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.9.0/Python-3.9.0.tgz</span><br></pre></td></tr></table></figure><p>解压：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xf Python-3.9.0.tgz</span><br></pre></td></tr></table></figure><p>到Python源码目录并运行<code>configure</code>脚本，执行脚本是为了检查对系统的依赖是否完整以及配置编译选项，<code>--enable-optimizations</code>选项通过运行多个测试来优化Python二进制文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Python-3.9.0</span><br><span class="line">./configure --enable-optimizations</span><br></pre></td></tr></table></figure><p>开始Python 3.9的构建过程，要加快构建时间，请修改<code>-j</code>对应的处理器的核心数。您可以通过键入<code>nproc</code>来找到CPU的核心数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j 12</span><br></pre></td></tr></table></figure><p>构建过程完成后，通过键入以下命令来安装Python二进制文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make altinstall</span><br></pre></td></tr></table></figure><p>我们使用<code>altinstall</code>而非<code>install</code>，因为稍后将覆盖系统默认的python3二进制文件。现在Python 3.9已安装并可以使用。 要验证它，请键入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3.9 --version     </span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>输出应显示Python版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Python 3.9.0+ </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安装笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>梯度下降</title>
      <link href="/2021/12/27/%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/02.%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/"/>
      <url>/2021/12/27/%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/02.%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/</url>
      
        <content type="html"><![CDATA[<p>注：本篇文章因转载次数过多，我找不到源头 ORZ</p><h3 id="1-梯度下降相关概念"><a href="#1-梯度下降相关概念" class="headerlink" title="1.梯度下降相关概念"></a>1.梯度下降相关概念</h3><ul><li><p><strong>假设函数（hypothesis function）</strong></p><p>所谓假设函数，就是监督学习中，我们拟合样本特征映射到目标变量的函数，记为$h _ θ(x)$，θ为函数的参数。例如，一个简单的线性回归拟合函数可以表示为：</p><script type="math/tex; mode=display">h_θ(x) = θ_0 + θ_1·x</script></li><li><p><strong>损失函数 loss function</strong></p><p>又称为代价函数。通常用损失函数来度量拟合的程度，从而评估模型拟合的好坏，记为<em>J(θ)</em>。注意，损失函数是关于 θ 的函数！也就是说，对于损失函数来讲，θ不再是函数的参数，而是损失函数的自变量！例如，对于线性回归的损失函数可以表示为：</p><script type="math/tex; mode=display">J(θ)=1/(2n) * \sum(h_θ (x_i)−y_i)^2</script><p>　　其中<em>n</em>表示样本数量，$x_i$</p></li><li><strong>损失函数的梯度：</strong></li></ul><p>　　损失函数的梯度即对$θ _ i$求偏导，由于损失函数是关于 θ 的函数，因此，θ 的取值不同，得出来的的梯度向量也是不同的。借用“下山”的比喻来解释，θ 的不同取值，相当于处于山上的不同位置，每一个位置都会计算出一个梯度向量 <em>▽J(θ)</em> 。</p><h3 id="2-梯度下降过程"><a href="#2-梯度下降过程" class="headerlink" title="2.梯度下降过程"></a>2.梯度下降过程</h3><p><strong>(1) 学习得到损失函数<em>J(θ)</em>及样本点$x^i$的损失：</strong></p><p>　　例如，对于线性回归模型的假设函数为：$h <em> θ(x) = θ </em> 0+θ <em> 1·x_1+θ </em> 2·x <em> 2$，则损失函数为：$J(θ)=1/(2n) * \sum(θ </em> 0+θ <em> 1·x </em> 1+θ <em> 2·x_2-y)^2$；我们为样本添加一个维度$x_0$，$x_0$ 恒等于 1。则，我们可以变损失函数表示为：$J(θ)=1/(2n) * \sum(θ </em> 0·x<em>0+θ </em> 1·x<em>1+θ </em> 2·x<em>2-y)^2$<br>　　为了便于讲解和理解，我们先只取一个样本点进行计算。对于样本点$x^1=(x_0=1, x_1=1, x_2=2)$，对应的目标变量$y^1 =10$，的损失为：$J(θ)^1=1/2 * (θ </em> 0+θ <em> 1+2 * θ </em> 2-10)^2$</p><p><strong>(2) 求出样本点$x^i$损失函数的梯度向量：</strong></p><p>　　根据<em>J(θ)</em>，求出模型损失函数的梯度向量表示为 ：</p><script type="math/tex; mode=display">▽J(θ)=<(θ_0·x_0+θ_1·x_1+θ_2·x_2-y) * x_0, (θ_0·x_0+θ_1·x_1+θ_2·x_2-y) * x_1, (θ_0·x_0+θ_1·x_1+θ_2·x_2-y) * x_2></script><p>　　根据$J(θ)^1$，求出样本点$x^1$ 对应的梯度$▽J(θ)^1=&lt;(θ <em> 0+θ </em> 1+2 <em> θ <em> 2-10), (θ </em> 0+θ _ 1+2 </em> θ <em> 2-10), (θ </em> 0+θ <em> 1+2 * θ </em> 2-10) * 2&gt;$</p><p><strong>(3) 初始化假设函数的参数 θ ，得到相应的梯度向量：</strong></p><p>　　对 θ 进行随机取值，假设$θ _ i$第一次全部取0，$θ_0=<0,0,0>$；<br>　　将$θ^0$带入$J(θ)^1$，得到 取$θ^0$时的损失为 $J(θ)_0^1=1/2 <em> (0+0+2 </em> 0-10)^2=50$<br>　　将$θ^0$带入$▽J(θ)^1$，得到$θ^0$处的梯度向量为$▽J(θ)_0^1=&lt;-10,-10,-20&gt;$ ；　　　</p><p><strong>(4) 根据梯度下降步长，进行梯度下降迭代：</strong></p><p>　　设立步长α=0.1，对$θ^0$进行梯度下降，得到$θ^1$<br>　　第一次梯度下降：</p><script type="math/tex; mode=display">θ^1= θ^0-α*▽J(θ) _ 0^1 = <0,0,0>-0.1 * <-10,-10,-20> = <1,1,2></script><p>　　将$θ^1$带入$J(θ)^1$ ，得到 取$θ^0$ 时的损失为$J(θ) <em> 0^1=1/2 <em> (1+1+2 </em> 2-10)^2=8$<br>　　将$θ^1$带入$▽J(θ)^1$，得到$θ^0$处的梯度向量为$▽J(θ) </em> 0^1= &lt; -4,-4,-8 &gt;$；<br>　　第二次梯度下降：　　</p><script type="math/tex; mode=display">θ _ 2=θ^1-α*▽J(θ) _ 0^1=<1,1,2>-0.1 * <-4,-4,-8>=<0.4,0.4,1.2></script><p>　　将$θ^2$带入$J(θ)^1$，得到 取$θ^2$时的损失为$J(θ) _ 0^1=1/2 <em> (0.4+0.4+2 </em> 1.2-10)^2=23.12$<br>　　此时我们发现，$θ^2$处的损失为23.12，大于$θ^1$处的损失8，说明，我们可能步子迈的大了，跨过了最低点，我们重新设定α = 0.05，重复上述过程：<br>　　重新设立步长 α = 0.05<br>　　第一次梯度下降：　　</p><script type="math/tex; mode=display">θ_1 = θ0 - α * ▽J(θ)01  = < 0，0，0 > - 0.05 * < -10，-10，-20 > = < 0.5，0.5，1 ></script><p>　　将$θ^1$带入$J(θ)^1$ ，得到 取$θ^0$时的损失为 $J(θ) <em> 0^1=1/2 <em> (0.5+0.5+2 </em> 1-10)^2=24.5$<br>　　将$θ^1$带入$▽J(θ)^1$ ，得到$θ^0$处的梯度向量为$▽J(θ) </em> 0^1=&lt;-7,-7,-14&gt;$；<br>　　第二次梯度下降：　　</p><script type="math/tex; mode=display">θ_2 = θ1 - α * ▽J(θ)01  = < 1，1，2 > - 0.05 * < -7，-7，-14 > = < 1.35，1.35，2.7 ></script><p>　　将$θ^2$带入$J(θ)^1$，得到 取$θ^2$时的损失为$J(θ) <em> 0^1=1/2 <em> (1.35+1.35+2 </em> 2.7-10)^2=1.805$<br>　　将$θ^2$ 带入$▽J(θ)^1$，得到$θ^2$处的梯度向量为$▽J(θ) </em> 0^1=&lt;-1.9,-1.9,-3.8&gt;$</p><p>　　此时可以继续进行第三次、第四次。。。第n次，那么什么时候梯度下降停止？</p><p>　　我们可以设置一个梯度下降算法终止距离值 ε，即梯度下降的距离都小于 ε 时，算法终止。假设我们设置 ε = 0.1（实际运用中，一般会设定一个更小的值，例如$1e^{-5}$），上述$θ^2$的梯度向量为&lt; -1.9，-1.9，-3.8 &gt;，梯度向量中的3个值的绝对值都大于ε ，因此继续进行梯度下降，假设经过n次迭代后的梯度向量为&lt;-0.04，-0.04，-0.08&gt;，三个值的绝对值都小于0.1，则算法终止。</p><p>　　通过上述过程可以看出，重新设置步长α后，第二次梯度下降过程没有跨过损失函数最低点，而是更加接近最低点。不断的梯度下降，使得损失函数损失在不断的变小：$θ^0$的损失为50，$θ^1$的损失为24.5，$θ^2$的损失为1.805。 初始在本文的例子中，由于是我随便写的一个损失函数，所以经过2-3次梯度下降之后就接近了损失函数最低点，实际运用中当然不可能这么轻松，梯度下降可能要经过n次迭代，才能接近损失函数的极小值点。另外，梯度下降过程中，除了损失在不断减小，梯度向量也在不断变小：$θ^0$的梯度为&lt; -10，-10，-20 &gt; ，$θ^1$的梯度为&lt; -7，-7，-14 &gt;，$θ^2$的梯度为&lt; -1.9，-1.9，-3.8 &gt;。梯度越来越小，说明“山坡”越来越平缓，不像一开始那么”陡峭“，那么可以说明，我们已经接近”山谷“了。实际上，随着不断的梯度下降，梯度向量中的每个值会越来月接近于0。</p><p>　　讲到这里，大家不要忘记一个事实：上述过程中，我们只选取了一个样本点$x^1$进行梯度下降。这种随机选取一个样本点进行梯度下降，找到最优参数θ的方法，就叫做<strong>随机梯度下降</strong>。而如果我们利用所有的样本数据进行梯度下降，这种方法就叫做<strong>批量梯度下降</strong>。毫无疑问，批量梯度下降要消耗更多的计算内存和训练时间；而随即梯度下降虽然训练速度快，但是可能得到只是局部最优解。我们也可以折中一下，一共有n个样本，我们取m个子样本进行梯度下降（1&lt;m&lt;n），既提高训练速度，又在一定程度上避免算法收敛到局部最优，这种方法就叫做<strong>小批量梯度下降</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 算法详解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法详解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BindingResult中拦截不到错误</title>
      <link href="/2021/11/29/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/19.BindingResult%E4%B8%AD%E6%8B%A6%E6%88%AA%E4%B8%8D%E5%88%B0%E9%94%99%E8%AF%AF/"/>
      <url>/2021/11/29/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/19.BindingResult%E4%B8%AD%E6%8B%A6%E6%88%AA%E4%B8%8D%E5%88%B0%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>采用JSR303规范的validation库进行后端验证，但是使用BindingResult对象后却获取不到错误信息<br>局部代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;pms_brand&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BrandEntity</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableId</span></span><br><span class="line"><span class="keyword">private</span> Long brandId;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NotEmpty</span></span><br><span class="line"><span class="meta">@NotBlank(message = &quot;品牌名不能为空&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">save</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> BrandEntity brand, BindingResult result)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        result.getFieldErrors().forEach((item)-&gt;&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> item.getDefaultMessage();</span><br><span class="line">        <span class="type">String</span> <span class="variable">field</span> <span class="operator">=</span> item.getField();</span><br><span class="line">        map.put(field, message);</span><br><span class="line">    &#125;);</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="number">400</span>, <span class="string">&quot;提交数据不合法&quot;</span>).put(<span class="string">&quot;data&quot;</span>, map);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        brandService.save(brand);</span><br><span class="line">        <span class="keyword">return</span> R.ok();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>仔细排除后发现实际代码并没有什么问题，debug后也发现result对象中的errors字段中并没有获取到错误对象，最后通过修改pom文件中的依赖解决了这种问题，在pom中应包含有如下两个依赖，<strong>缺一不可</strong>，我就是漏了hibernate-validator导致的错误</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.validation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>validation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0.0.Alpha3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jsr303 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lombok包的@Data注解报错找不到符号</title>
      <link href="/2021/11/24/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/18.IDEA%20lombok%E5%8C%85%E7%9A%84@Data%E6%B3%A8%E8%A7%A3%E6%8A%A5%E9%94%99%E6%89%BE%E4%B8%8D%E5%88%B0%E7%AC%A6%E5%8F%B7/"/>
      <url>/2021/11/24/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/18.IDEA%20lombok%E5%8C%85%E7%9A%84@Data%E6%B3%A8%E8%A7%A3%E6%8A%A5%E9%94%99%E6%89%BE%E4%B8%8D%E5%88%B0%E7%AC%A6%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>工程编译报错<br><code>java:找不到符号</code></p><h4 id="问题抽象"><a href="#问题抽象" class="headerlink" title="问题抽象"></a>问题抽象</h4><p>定位错误可以发现是getter setter的问题<br>由于采用了@Data注解，所以优先考虑是lombok的问题</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>首先排除以下可能</p><blockquote><p>lombok插件未安装<br>设置中注解处理未打开</p></blockquote><p>那么剩下的问题就是pom.xml文件中的版本设置里，调整为以下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><br>完美解决！</p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
            <tag> lombok </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven国内镜像换源</title>
      <link href="/2021/11/18/%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/05.maven%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%8D%A2%E6%BA%90/"/>
      <url>/2021/11/18/%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/05.maven%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%8D%A2%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<p> maven修改国内镜像源，提升速度，以下面的阿里镜像为例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改maven镜像需修改<code>settings.xml</code>文件，路径如下：</p><p><code>apache-maven-x.x.x\conf\settings.xml</code></p><p>定位到<mirrors>标签，修改内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 阿里云仓库 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 中央仓库1 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>repo1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo1.maven.org/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 中央仓库2 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>repo2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo2.maven.org/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 实用配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 换源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DruidDataSource异常</title>
      <link href="/2021/11/18/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/17.DruidDataSource%E5%BC%82%E5%B8%B8/"/>
      <url>/2021/11/18/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/17.DruidDataSource%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<p>部署一个开源项目报错</p><p><code>ERROR com.alibaba.druid.pool.DruidDataSource - init datasource error, url jdbcmysql://</code></p><p>很明显是数据库连接错误</p><p>但排除一下错误后，我才算找到真正的错误原因</p><blockquote><p>数据库连接地址错误</p><p>网络问题</p><p>用户名密码错误</p></blockquote><p>最后发现是开源项目自带的<code>mysql</code>驱动版本有问题，和我安装的<code>mysql</code>对不上</p><p><strong>解决方法</strong>：</p><p>去<code>pom.xml</code>中删除<code>mysql</code>的版本信息，默认即可，如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DruidDataSource </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装docker版mysql</title>
      <link href="/2021/11/18/%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/05.%E5%AE%89%E8%A3%85docker%E7%89%88mysql/"/>
      <url>/2021/11/18/%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/05.%E5%AE%89%E8%A3%85docker%E7%89%88mysql/</url>
      
        <content type="html"><![CDATA[<p>拉取镜像<br><code>docker pull mysql:5.7</code></p><p>启动mysql，并将部分配置文件映射到宿主机、</p><p><code>docker run -p 3306:3306 --name mysql -v /mydata/mysql/log:/var/log/mysql -v /mydata/mysql/data:/var/lib/mysql -v /mydata/mysql/conf:/etc/mysql -e MYSQL_ROOT_PASSWORD=root -d mysql:5.7</code><br>配置远程账号连接<br>先进入bash<code>docker exec -it mysql /bin/bash</code><br>进入mysql command <code>mysql -u root -p</code></p><blockquote><p>若密码错误，添加跳过认证的配置重设密码 不断输入<code>exit</code>回车退出bash状态<br><code>vim /mydata/mysql/conf/my.cnf</code> 追加 <code>skip-grant-tables</code>具体如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">init_connect=<span class="string">&#x27;SET collation_connection = utf8_unicode_ci&#x27;</span></span><br><span class="line">init_connect=<span class="string">&#x27;SET NAMES utf8&#x27;</span></span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_unicode_ci</span><br><span class="line">skip-character-set-client-handshake</span><br><span class="line">skip-name-resolve</span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure></p></blockquote><p>重新进入docker里的mysql command重设密码<br><code>use mysql;</code> 选择数据库<br><code>update user set authentication_string=PASSWORD(&quot;root&quot;) where user=&#39;root&#39;;</code> 重设密码<br><code>flush privileges;</code> 刷新权限</p><p>重启mysql容器，<code>docker restart mysql</code><br>收工！</p>]]></content>
      
      
      <categories>
          
          <category> 安装笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Failed to locate the winutils binary in the hadoop binary path</title>
      <link href="/2021/10/28/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/16.Failed%20to%20locate%20the%20winutils%20binary%20in%20the%20hadoop%20binary%20path/"/>
      <url>/2021/10/28/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/16.Failed%20to%20locate%20the%20winutils%20binary%20in%20the%20hadoop%20binary%20path/</url>
      
        <content type="html"><![CDATA[<h4 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h4><p>win10环境下，intellj初次运行spark程序报错<code>ERROR Shell Failed to locate the winutils binary in the hadoop binary path</code></p><p><img src="https://blog.oss.langzihan.top/images/intellj%E8%BF%90%E8%A1%8Cspark%E7%A8%8B%E5%BA%8F%E6%8A%A5%E9%94%99%20ERROR%20Shell%20Failed%20to%20locate%20the%20winutils%20binary%20in%20the%20hadoop%20binary%20path/a8075b632eb099431b8fc17bb3ae60cb.png" alt="image-20211028091940008"></p><h4 id="二、解决方案"><a href="#二、解决方案" class="headerlink" title="二、解决方案"></a>二、解决方案</h4><p>前提下载好对应版本的<a href="https://github.com/CedricXu7/winutils">winutils.exe</a>并复制到hadoop的bin目录中，然后有以下三种解决方案：</p><p>① 系统设置环境变量HADOOP_HOME，并且重启intellj以应用</p><p>② 代码块最前面设定hadoop目录，<code>System.setProperty(&quot;hadoop.home.dir&quot;,&quot;D:\\hadoop-3.2.0&quot;)</code></p><p>③ 在intellj运行配置中添加环境变量</p><p><img src="https://blog.oss.langzihan.top/images/intellj%E8%BF%90%E8%A1%8Cspark%E7%A8%8B%E5%BA%8F%E6%8A%A5%E9%94%99%20ERROR%20Shell%20Failed%20to%20locate%20the%20winutils%20binary%20in%20the%20hadoop%20binary%20path/56b80eca87ffbcd885a4b6700b80ba28.png" alt="image-20211028093018934"></p><p><img src="https://blog.oss.langzihan.top/images/intellj%E8%BF%90%E8%A1%8Cspark%E7%A8%8B%E5%BA%8F%E6%8A%A5%E9%94%99%20ERROR%20Shell%20Failed%20to%20locate%20the%20winutils%20binary%20in%20the%20hadoop%20binary%20path/28b5965924fcf9fd069b423f6ef6b65e.png" alt="image-20211028093119415"></p><p><img src="https://blog.oss.langzihan.top/images/intellj%E8%BF%90%E8%A1%8Cspark%E7%A8%8B%E5%BA%8F%E6%8A%A5%E9%94%99%20ERROR%20Shell%20Failed%20to%20locate%20the%20winutils%20binary%20in%20the%20hadoop%20binary%20path/dcfe010e4292845f12e21c63ce6e8d60.png" alt="image-20211028145647619"></p><p>收工！</p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA热部署无效</title>
      <link href="/2021/10/20/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/15.IDEA%E7%83%AD%E9%83%A8%E7%BD%B2%E6%97%A0%E6%95%88/"/>
      <url>/2021/10/20/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/15.IDEA%E7%83%AD%E9%83%A8%E7%BD%B2%E6%97%A0%E6%95%88/</url>
      
        <content type="html"><![CDATA[<p>遇到这样的问题，我觉既不是没有设置“更新类和资源”，也不是啥插件问题，更和自动编译没啥关系<br>而是没有以<strong>debug</strong>模式运行！！<br>以run模式运行的话热部署是不起作用的。</p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 热部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java中的编码转换</title>
      <link href="/2021/10/20/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/14.java%E4%B8%AD%E7%9A%84%E7%BC%96%E7%A0%81%E8%BD%AC%E6%8D%A2/"/>
      <url>/2021/10/20/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/14.java%E4%B8%AD%E7%9A%84%E7%BC%96%E7%A0%81%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p>在正常javaweb开发中经常会发现字符转换的需求，会存在中文字符转换乱码的现象，如何解决以及其转换原理我至今懵懵懂懂，于是专门写了个测试代码进行尝试，总算理清了编码，先上结论，总结如下：</p><blockquote><p>utf8中存放有各种语言编码，当前主流开发中会使用utf8进行编码解码，该方式不会产生乱码，产生乱码有以下几种情况<br>1、gbk（中文）、iso-8859-1（无中文）等其他方式进行编码，则只能用其对应方式进行解码，否则为乱码<br>2、使用utf8进行编码用其他方式解码则会导致乱码，需进行一次转换<br>3、使用无对应字符（中文）的字符集（iso-8859-1）编码会导致乱码，且无法还原解码</p></blockquote><p>以下是针对以上情况的代码测试<br>1.如何编码就如何解码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试编码转换 中文 =&gt; utf-8 编码 - 解码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test0</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">test</span> <span class="operator">=</span> <span class="string">&quot;测试&quot;</span>;</span><br><span class="line">    System.out.println(Arrays.toString(test.getBytes(StandardCharsets.UTF_8)));<span class="comment">//[-26, -75, -117, -24, -81, -107]</span></span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(test.getBytes(StandardCharsets.UTF_8), StandardCharsets.UTF_8));<span class="comment">//测试</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试编码转换 中文 =&gt; gbk 编码 - 解码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">test</span> <span class="operator">=</span> <span class="string">&quot;测试&quot;</span>;</span><br><span class="line">    System.out.println(Arrays.toString(test.getBytes(<span class="string">&quot;gbk&quot;</span>)));<span class="comment">//[-78, -30, -54, -44]</span></span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(test.getBytes(<span class="string">&quot;gbk&quot;</span>), <span class="string">&quot;GBK&quot;</span>));<span class="comment">//测试</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>utf8编码 - 错误形式解码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试编码转换 中文 =&gt; utf-8 编码- gbk解码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">test</span> <span class="operator">=</span> <span class="string">&quot;测试&quot;</span>;</span><br><span class="line">    System.out.println(Arrays.toString(test.getBytes(StandardCharsets.UTF_8)));<span class="comment">//[-26, -75, -117, -24, -81, -107]</span></span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(test.getBytes(StandardCharsets.UTF_8), <span class="string">&quot;gbk&quot;</span>));<span class="comment">//娴嬭瘯</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正确做法，按错误的解码形式（gbk）作为<strong>中转</strong>，将其按错误形式（gbk）重新<strong>还原编码</strong>（utf8-encode），再使用utf8进行一次<strong>正确解码</strong>（utf8-decode）即可得到原来的字符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试编码转换 中文 =&gt; utf-8 编码 - gbk 解码 ===&gt; gbk 编码 - utf-8解码</span></span><br><span class="line"><span class="comment"> * &quot;测试&quot; =&gt; (utf8-encode)[-26, -75, -117, -24, -81, -107] =&gt; (gbk-decode)娴嬭瘯</span></span><br><span class="line"><span class="comment"> * &quot;娴嬭瘯&quot; =&gt; (utf8-encode)[-26, -75, -117, -24, -81, -107] =&gt; (utf8-decode)&quot;测试&quot;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">test</span> <span class="operator">=</span> <span class="string">&quot;测试&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">test_gbk_utf8</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(test.getBytes(StandardCharsets.UTF_8), <span class="string">&quot;gbk&quot;</span>);</span><br><span class="line">    System.out.println(test_gbk_utf8);<span class="comment">//娴嬭瘯</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">test_utf8_gbk</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(test_gbk_utf8.getBytes(<span class="string">&quot;gbk&quot;</span>), StandardCharsets.UTF_8);</span><br><span class="line">    System.out.println(test_utf8_gbk);<span class="comment">//测试</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.无对应字符编码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">test</span> <span class="operator">=</span> <span class="string">&quot;测试&quot;</span>;</span><br><span class="line">        System.out.println(Arrays.toString(test.getBytes(StandardCharsets.ISO_8859_1)));<span class="comment">//[63, 63]</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(test.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.ISO_8859_1));<span class="comment">//??</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>该情况下即使使用原先的编码方式进行解码也无法还原字符了，属于不可逆的状态</p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编码转换 </tag>
            
            <tag> utf-8 </tag>
            
            <tag> gbk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows下查询端口占用和终结进程</title>
      <link href="/2021/10/19/%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/04.windows%E4%B8%8B%E6%9F%A5%E8%AF%A2%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E5%92%8C%E7%BB%88%E7%BB%93%E8%BF%9B%E7%A8%8B/"/>
      <url>/2021/10/19/%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/04.windows%E4%B8%8B%E6%9F%A5%E8%AF%A2%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E5%92%8C%E7%BB%88%E7%BB%93%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p> 经常在windows中部署相关服务，但是偶尔会存在端口占用导致服务启动失败的问题，可以用简单的两个命令解决该问题</p><h4 id="1-查询占用"><a href="#1-查询占用" class="headerlink" title="1.查询占用"></a>1.查询占用</h4><p>右键开始菜单中命令行程序(cmd)，以管理员身份运行，输入以下命令<br><code>netstat -aon|findstr 8080</code></p><h4 id="2-终结进程"><a href="#2-终结进程" class="headerlink" title="2.终结进程"></a>2.终结进程</h4><p>将以上查询到的信息中的PID（每行的最后一个字段）填入以下命令中执行<br><code>taskkill /f /pid 2432</code></p>]]></content>
      
      
      <categories>
          
          <category> 实用配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 端口占用 </tag>
            
            <tag> 终结进程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka+Zookeeper安装</title>
      <link href="/2021/09/26/%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/04.Kafka+Zookeeper%E5%AE%89%E8%A3%85/"/>
      <url>/2021/09/26/%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/04.Kafka+Zookeeper%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>本文安装配置环境为多个<strong>ubuntu20.04</strong> 集群，安装包皆来自apache官网，分别为<strong>kafka2.4.1 + zookeeper3.6.3 + jdk1.8</strong>，在文章末尾附上自用的zookeeper、kafka群起脚本<br><strong>注：</strong> 本文不包含jdk安装，详情见我的上一篇jdk1.8+hadoop3.2+scala2.12+spark3.1.2配置记录</p><blockquote><p><strong><em>Zookeeper3.6.3安装配置</em></strong>（已完成解压，目录为/home/hadoop/Zookeeper）</p></blockquote><p>复制配置文件并重命名<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> ~/Zookeeper/conf/zoo_sample.cfg ~/Zookeeper/conf/zoo.cfg</span><br></pre></td></tr></table></figure><br>新建Data文件夹，存放运行数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/Zookeeper/zkData</span><br></pre></td></tr></table></figure><br>修改配置文件内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The number of milliseconds of each tick</span></span><br><span class="line">tickTime=2000</span><br><span class="line"><span class="comment"># The number of ticks that the initial </span></span><br><span class="line"><span class="comment"># synchronization phase can take</span></span><br><span class="line">initLimit=10</span><br><span class="line"><span class="comment"># The number of ticks that can pass between </span></span><br><span class="line"><span class="comment"># sending a request and getting an acknowledgement</span></span><br><span class="line">syncLimit=5</span><br><span class="line"><span class="comment"># the directory where the snapshot is stored.</span></span><br><span class="line"><span class="comment"># do not use /tmp for storage, /tmp here is just </span></span><br><span class="line"><span class="comment"># example sakes.</span></span><br><span class="line">dataDir=/home/hadoop/Zookeeper/zkData</span><br><span class="line"><span class="comment"># the port at which the clients will connect</span></span><br><span class="line">clientPort=2181</span><br><span class="line"><span class="comment">#######################cluster##########################</span></span><br><span class="line">server.1=hadoop101:2888:3888</span><br><span class="line">server.2=hadoop102:2888:3888</span><br><span class="line">server.3=hadoop103:2888:3888</span><br><span class="line">server.4=hadoop104:2888:3888</span><br><span class="line"><span class="comment"># server.A=B:C:D。</span></span><br><span class="line"><span class="comment"># A，文件myid里面的数据就是A的值，位于zkData根目录；</span></span><br><span class="line"><span class="comment"># B，当前服务器地址；</span></span><br><span class="line"><span class="comment"># C，集群中Follower与Leader交换信息的端口；</span></span><br><span class="line"><span class="comment"># D，执行选举时服务器相互通信的端口。</span></span><br></pre></td></tr></table></figure><br>运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/hadoop/Zookeeper/bin/zkServer.sh start</span><br></pre></td></tr></table></figure><br>不同服务器中应修改对应的myid内容，文件路径为Zookeeper/zkData/myid<br>将该文件中的数值改成对应服务器序号即可，如我的hadoop101中保持1，hadoop102修改成2，以此类推。</p><p><strong>注：</strong> 也可参考jdk1.8+hadoop3.2+scala2.12+spark3.1.2配置记录中将bin文件夹注入到.bashrc中作为环境变量使用</p><blockquote><p><strong><em>Kafka2.4.1安装配置</em></strong>（已完成解压，目录为/home/hadoop/Kafka）</p></blockquote><p>修改Kafka/config/server.properties文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">############################# Server Basics #############################</span></span><br><span class="line"><span class="comment"># broker的全局唯一编号，不能重复</span></span><br><span class="line">broker.id=1</span><br><span class="line"><span class="comment"># 删除topic功能使用</span></span><br><span class="line">delete.topic.enable=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################# Socket Server Settings #############################</span></span><br><span class="line"><span class="comment"># 处理网络请求的线程数量</span></span><br><span class="line">num.network.threads=3</span><br><span class="line"><span class="comment"># 用来处理磁盘IO的线程数量</span></span><br><span class="line">num.io.threads=8</span><br><span class="line"><span class="comment"># 发送套接字的缓冲区大小</span></span><br><span class="line">socket.send.buffer.bytes=102400</span><br><span class="line"><span class="comment"># 接收套接字的缓冲区大小</span></span><br><span class="line">socket.receive.buffer.bytes=102400</span><br><span class="line"><span class="comment"># 请求套接字的缓冲区大小</span></span><br><span class="line">socket.request.max.bytes=104857600</span><br><span class="line"></span><br><span class="line"><span class="comment">############################# Log Basics #############################</span></span><br><span class="line"><span class="comment"># kafka运行日志存放的路径</span></span><br><span class="line">log.dirs=/home/hadoop/Kafka/logs</span><br><span class="line"><span class="comment"># topic在当前broker上的分区个数</span></span><br><span class="line">num.partitions=1</span><br><span class="line"><span class="comment"># 用来恢复和清理data目录中数据的线程数量</span></span><br><span class="line">num.recovery.threads.per.data.dir=1</span><br><span class="line"></span><br><span class="line"><span class="comment">############################# Internal Topic Settings  #############################</span></span><br><span class="line">offsets.topic.replication.factor=1</span><br><span class="line">transaction.state.log.replication.factor=1</span><br><span class="line">transaction.state.log.min.isr=1</span><br><span class="line"></span><br><span class="line"><span class="comment">############################# Log Flush Policy #############################</span></span><br><span class="line"><span class="comment"># NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################# Log Retention Policy #############################</span></span><br><span class="line"><span class="comment"># 日志segment文件保留的最长时间，超时将被删除</span></span><br><span class="line">log.retention.hours=168</span><br><span class="line"><span class="comment"># 日志段文件的最大大小，超过将新建日志段。</span></span><br><span class="line">log.segment.bytes=1073741824</span><br><span class="line"><span class="comment"># 日志段删除的时间间隔</span></span><br><span class="line">log.retention.check.interval.ms=300000</span><br><span class="line"></span><br><span class="line"><span class="comment">############################# Zookeeper #############################</span></span><br><span class="line"><span class="comment"># 配置连接Zookeeper集群地址</span></span><br><span class="line">zookeeper.connect=hadoop101:2181,hadoop102:2181,hadoop103:2181,hadoop104:2181/kafka</span><br><span class="line"><span class="comment"># 连接到ZooKeeper的超时时间(毫秒)</span></span><br><span class="line">zookeeper.connection.timeout.ms=18000</span><br><span class="line"></span><br><span class="line"><span class="comment">############################# Group Coordinator Settings #############################</span></span><br><span class="line">group.initial.rebalance.delay.ms=0</span><br></pre></td></tr></table></figure><br><strong>注：</strong> 在每个服务器中该文件中的<strong>broker.id</strong>值应不同<br>修改kafka中的zookeeper配置，文件路径：Kafka/config/zookeeper.properties，修改其中dataDir为响应路径即可，其他属性按需修改<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataDir=/home/hadoop/Zookeeper</span><br></pre></td></tr></table></figure><br>运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/hadoop/Kafka/bin/kafka-server-start.sh -daemon /home/hadoop/Kafka/config/server.properties</span><br></pre></td></tr></table></figure></p><p>当然在安装过程中也遇到不少<strong>问题</strong>，一下列出代表性问题，并给出解决方案：<br><strong>1、使用群启脚本启动kafka时日志报错：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span>: failed to run <span class="built_in">command</span> <span class="string">&#x27;java&#x27;</span>: No such file or directory</span><br></pre></td></tr></table></figure><br><strong>解决方案</strong><br>修改Kafka/bin/kafka-run-class.sh中内容，在该文件头部添加需要使用的JAVA_HOME绝对路径即可（网传在群起脚本中添加的source /etc/profile无果可采取这种办法）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=<span class="string">&quot;/home/hadoop/JDK&quot;</span></span><br></pre></td></tr></table></figure><br><strong>2、启动后kafka闪退，日志报错zookeeper连接2181超时</strong><br><strong>解决方案</strong><br>该错误有以下几点可能：</p><ol><li>防火墙策略问题</li><li>zookeeper未安装</li><li>zookeeper配置错误</li><li>zookeeper没在启动Kafka之前启动</li></ol><p><strong>3、zookeeper本地启动无问题，但群起Zookeeper脚本会导致日志报错JAVA_HOME找不到</strong><br> <strong>解决方案</strong><br> 和问题1一样，添加JAVA_HOME的绝对路径，文件路径为Zookeeper/bin/zkEnv.sh<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=<span class="string">&quot;/home/hadoop/JDK&quot;</span></span><br></pre></td></tr></table></figure><br><strong>4、群起脚本跑完后发现只有一台机器成功运行zookeeper</strong><br>重点关注上文提及的唯一编号的属性值(zookeeper:<strong>myid</strong>;kafka:<strong>broker.id</strong>)是否在每台机器上作出修改，再考虑配置错误</p><h4 id="群起脚本附录"><a href="#群起脚本附录" class="headerlink" title="群起脚本附录"></a>群起脚本附录</h4><blockquote><p>Zookeeper<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line"><span class="string">&quot;start&quot;</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">cat</span> /home/hadoop/Hadoop/etc/hadoop/workers`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;========== <span class="variable">$i</span> ==========&quot;</span></span><br><span class="line">ssh <span class="variable">$i</span> <span class="string">&quot;/home/hadoop/Zookeeper/bin/zkServer.sh start&quot;</span></span><br><span class="line"><span class="built_in">echo</span> $?</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">&#125;;;</span><br><span class="line"><span class="string">&quot;stop&quot;</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">cat</span> /home/hadoop/Hadoop/etc/hadoop/workers`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;========== <span class="variable">$i</span> ==========&quot;</span></span><br><span class="line">ssh <span class="variable">$i</span> <span class="string">&quot;/home/hadoop/Zookeeper/bin/zkServer.sh stop&quot;</span></span><br><span class="line"><span class="built_in">echo</span> $?</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">&#125;;;</span><br><span class="line"><span class="string">&quot;status&quot;</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">cat</span> /home/hadoop/Hadoop/etc/hadoop/workers`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;========== <span class="variable">$i</span> ==========&quot;</span></span><br><span class="line">ssh <span class="variable">$i</span> <span class="string">&quot;/home/hadoop/Zookeeper/bin/zkServer.sh status&quot;</span></span><br><span class="line"><span class="built_in">echo</span> $?</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">&#125;;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><br>Kafka</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line"><span class="string">&quot;start&quot;</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">cat</span> /home/hadoop/Hadoop/etc/hadoop/workers`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;========== <span class="variable">$i</span> ==========&quot;</span></span><br><span class="line">ssh <span class="variable">$i</span> <span class="string">&quot;/home/hadoop/Kafka/bin/kafka-server-start.sh -daemon /home/hadoop/Kafka/config/server.properties&quot;</span></span><br><span class="line"><span class="built_in">echo</span> $?</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">&#125;;;</span><br><span class="line"><span class="string">&quot;stop&quot;</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">cat</span> /home/hadoop/Hadoop/etc/hadoop/workers`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;========== <span class="variable">$i</span> ==========&quot;</span></span><br><span class="line">ssh <span class="variable">$i</span> <span class="string">&quot;/home/hadoop/Kafka/bin/kafka-server-stop.sh&quot;</span></span><br><span class="line"><span class="built_in">echo</span> $?</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">&#125;;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安装笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置 </tag>
            
            <tag> kafka </tag>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk1.8+hadoop3.2+scala2.12+spark3.1.2配置记录</title>
      <link href="/2021/09/16/%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/03.hadoop3.2%E4%B8%8Bspark3.1.2%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/"/>
      <url>/2021/09/16/%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/03.hadoop3.2%E4%B8%8Bspark3.1.2%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>记录下我在ubuntu20.04-用户hadoop环境下搭建jdk+hadoop+scala+spark环境的过程（不安装到root相关目录下）<br><strong>注：</strong> 该配置实际为单机模式，若需要分布式要根据具体需要修改相关文件，不同版本的搭配请参考官方文档，本文记录的版本搭配为jdk1.8+hadoop3.2+scala2.12+spark3.1.2<br>我将按照JDK、Hadoop、Scala、Spark的顺序进行记录</p><h1 id="JDK配置"><a href="#JDK配置" class="headerlink" title="JDK配置"></a>JDK配置</h1><p>官网下载jdk1.8即可，也可直接down我分享的<a href="https://cloud.189.cn/t/2EFzye2Ib6J3">链接</a><br>解压到相应目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/java</span><br><span class="line">tar -zxf jdk-8u301-linux-x64.tar.gz -C ~/java/</span><br></pre></td></tr></table></figure><p>在.bashrc中追加jdk环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># jdk1.8</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/home/hadoop/java/jdk1.8.0_301/</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib:<span class="variable">$JRE_HOME</span>/lib</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>测试java安装完成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><p><img src="https://blog.oss.langzihan.top/images/03.hadoop3.2%E4%B8%8Bspark3.1.2%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/dc88c07aa14a93731a7f89ebe9f0008c.png" alt=""></p><h1 id="Hadoop配置"><a href="#Hadoop配置" class="headerlink" title="Hadoop配置"></a>Hadoop配置</h1><p>依旧是官网下载，不过这回不要登陆，直接给<a href="https://www.apache.org/dyn/closer.cgi/hadoop/common/hadoop-3.2.0/hadoop-3.2.0.tar.gz">链接</a><br>解压到相应文件夹<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/hadoop</span><br><span class="line">tar -zxf hadoop-3.2.0.tar.gz -C ~/hadoop</span><br></pre></td></tr></table></figure><br>然后.bashrc追加环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hadoop</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=/home/hadoop/hadoop/hadoop-3.2.0</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/sbin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>做一些前置工作，什么关闭防火墙（我没有防火墙就不做演示了），按需设置主机名（ThinkStation-P330）和ip之间的映射（修改/etc/hosts，可以有效解耦hadoop配置中的IP地址，只用改这个文件不用一个个改配置），新建一个存放hadoop运行时产生的文件的文件夹<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/hadoop/hadoop-3.2.0/tmp</span><br></pre></td></tr></table></figure><br><strong>接着继续配置hadoop</strong><br>先定位到配置文件夹<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/hadoop/hadoop-3.2.0/etc/hadoop/</span><br></pre></td></tr></table></figure><br>首先是hadoop-env.sh中追加JAVA_HOME信息，这里不添加java路径的话会导致启动时报错找不到JAVA_HOME<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/home/hadoop/java/jdk1.8.0_301</span><br></pre></td></tr></table></figure><br>接下来就是按需修改配置了，core-site.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- HDFS的NameNode地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://ThinkStation-P330:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- hadoop运行时产生文件的目录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/hadoop/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><br>hdfs-site.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- HDFS副本的数量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><br>mapred-site.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设定mapreduce运行在yarn上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><br>yarn-site.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- YARN的ResourceManager地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>ThinkStation-P330<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- reducer获取数据的方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><br>首次启动需要格式化namenode<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure><br>如果报错命令不存在，你就该好好看看自己的.bashrc中的环境变量是不是出什么问题了<br>执行结果中仔细找找，在最后几行里有successfully formatted字样就说明格式化成功<br><img src="https://blog.oss.langzihan.top/images/03.hadoop3.2%E4%B8%8Bspark3.1.2%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/648f9fbc686cec48c960f6e4309393e7.png" alt=""><br>配置好免密登陆ssh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>然后就可以启动hadoop（伪）集群了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./hadoop/hadoop-3.2.0/sbin/start-all.sh</span><br></pre></td></tr></table></figure><br><img src="https://blog.oss.langzihan.top/images/03.hadoop3.2%E4%B8%8Bspark3.1.2%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/02412ad5c2c3edf8eac6c4085a3868f1.png" alt=""><br>目前就可以通过浏览器进入HDFS管理界面（<a href="http://ThinkStation-P330:9870">http://ThinkStation-P330:9870</a>)</p><p><img src="https://blog.oss.langzihan.top/images/03.hadoop3.2%E4%B8%8Bspark3.1.2%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/b8517a9754ad7b4445ccbed923ffce7e.png" alt=""></p><p>也可以进入RM管理界面（<a href="http://ThinkStation-P330:8088">http://ThinkStation-P330:8088</a>)</p><p><img src="https://blog.oss.langzihan.top/images/03.hadoop3.2%E4%B8%8Bspark3.1.2%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/2abe9562f877d8410519e1f803513f42.png" alt=""></p><p>就此一个单机式的hadoop部署完毕</p><h1 id="Scala配置"><a href="#Scala配置" class="headerlink" title="Scala配置"></a>Scala配置</h1><p>spark的前置配置，<a href="https://downloads.lightbend.com/scala/2.12.15/scala-2.12.15.tgz">下载链接</a><br>与jdk一样，依旧是解压，配置.bashrc追加环境变量<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># scala2.12</span></span><br><span class="line"><span class="built_in">export</span> SCALA_HOME=/home/hadoop/scala/scala-2.12.15</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$SCALA_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></p><h1 id="Spark配置"><a href="#Spark配置" class="headerlink" title="Spark配置"></a>Spark配置</h1><p>解压，定位到配置conf文件夹<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/spark/spark-3.1.2-bin-hadoop3.2/conf</span><br><span class="line"><span class="built_in">cp</span> spark-env.sh.template spark-env.sh</span><br><span class="line"><span class="built_in">cp</span> workers.template workers</span><br></pre></td></tr></table></figure><br>编辑spark-env.sh文件，按需追加配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/home/hadoop/java/jdk1.8.0_301</span><br><span class="line"><span class="built_in">export</span> SCALA_HOME=/home/hadoop/scala/scala-2.12.15</span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=/home/hadoop/hadoop/hadoop-3.2.0</span><br><span class="line"><span class="built_in">export</span> SPARK_HOME=/home/hadoop/spark/spark-3.1.2-bin-hadoop3.2</span><br><span class="line"><span class="built_in">export</span> HADOOP_CONF_DIR=<span class="variable">$HADOOP_HOME</span>/etc/hadoop</span><br><span class="line"><span class="built_in">export</span> SPARK_MASTER_HOST=ThinkStation-P330</span><br><span class="line"><span class="built_in">export</span> SPARK_EXECUTOR_MEMORY=1G</span><br><span class="line"><span class="built_in">export</span> SPARK_WORKER_CORES=2</span><br><span class="line"><span class="built_in">export</span> SPARK_WORKER_INSTANCES=1</span><br><span class="line"><span class="built_in">export</span> SPARK_WORKER_PORT=7078</span><br><span class="line"><span class="built_in">export</span> SPARK_MASTER_PORT=7077</span><br></pre></td></tr></table></figure><br>按需配置workers文件，单机的我就没配置，和hosts文件里差不多，目的是让不同服务器互相知道，我这就一台机子，workers不存在的~<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">localhost</span><br><span class="line"><span class="comment">#slave1</span></span><br><span class="line"><span class="comment">#slave2</span></span><br></pre></td></tr></table></figure><br>启动spark，先定位到spark根目录中的sbin文件夹中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/spark/spark-3.1.2-bin-hadoop3.2/sbin/start-all.sh</span><br></pre></td></tr></table></figure><p><strong>就此配置完成</strong>，关闭相关服务将命令中的“start”改成“stop”执行一次即可</p>]]></content>
      
      
      <categories>
          
          <category> 安装笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop </tag>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tensorflow报错显存不够的应对措施</title>
      <link href="/2021/09/13/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/13.tensorflow%E6%8A%A5%E9%94%99%E6%98%BE%E5%AD%98%E4%B8%8D%E5%A4%9F%E7%9A%84%E5%BA%94%E5%AF%B9%E6%8E%AA%E6%96%BD/"/>
      <url>/2021/09/13/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/13.tensorflow%E6%8A%A5%E9%94%99%E6%98%BE%E5%AD%98%E4%B8%8D%E5%A4%9F%E7%9A%84%E5%BA%94%E5%AF%B9%E6%8E%AA%E6%96%BD/</url>
      
        <content type="html"><![CDATA[<p>简单粗暴</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tensorflow 内存不够的情况 适用于tensorflow 2.x</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">&quot;CUDA_VISIBLE_DEVICES&quot;</span>] = <span class="string">&quot;0&quot;</span>  <span class="comment"># 指定显卡</span></span><br><span class="line">config = tf.compat.v1.ConfigProto(allow_soft_placement=<span class="literal">True</span>)  <span class="comment"># 开启软放置，OP放到CPU上了，为啥源码默认值是7？</span></span><br><span class="line">config.gpu_options.per_process_gpu_memory_fraction = <span class="number">0.3</span>  <span class="comment"># 进程最多采用30%显存，默认是1，完整使用</span></span><br><span class="line">tf.compat.v1.keras.backend.set_session(tf.compat.v1.Session(config=config))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorflow </tag>
            
            <tag> OOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决ubuntu使用Dash to dock后休眠出现重影两个dock</title>
      <link href="/2021/08/31/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/12.%E8%A7%A3%E5%86%B3ubuntu%E4%BD%BF%E7%94%A8Dash%20to%20dock%E5%90%8E%E4%BC%91%E7%9C%A0%E5%87%BA%E7%8E%B0%E9%87%8D%E5%BD%B1%E4%B8%A4%E4%B8%AAdock/"/>
      <url>/2021/08/31/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/12.%E8%A7%A3%E5%86%B3ubuntu%E4%BD%BF%E7%94%A8Dash%20to%20dock%E5%90%8E%E4%BC%91%E7%9C%A0%E5%87%BA%E7%8E%B0%E9%87%8D%E5%BD%B1%E4%B8%A4%E4%B8%AAdock/</url>
      
        <content type="html"><![CDATA[<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>卸载系统自带的Dock，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove gnome-shell-extension-ubuntu-dock</span><br></pre></td></tr></table></figure><p>如果以后需要重新使用原生dock，安装命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">udo apt install gnome-shell-extension-ubuntu-dock</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop集群搭建踩坑</title>
      <link href="/2021/08/20/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/11.hadoop%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E8%B8%A9%E5%9D%91/"/>
      <url>/2021/08/20/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/11.hadoop%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E8%B8%A9%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>问题1：</strong><br>第一次启动集群前需要将master进行hdfs格式化</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure><p>注：若以后想要再次格式化需关闭所有namenode、datanode，并删除hadoop目录下data、logs文件夹</p><blockquote><p><strong>问题2：</strong><br>启动报错“Attempting to operate on hdfs namenode as root”</p></blockquote><p>可在/etc/profile.d中添加一个sh脚本注入环境变量，脚本内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> HDFS_NAMENODE_USER=root</span><br><span class="line"><span class="built_in">export</span> HDFS_DATANODE_USER=root</span><br><span class="line"><span class="built_in">export</span> HDFS_SECONDARYNAMENODE_USER=root</span><br><span class="line"><span class="built_in">export</span> YARN_RESOURCEMANAGER_USER=root</span><br><span class="line"><span class="built_in">export</span> YARN_NODEMANAGER_USER=root</span><br></pre></td></tr></table></figure><blockquote><p><strong>问题3：</strong><br>jps命令查询后发现datanode、namenode、nodemanager都正常启动了，唯独不见resourcemanager</p></blockquote><p>启动集群时，不应直接调用./start-all.sh，应当在master上调用./start-dfs.sh，在<strong>准备部署resourcemanager的服务器</strong>上调用./start-yarn.sh</p><blockquote><p><strong>问题4：</strong><br>localhost: mv: 无法获取“XXX”状态信息</p></blockquote><p>要么是xml文件配置存在错误，要么是防火墙存在问题<br>centos7关闭开启防火墙命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#关闭防火墙：</span></span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"><span class="comment">#开启防火墙：</span></span><br><span class="line">systemctl start firewalld.service</span><br><span class="line"><span class="comment">#关闭开机启动：</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br><span class="line"><span class="comment">#开启开机启动：</span></span><br><span class="line">systemctl <span class="built_in">enable</span> firewalld.service</span><br></pre></td></tr></table></figure><blockquote><p><strong>问题5：</strong><br>secondnamenode可视化查看网页打不开</p></blockquote><p>同上</p><blockquote><p><strong>问题6：</strong><br>启动nodemanagers时报出警告“localhost: Warning: Permanently added ‘localhost’ (ECDSA) to the list of known hosts.”</p></blockquote><p>删除hadoop/etc/hadoop/workers文件中的localhost一行即可</p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集群搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python中base64模块解码报错“Incorrect padding”</title>
      <link href="/2021/08/10/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/10.python%E4%B8%ADbase64%E6%A8%A1%E5%9D%97%E8%A7%A3%E7%A0%81%E6%8A%A5%E9%94%99%E2%80%9CIncorrect%20padding%E2%80%9D/"/>
      <url>/2021/08/10/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/10.python%E4%B8%ADbase64%E6%A8%A1%E5%9D%97%E8%A7%A3%E7%A0%81%E6%8A%A5%E9%94%99%E2%80%9CIncorrect%20padding%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h4><p>解码被base64编码过的字段信息，在base64编码解码工具中正常解码，但在python下的模块base64、binascii中的b64decode、a2b_base64等方法中出现解码报错<br><strong>报错信息如下</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">---------------------------------------------------------------------------</span><br><span class="line">Error                                     Traceback (most recent call last)</span><br><span class="line">&lt;ipython-<span class="built_in">input</span>-<span class="number">11</span>-787bc11958b4&gt; <span class="keyword">in</span> get_proxies(urls)</span><br><span class="line">     <span class="number">14</span>         <span class="keyword">try</span>:</span><br><span class="line">---&gt; <span class="number">15</span>             raw = base64.b64decode(response)</span><br><span class="line">     <span class="number">16</span>         <span class="keyword">except</span> Exception <span class="keyword">as</span> r:</span><br><span class="line"></span><br><span class="line">c:\program files\python3\lib\base64.py <span class="keyword">in</span> b64decode(s, altchars, validate)</span><br><span class="line">     <span class="number">86</span>         <span class="keyword">raise</span> binascii.Error(<span class="string">&#x27;Non-base64 digit found&#x27;</span>)</span><br><span class="line">---&gt; <span class="number">87</span>     <span class="keyword">return</span> binascii.a2b_base64(s)</span><br><span class="line">     <span class="number">88</span> </span><br><span class="line"></span><br><span class="line">Error: Incorrect padding</span><br></pre></td></tr></table></figure><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>python中的base64是4个4个的读取的，所以待解码的字段应当为4的倍数，不足添‘=’</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对待解码的字段a进行判断，若为4的倍数则不变，反之缺多少补多少</span></span><br><span class="line">a = a + <span class="string">&#x27;=&#x27;</span> * (<span class="number">4</span> - <span class="built_in">len</span>(a) % <span class="number">4</span>) <span class="keyword">if</span> <span class="built_in">len</span>(a) % <span class="number">4</span> != <span class="number">0</span> <span class="keyword">else</span> a</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> base64 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytorch实现LeNet模型MNIST手写识别</title>
      <link href="/2021/08/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/00.pytorch%E5%AE%9E%E7%8E%B0LeNet%E6%A8%A1%E5%9E%8BMNIST%E6%89%8B%E5%86%99%E8%AF%86%E5%88%AB/"/>
      <url>/2021/08/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/00.pytorch%E5%AE%9E%E7%8E%B0LeNet%E6%A8%A1%E5%9E%8BMNIST%E6%89%8B%E5%86%99%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="模块导入，常量参数设定"><a href="#模块导入，常量参数设定" class="headerlink" title="模块导入，常量参数设定"></a>模块导入，常量参数设定</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets, transforms</span><br><span class="line"><span class="keyword">from</span> torchsummary <span class="keyword">import</span> summary</span><br><span class="line"></span><br><span class="line">BATCH_SIZE = <span class="number">512</span></span><br><span class="line">EPOCH = <span class="number">20</span></span><br><span class="line">DEIVCE = torch.device(<span class="string">&#x27;cuda:0&#x27;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&#x27;cpu&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="数据加载"><a href="#数据加载" class="headerlink" title="数据加载"></a>数据加载</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">train_loader = torch.utils.data.DataLoader(</span><br><span class="line">    datasets.MNIST(</span><br><span class="line">        <span class="string">&#x27;data&#x27;</span>, </span><br><span class="line">        train=<span class="literal">True</span>, </span><br><span class="line">        download=<span class="literal">False</span>,</span><br><span class="line">        transform=transforms.Compose([</span><br><span class="line">            transforms.ToTensor(),</span><br><span class="line">            transforms.Normalize((<span class="number">0.1307</span>,), (<span class="number">0.3081</span>,))</span><br><span class="line">        ])),</span><br><span class="line">    batch_size=BATCH_SIZE, shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test_loader = torch.utils.data.DataLoader(</span><br><span class="line">    datasets.MNIST(</span><br><span class="line">        <span class="string">&#x27;data&#x27;</span>, </span><br><span class="line">        train=<span class="literal">False</span>, </span><br><span class="line">        transform=transforms.Compose([</span><br><span class="line">            transforms.ToTensor(),</span><br><span class="line">            transforms.Normalize((<span class="number">0.1307</span>,), (<span class="number">0.3081</span>,))</span><br><span class="line">        ])),</span><br><span class="line">    batch_size=BATCH_SIZE, shuffle=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h1 id="LeNet模型搭建"><a href="#LeNet模型搭建" class="headerlink" title="LeNet模型搭建"></a>LeNet模型搭建</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LeNet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(LeNet, self).__init__()</span><br><span class="line">        <span class="comment"># nn.Conv2d(in_channels, out_channels, kernel_size, stride=1, padding=0,dilation=1,groups=1, bias=True）</span></span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">1</span>, <span class="number">6</span>, <span class="number">5</span>)  </span><br><span class="line">        self.pool1 = nn.MaxPool2d(<span class="number">2</span>)</span><br><span class="line">        self.conv2 = nn.Conv2d(<span class="number">6</span>, <span class="number">16</span>, <span class="number">3</span>)</span><br><span class="line">        self.pool2 = nn.MaxPool2d(<span class="number">2</span>)</span><br><span class="line">        <span class="comment"># nn.Linear(in_features, out_features, bias=True)</span></span><br><span class="line">        self.fc1   = nn.Linear(<span class="number">16</span>*<span class="number">5</span>*<span class="number">5</span>, <span class="number">120</span>)</span><br><span class="line">        self.fc2   = nn.Linear(<span class="number">120</span>, <span class="number">84</span>)</span><br><span class="line">        self.fc3   = nn.Linear(<span class="number">84</span>, <span class="number">10</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        out = F.relu(self.conv1(x))  <span class="comment"># 24</span></span><br><span class="line">        <span class="comment"># nn.MaxPool2d(kernel_size, stride=None, padding=0, dilation=1,return_indices=False,ceil_mode=False)</span></span><br><span class="line">        <span class="comment"># max_pool2d(*args, **kwargs)</span></span><br><span class="line">        out = self.pool1(out)  <span class="comment"># 12</span></span><br><span class="line">        out = F.relu(self.conv2(out))  <span class="comment"># 10</span></span><br><span class="line">        out = self.pool2(out)  <span class="comment"># 5</span></span><br><span class="line">        out = out.view(out.size(<span class="number">0</span>), -<span class="number">1</span>)  <span class="comment"># flatten</span></span><br><span class="line">        out = F.relu(self.fc1(out))</span><br><span class="line">        out = F.relu(self.fc2(out))</span><br><span class="line">        out = self.fc3(out)</span><br><span class="line">        out = F.log_softmax(out,dim=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> out</span><br></pre></td></tr></table></figure><h1 id="查看模型结构"><a href="#查看模型结构" class="headerlink" title="查看模型结构"></a>查看模型结构</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = LeNet()</span><br><span class="line">summary(model, (<span class="number">1</span>,<span class="number">28</span>,<span class="number">28</span>))  </span><br></pre></td></tr></table></figure><h1 id="模型训练测试函数"><a href="#模型训练测试函数" class="headerlink" title="模型训练测试函数"></a>模型训练测试函数</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">model = LeNet().to(device)</span><br><span class="line">optimizer = optim.Adam(model.parameters())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">device, model, train_loader, optimizer, epoch</span>):</span><br><span class="line">    model.train()</span><br><span class="line">    <span class="keyword">for</span> batch_idx, (data, target) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">        data, target = data.to(device), target.to(device)</span><br><span class="line">        optimizer.zero_grad()  <span class="comment"># zero all gradients</span></span><br><span class="line">        output = model(data)</span><br><span class="line">        loss = F.nll_loss(output, target)  <span class="comment"># calculate loss</span></span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()  <span class="comment"># update all parameters</span></span><br><span class="line">        <span class="keyword">if</span> (batch_idx + <span class="number">1</span>) % <span class="number">30</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Train Epoch <span class="subst">&#123;epoch&#125;</span> [<span class="subst">&#123;batch_idx * <span class="built_in">len</span>(data)&#125;</span>/<span class="subst">&#123;<span class="built_in">len</span>(train_loader.dataset)&#125;</span> Loss: <span class="subst">&#123;loss.item():<span class="number">.6</span>f&#125;</span>]&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">device, model, test_loader</span>):</span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    test_loss = <span class="number">0</span></span><br><span class="line">    correct = <span class="number">0</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> data, target <span class="keyword">in</span> test_loader:</span><br><span class="line">            data, target = data.to(device), target.to(device)</span><br><span class="line">            output = model(data)  <span class="comment"># predict class probability</span></span><br><span class="line">            test_loss += F.nll_loss(output, target, reduction=<span class="string">&#x27;sum&#x27;</span>).item()  <span class="comment"># superposition whole batch loss</span></span><br><span class="line">            pred = output.<span class="built_in">max</span>(<span class="number">1</span>, keepdim=<span class="literal">True</span>)[<span class="number">1</span>]  <span class="comment"># return max probability index</span></span><br><span class="line">            correct += pred.eq(target.view_as(pred)).<span class="built_in">sum</span>().item()</span><br><span class="line"></span><br><span class="line">    test_loss /= <span class="built_in">len</span>(test_loader.dataset)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;\nTest Epoch: Average loss: <span class="subst">&#123;test_loss:<span class="number">.4</span>f&#125;</span>, Accuracy: <span class="subst">&#123;correct&#125;</span>/<span class="subst">&#123;<span class="built_in">len</span>(test_loader.dataset)&#125;</span> (<span class="subst">&#123;<span class="number">100.</span> * correct / <span class="built_in">len</span>(test_loader.dataset):<span class="number">.2</span>f&#125;</span>%)\n&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="模型训练，测试"><a href="#模型训练，测试" class="headerlink" title="模型训练，测试"></a>模型训练，测试</h1><p>```python<br>for epoch in range(1, EPOCH + 1):<br>    train(DEIVCE, model, train_loader, optimizer, epoch)<br>    test(DEIVCE, model, train_loader)</p>]]></content>
      
      
      <categories>
          
          <category> 计算机视觉 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytorch </tag>
            
            <tag> LeNet </tag>
            
            <tag> mnist </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 控制台输出时刷新当前行内容</title>
      <link href="/2021/06/18/%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/03.Python%20%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E6%97%B6%E5%88%B7%E6%96%B0%E5%BD%93%E5%89%8D%E8%A1%8C%E5%86%85%E5%AE%B9/"/>
      <url>/2021/06/18/%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/03.Python%20%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E6%97%B6%E5%88%B7%E6%96%B0%E5%BD%93%E5%89%8D%E8%A1%8C%E5%86%85%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<p>今日小技巧GET<br><strong>Python 控制台输出时刷新当前行内容</strong></p><p>为了跑代码时不至于对了白屏发呆，提高用户（自己）体验，经过几次尝试，正确代码如下：<br>```python<br>import time<br>for i in range(100):<br>    time.sleep(0.1)<br>    print(“\rReading image {}/{}”.format(1+i,100),end=’’)</p>]]></content>
      
      
      <categories>
          
          <category> 实用配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cannot convert a symbolic Keras inputoutput to a numpy array</title>
      <link href="/2021/06/11/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/09.Cannot%20convert%20a%20symbolic%20Keras%20inputoutput%20to%20a%20numpy%20array/"/>
      <url>/2021/06/11/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/09.Cannot%20convert%20a%20symbolic%20Keras%20inputoutput%20to%20a%20numpy%20array/</url>
      
        <content type="html"><![CDATA[<p><strong>环境：</strong> Tensorflow2.4.1<br><strong>报错：</strong> <code>Cannot convert a symbolic Keras input/output to a numpy array. This error may indicate that you&#39;re trying to pass a symbolic value to a NumPy call, which is not supported. Or, you may be trying to pass Keras symbolic inputs/outputs to a TF API that does not register dispatching, preventing Keras from automatically converting the API call to a lambda layer in the Functional Model.</code><br><strong>产生原因：</strong> 采用了tf下的Keras 自定义损函数<br><strong>分析：</strong><br>损失函数部分代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">vae_loss</span>(<span class="params">x, x_decoded_mean</span>):</span><br><span class="line">    xent_loss = original_dim * losses.binary_crossentropy(x, x_decoded_mean)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(xent_loss))</span><br><span class="line">    kl_loss = -<span class="number">0.5</span> * K.<span class="built_in">sum</span>(<span class="number">1</span> + z_log_var - K.square(z_mean) - K.exp(z_log_var), axis=-<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(kl_loss))</span><br><span class="line">    <span class="keyword">return</span> xent_loss + kl_loss</span><br></pre></td></tr></table></figure><p>这是变分自编码的自定义损失函数，从中可以发现分别得到两种张量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xent_loss --&gt; tensorflow.python.framework.ops.Tensor</span><br><span class="line">kl_loss --&gt; tensorflow.python.keras.engine.keras_tensor.KerasTensor</span><br></pre></td></tr></table></figure><p>自定义函数的输入是KerasTensor，但是默认的loss函数输出的是Tensor，KerasTensor和Tensor是完全不同的类，kera_tensor源码中可以发现Keras可以将Tensor转成KerasTensor，但是没发现将KerasTensor转成Tensor的部分。。。<br>所以。。。我们可以说：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tensor+KerasTensor = KerasTensor</span><br></pre></td></tr></table></figure><p>但是keras自定义损失函数输入的是KerasTensor，默认输出的是Tensor，而这里会导致输出KerasTensor，所以就报错了。</p><p><strong>解决方案：</strong> 我采用的解决方案如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一般情况下采用该代码能够解决问题，可以发现函数返回结果已经转化成tensorflow.python.framework.ops.Tensor类了</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.python.framework.ops <span class="keyword">import</span> disable_eager_execution</span><br><span class="line">disable_eager_execution()</span><br></pre></td></tr></table></figure><p>所以keras还是避免使用吧，还是用的不太灵活的亚子，我还是老老实实学明白tensorflow怎么用吧~</p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorflow </tag>
            
            <tag> keras </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>屏蔽tensorflow的日志打印</title>
      <link href="/2021/06/10/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/08.%E5%B1%8F%E8%94%BDtensorflow%E7%9A%84%E6%97%A5%E5%BF%97%E6%89%93%E5%8D%B0/"/>
      <url>/2021/06/10/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/08.%E5%B1%8F%E8%94%BDtensorflow%E7%9A%84%E6%97%A5%E5%BF%97%E6%89%93%E5%8D%B0/</url>
      
        <content type="html"><![CDATA[<p>tensorflow运行时会输出一大串的日志信息<br>眼花缭乱，用以下方法可以去除错误之外的日志信息（屏蔽通知信息和警告信息）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&#x27;TF_CPP_MIN_LOG_LEVEL&#x27;</span>] = <span class="string">&#x27;2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br></pre></td></tr></table></figure><p><strong>切记：日志等级设置代码要放在导入tensorflow之前！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorflow </tag>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tensorflow-gpu、CUDA、cuDNN版本对应</title>
      <link href="/2021/06/10/%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/02.tensorflow-gpu%E3%80%81CUDA%E3%80%81cuDNN%E7%89%88%E6%9C%AC%E5%AF%B9%E5%BA%94/"/>
      <url>/2021/06/10/%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/02.tensorflow-gpu%E3%80%81CUDA%E3%80%81cuDNN%E7%89%88%E6%9C%AC%E5%AF%B9%E5%BA%94/</url>
      
        <content type="html"><![CDATA[<div class="table-container"><table><thead><tr><th>版本</th><th>Python 版本</th><th>编译器</th><th>构建工具</th><th>cuDNN</th><th>CUDA</th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><p>tensorflow_gpu-2.4.0|3.6-3.8 |MSVC 2019 |Bazel 3.1.0|8.0|11.0<br>tensorflow_gpu-2.3.0|3.5-3.8 |MSVC 2019 |Bazel 3.1.0|7.6|10.1<br>tensorflow_gpu-2.2.0|3.5-3.8 |MSVC 2019 |Bazel 2.0.0|7.6|10.1<br>tensorflow_gpu-2.1.0|3.5-3.7 |MSVC 2019 | Bazel 0.27.1-0.29.1| 7.6|10.1<br>tensorflow_gpu-2.0.0|3.5-3.7 |MSVC 2017 |Bazel 0.26.1|7.4|10<br>tensorflow_gpu-1.15.0|3.5-3.7|MSVC 2017|Bazel 0.26.1|7.4|10<br>tensorflow_gpu-1.14.0|3.5-3.7|MSVC 2017|Bazel 0.24.1-0.25.2|7.4|10<br>tensorflow_gpu-1.13.0|3.5-3.7|MSVC 2015 update 3|Bazel 0.19.0-0.21.0|7.4 |10<br>tensorflow_gpu-1.12.0|3.5-3.6|MSVC 2015 update 3|Bazel 0.15.0|7.2|9.0<br>tensorflow_gpu-1.11.0|3.5-3.6|MSVC 2015 update 3|Bazel 0.15.0|7|9<br>tensorflow_gpu-1.10.0|3.5-3.6|MSVC 2015 update 3|Cmake v3.6.3|7|9<br>tensorflow_gpu-1.9.0|3.5-3.6|MSVC 2015 update 3|Cmake v3.6.3|7|9<br>tensorflow_gpu-1.8.0|3.5-3.6|MSVC 2015 update 3|Cmake v3.6.3|7|9<br>tensorflow_gpu-1.7.0|3.5-3.6|MSVC 2015 update 3|Cmake v3.6.3|7|9<br>tensorflow_gpu-1.6.0|3.5-3.6|MSVC 2015 update 3|Cmake v3.6.3|7|9<br>tensorflow_gpu-1.5.0|3.5-3.6|MSVC 2015 update 3|Cmake v3.6.3|7|9<br>tensorflow_gpu-1.4.0|3.5-3.6|MSVC 2015 update 3|Cmake v3.6.3|6|8<br>tensorflow_gpu-1.3.0|3.5-3.6|MSVC 2015 update 3|Cmake v3.6.3|6|8<br>tensorflow_gpu-1.2.0|3.5-3.6|MSVC 2015 update 3|Cmake v3.6.3|5.1|8<br>tensorflow_gpu-1.1.0|3.5|MSVC 2015 update 3|Cmake v3.6.3|5.1|8<br>tensorflow_gpu-1.0.0|3.5|MSVC 2015 update 3|Cmake v3.6.3|5.1|8</p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/tensorflow-gpu/">tensorflow-gpu单离线包下载地址 清华镜像</a><br><a href="https://pypi.doubanio.com/simple/tensorflow-gpu/">tensorflow-gpu单离线包下载地址 豆瓣镜像</a><br><a href="https://www.nvidia.com/Download/Find.aspx?lang=en-us">N卡驱动下载地址</a><br><a href="https://developer.nvidia.com/cuda-toolkit-archive">CUDA下载地址</a><br><a href="https://developer.nvidia.com/rdp/cudnn-download">cuDNN下载地址（需登录N卡官网）</a><br><a href="https://cloud.189.cn/t/aiABVnN3uYfu">安装11版本的CUDA可能存在缺失的dll合集（bug）</a>  访问码:2vmn</p>]]></content>
      
      
      <categories>
          
          <category> 实用配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorflow-gpu </tag>
            
            <tag> cuda </tag>
            
            <tag> cuDNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单的KNN实现</title>
      <link href="/2021/06/01/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/01.%E7%AE%80%E5%8D%95%E7%9A%84KNN%E5%AE%9E%E7%8E%B0/"/>
      <url>/2021/06/01/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/01.%E7%AE%80%E5%8D%95%E7%9A%84KNN%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>KNN简介：</p><blockquote><p>k-Nearest Neighbor:kNN 即k近邻算法<br>分类问题：对新的样本，根据其<em>k</em>个最近邻的训练样本的类别，通过多数表决等方式进行预测。<br>回归问题：对新的样本，根据其<em>k</em>个最近邻的训练样本标签值的均值作为预测值。<br>优缺点：</p><ul><li>k近邻模型具有非常高的容量，这使得它在训练样本数量较大时能获得较高的精度</li><li>计算成本很高</li><li>在训练集较小时，泛化能力很差，非常容易陷入过拟合</li><li>无法判断特征的重要性</li></ul></blockquote><p>数据集采用阿里巴巴天池项目中的“<a href="https://tianchi.aliyun.com/dataset/dataDetail?dataId=50009"><strong>渔船轨迹数据</strong></a>”<br>本数据集为h5数据，运行代码目录结构如下<br><img src="https://blog.oss.langzihan.top/images/%E7%AE%80%E5%8D%95%E7%9A%84KNN%E5%AE%9E%E7%8E%B0/01312abe9175833095b0df47f4298f2a.png" alt="img"></p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">data = pd.read_hdf(<span class="string">&quot;data/hy_round1_train_20200102.h5&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(data.shape)</span><br><span class="line"><span class="built_in">print</span>(data.columns)</span><br><span class="line"><span class="comment"># 校验是否存在NaN</span></span><br><span class="line"><span class="comment"># print(np.all(pd.notnull(data)))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 载入数据集</span></span><br><span class="line">data = np.array(data)</span><br><span class="line"><span class="comment"># 量化标签</span></span><br><span class="line"><span class="comment"># print(np.where(data[:,-1] == &quot;刺网&quot;))</span></span><br><span class="line">data[np.where(data[:,-<span class="number">1</span>] == <span class="string">&quot;刺网&quot;</span>),-<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">data[np.where(data[:,-<span class="number">1</span>] == <span class="string">&quot;围网&quot;</span>),-<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">data[np.where(data[:,-<span class="number">1</span>] == <span class="string">&quot;拖网&quot;</span>),-<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(data[:,:-<span class="number">2</span>],data[:,-<span class="number">1</span>],test_size=<span class="number">0.25</span>,random_state=<span class="number">42</span>)</span><br><span class="line"><span class="comment"># 标准化（归一化存在离群点影响弊端）</span></span><br><span class="line">transfer = StandardScaler()</span><br><span class="line">x_train = transfer.fit_transform(x_train)</span><br><span class="line">x_test = transfer.fit_transform(x_test)</span><br><span class="line">y_train = y_train.astype(<span class="string">&quot;int&quot;</span>)</span><br><span class="line">y_test = y_test.astype(<span class="string">&quot;int&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型训练</span></span><br><span class="line">estimator = KNeighborsClassifier(n_neighbors=<span class="number">5</span>)</span><br><span class="line">estimator.fit(x_train,y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存模型</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;model/hy_knn_model.pickle&quot;</span>,<span class="string">&quot;wb&quot;</span>)</span><br><span class="line">pickle.dump(estimator, f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型评估</span></span><br><span class="line"><span class="comment"># 预测值</span></span><br><span class="line">y_predict = estimator.predict(x_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;模型预测结果：\n&quot;</span>, y_predict)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;真实值对比结果：\n&quot;</span>, y_test == y_predict)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准确率</span></span><br><span class="line">score = estimator.score(x_test,y_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;模型准确率：&quot;</span>,score)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows环境下matplotlib图片中中文显示异常</title>
      <link href="/2021/04/28/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/07.windows%E7%8E%AF%E5%A2%83%E4%B8%8Bmatplotlib%E5%9B%BE%E7%89%87%E4%B8%AD%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA%E5%BC%82%E5%B8%B8/"/>
      <url>/2021/04/28/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/07.windows%E7%8E%AF%E5%A2%83%E4%B8%8Bmatplotlib%E5%9B%BE%E7%89%87%E4%B8%AD%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h1><p>windows环境，python3，正确使用matplotlib绘图后存在的中文显示异常问题</p><h1 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h1><p>1.找到当前python环境下如下文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lib\\site-packages\\matplotlib\\mpl-data\\matplotlibrc</span><br></pre></td></tr></table></figure><p>2.采用notepad++（文本编辑器）打开matplotlibrc</p><p>ctrl+f 搜索 font.family</p><p>根据定位寻找到”font.family“和”font.sans-serif“字段</p><p>取消注释或直接改成如下形式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">font.family: sans-serif</span><br><span class="line">font.sans-serif: SimHei,Bitstream Vera Sans, Lucida Grande, Verdana, Geneva, Lucid, Arial, Helvetica, Avant Garde, sans-serif</span><br></pre></td></tr></table></figure><br>如果存在负号显示异常则可以在添加一行<br><code>axes.unicode_minus:False</code><br>保存文件，重新加载python环境</p><p><img src="https://blog.oss.langzihan.top/images/windows%E7%8E%AF%E5%A2%83%E4%B8%8Bmatplotlib%E5%9B%BE%E7%89%87%E4%B8%AD%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA%E5%BC%82%E5%B8%B8/4105835f08e5ea4f73a5cd1c726fe47f.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> matplotlib </tag>
            
            <tag> 中文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis安装踩坑</title>
      <link href="/2021/03/21/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/06.Redis%E5%AE%89%E8%A3%85%E8%B8%A9%E5%9D%91/"/>
      <url>/2021/03/21/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/06.Redis%E5%AE%89%E8%A3%85%E8%B8%A9%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p>本章记录：Redis6.0.6安装于Ubuntu中遇到的坑</p><p>注：使用前记得<code>apt-get update</code>一下</p><p><strong>报错1：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python@python:/usr/local/redis$ sudo make</span><br><span class="line">sudo: make: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure><p>==解决方案：==</p><p><code>sudo apt-get install make</code></p><p><strong>报错2：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">make[3]: cc: Command not found</span><br><span class="line">make[3]: *** [Makefile:201: net.o] Error 127</span><br><span class="line">make[3]: Leaving directory <span class="string">&#x27;/usr/local/redis/deps/hiredis&#x27;</span></span><br><span class="line">make[2]: *** [Makefile:50: hiredis] Error 2</span><br><span class="line">make[2]: Leaving directory <span class="string">&#x27;/usr/local/redis/deps&#x27;</span></span><br><span class="line">make[1]: [Makefile:264: persist-settings] Error 2 (ignored)</span><br><span class="line">    CC adlist.o</span><br><span class="line">/bin/sh: 1: cc: not found</span><br><span class="line">make[1]: *** [Makefile:315: adlist.o] Error 127</span><br><span class="line">make[1]: Leaving directory <span class="string">&#x27;/usr/local/redis/src&#x27;</span></span><br><span class="line">make: *** [Makefile:6: all] Error 2</span><br></pre></td></tr></table></figure><p>解决方案：</p><p><code>sudo apt-get install gcc</code></p><p><strong>报错3：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cc: error: ../deps/hiredis/libhiredis.a: No such file or directory</span><br><span class="line">cc: error: ../deps/lua/src/liblua.a: No such file or directory</span><br><span class="line">make[1]: *** [Makefile:283: redis-server] Error 1</span><br><span class="line">make[1]: Leaving directory <span class="string">&#x27;/usr/local/redis/src&#x27;</span></span><br><span class="line">make: *** [Makefile:6: all] Error 2</span><br></pre></td></tr></table></figure><p>解决方案：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> deps/</span><br><span class="line">make lua hiredis linenoise</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">sudo make</span><br></pre></td></tr></table></figure></p><p><strong>报错4：</strong></p><p><code>You need tcl 8.5 or newer in order to run the Redis test</code></p><p>解决方案：</p><p><a href="https://langzihan.lanzouy.com/iHzaHn5obfi">tcl8.6.1-src.tar.gz</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf tcl8.6.1-src.tar.gz</span><br><span class="line"><span class="built_in">cd</span> tcl8.6.1/unix/</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu换源笔记</title>
      <link href="/2020/12/27/%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/01.ubuntu%E6%8D%A2%E6%BA%90%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/12/27/%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/01.ubuntu%E6%8D%A2%E6%BA%90%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="1-备份源"><a href="#1-备份源" class="headerlink" title="1.备份源"></a>1.备份源</h4><p>ctrl+alt+t打开终端</p><p><code>sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</code></p><h4 id="2-打开源文件"><a href="#2-打开源文件" class="headerlink" title="2.打开源文件"></a>2.打开源文件</h4><p>用gedit打开源文件，ctrl+a全选删除，并粘贴更换源（任选一个）</p><p> <code>sudo gedit /etc/apt/sources.list</code></p><h5 id="bfsu源"><a href="#bfsu源" class="headerlink" title="bfsu源"></a>bfsu源</h5><p>18.04 LTS(<code>bionic</code>) 换源</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.bfsu.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb https://mirrors.bfsu.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.bfsu.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.bfsu.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br></pre></td></tr></table></figure><h5 id="清华源"><a href="#清华源" class="headerlink" title="清华源"></a>清华源</h5><p>20.04 LTS(<code>focal</code>) 换源</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br></pre></td></tr></table></figure><h4 id="3-更新源"><a href="#3-更新源" class="headerlink" title="3.更新源"></a>3.更新源</h4><p><code>sudo apt-get update</code></p>]]></content>
      
      
      <categories>
          
          <category> 实用配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 换源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode-2. 两数相加</title>
      <link href="/2020/09/24/%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/01.Leetcode-2.%20%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
      <url>/2020/09/24/%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/01.Leetcode-2.%20%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
      
        <content type="html"><![CDATA[<p>LeetCode链表问题：</p><p>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)  两个已知链表对象ListNode l1, ListNode l2<br>输出：7 -&gt; 0 -&gt; 8<br>原因：342 + 465 = 807</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">1((2)) --&gt; 2((4)) --&gt; 3((3))</span><br><span class="line">4((5))--&gt; 5((6)) --&gt; 6((4))</span><br></pre></td></tr></table></figure><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">7((7)) --&gt; 8((0)) --&gt; 9((7))</span><br></pre></td></tr></table></figure><p><strong>备注：</strong>一开始是真没看懂题目。。。后来发现是反向存储的链表结构，又发现不知道ListNode这个类，，万事开头难，看着大家的方案题解，也琢磨了一份，并给出了详细的注释，算是留个笔记吧，继续努力！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class="line">        <span class="comment">//记录结果，用于最后返回</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">        <span class="comment">//存储过程中的游标</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cursor</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="comment">//保存进位</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">carry</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//计算共同长度的部分</span></span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="literal">null</span> &amp;&amp; l2 != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sumVal</span> <span class="operator">=</span> l1.val + l2.val + carry;</span><br><span class="line">            cursor.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(sumVal % <span class="number">10</span>);</span><br><span class="line">            <span class="comment">//计算进位</span></span><br><span class="line">            carry = sumVal / <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//下一节点</span></span><br><span class="line">            l1 = l1.next;</span><br><span class="line">            l2 = l2.next;</span><br><span class="line">            cursor = cursor.next;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//根据剩余长度构建存储节点</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">overplus</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        overplus = l1 != <span class="literal">null</span> ? l1 : l2;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span>(overplus != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sumVal</span> <span class="operator">=</span> overplus.val + carry;</span><br><span class="line">            cursor.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(sumVal % <span class="number">10</span>);</span><br><span class="line">            <span class="comment">//计算进位</span></span><br><span class="line">            carry = sumVal / <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//下一节点</span></span><br><span class="line">            overplus = overplus.next;</span><br><span class="line">            cursor = cursor.next;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//判断是否有进位残留</span></span><br><span class="line">        <span class="keyword">if</span>(carry != <span class="number">0</span>)&#123;</span><br><span class="line">            cursor.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(carry);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> root.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法详解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拉取github项目后Visual Studio 2017 报错system未定义识别符</title>
      <link href="/2020/08/08/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/05.%E6%8B%89%E5%8F%96github%E9%A1%B9%E7%9B%AE%E5%90%8EVisual%20Studio%202017%20%E6%8A%A5%E9%94%99system%E6%9C%AA%E5%AE%9A%E4%B9%89%E8%AF%86%E5%88%AB%E7%AC%A6/"/>
      <url>/2020/08/08/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/05.%E6%8B%89%E5%8F%96github%E9%A1%B9%E7%9B%AE%E5%90%8EVisual%20Studio%202017%20%E6%8A%A5%E9%94%99system%E6%9C%AA%E5%AE%9A%E4%B9%89%E8%AF%86%E5%88%AB%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>我在实验室的电脑上的<strong>VS2017</strong>上编写好了相关代码，为了能够在自己电脑上也能同步编写，我配置好了github进行版本控制，采用推送和拉取进行项目同步，<strong>但是</strong>在我笔记本上拉取后程序却报出了<strong>未定义识别符</strong>的错误。</p><p><img src="https://blog.oss.langzihan.top/images/%E6%8B%89%E5%8F%96github%E9%A1%B9%E7%9B%AE%E5%90%8EVisual%20Studio%202017%20%E6%8A%A5%E9%94%99system%E6%9C%AA%E5%AE%9A%E4%B9%89%E8%AF%86%E5%88%AB%E7%AC%A6/371fa24a1f3f76c146b4df9370c93560.png" alt="img"></p><h4 id="问题抽象"><a href="#问题抽象" class="headerlink" title="问题抽象"></a>问题抽象</h4><p>1.VS的集成编程环境</p><p>2.非本机构建的C++项目</p><p>3.程序本身没有问题，但拉取克隆到本机后出现了“未定义识别符”错误</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>其实通过上面的问题抽象我已经能够推断问题原因了，出在了非本机项目的问题上，说明是环境不同所致，所以解决方案如下：</p><p><code>右键解决方案</code> &gt;&gt; <code>属性</code> &gt;&gt; <code>常规</code> &gt;&gt; <code>Windows SDK 版本</code></p><p>换到本机安装的对应版本即可！</p><p><img src="https://blog.oss.langzihan.top/images/%E6%8B%89%E5%8F%96github%E9%A1%B9%E7%9B%AE%E5%90%8EVisual%20Studio%202017%20%E6%8A%A5%E9%94%99system%E6%9C%AA%E5%AE%9A%E4%B9%89%E8%AF%86%E5%88%AB%E7%AC%A6/a968f6580e926a253130e19aa945ad6e.png" alt="img"></p><p><img src="https://blog.oss.langzihan.top/images/%E6%8B%89%E5%8F%96github%E9%A1%B9%E7%9B%AE%E5%90%8EVisual%20Studio%202017%20%E6%8A%A5%E9%94%99system%E6%9C%AA%E5%AE%9A%E4%B9%89%E8%AF%86%E5%88%AB%E7%AC%A6/ff94d5799aa6ae857274a73bfe5118dc.png" alt="img"></p><p>收工！</p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 未识别标识符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用keras搭建一个简单的一维卷积神经网络</title>
      <link href="/2019/12/16/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/02.%E7%94%A8keras%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E4%B8%80%E7%BB%B4%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
      <url>/2019/12/16/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/02.%E7%94%A8keras%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E4%B8%80%E7%BB%B4%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h4 id="编程环境"><a href="#编程环境" class="headerlink" title="编程环境"></a>编程环境</h4><p>python 3.6.8</p><p>tensorflow 1.12.3 <a href="https://pypi.tuna.tsinghua.edu.cn/packages/05/8c/cb9c5d8105f467b078e78ff73d7c9d3d0a1a42bac2f485f35fca7a4638f8/tensorflow-1.12.3-cp36-cp36m-win_amd64.whl">离线包</a></p><p>matplotlib 3.1.2</p><p>numpy 1.17.4</p><h4 id="数据集说明"><a href="#数据集说明" class="headerlink" title="数据集说明"></a>数据集说明</h4><p>我所采用的数据集，是我自己构建的一个网络流量数据集，借鉴了Wei Wang等人端到端的思想，</p><p>但是处理成的数据集却不同于他们的MNIST型数据集，而是采用的npy进行存储。</p><p>由于只是用于测试模型搭建，该数据集仅包含了一部分数据（Chat流量），</p><p>原数据来源于加拿大网络安全研究所的公开数据集(<a href="https://www.unb.ca/cic/datasets/vpn.html">ISCX2016</a>)</p><h4 id="模型代码"><a href="#模型代码" class="headerlink" title="模型代码"></a>模型代码</h4><p>训练模型部分：训练模型部分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.keras.layers <span class="keyword">import</span> Dense, Dropout, Activation, Flatten, Conv1D, MaxPool1D</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"> </span><br><span class="line">os.environ[<span class="string">&#x27;TF_CPP_MIN_LOG_LEVEL&#x27;</span>] = <span class="string">&#x27;2&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 数据集路径</span></span><br><span class="line">dataset_path = <span class="string">&#x27;dataset.npy&#x27;</span></span><br><span class="line"><span class="comment"># 接入softmax的全连接层维数</span></span><br><span class="line">dense_num = <span class="number">6</span></span><br><span class="line"><span class="comment"># 保存的模型文件路径</span></span><br><span class="line">model_file = <span class="string">&#x27;model/cnn_6traffic_model.h5&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据集存储结构</span></span><br><span class="line"><span class="comment"># [training_images, training_labels, validation_images, validation_labels, testing_images, testing_labels]</span></span><br><span class="line">data = np.load(dataset_path, allow_pickle=<span class="literal">True</span>)</span><br><span class="line"> </span><br><span class="line">x_train, y_train, x_test, y_test = np.array(data[<span class="number">0</span>]), np.array(data[<span class="number">1</span>]), np.array(data[<span class="number">2</span>]), np.array(data[<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(x_train.shape, y_train.shape)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 一维化</span></span><br><span class="line">X_train = x_train.reshape(-<span class="number">1</span>, <span class="number">784</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># print(X_train)</span></span><br><span class="line"><span class="comment"># X_train = X_train.astype(&#x27;float32&#x27;)</span></span><br><span class="line">X_test = x_test.reshape(-<span class="number">1</span>, <span class="number">784</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># X_test = X_test.astype(&#x27;float32&#x27;)</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 将像素值做归一化，也就是从0~255的取值压缩到0~1之间</span></span><br><span class="line"><span class="comment"># X_train /= 255</span></span><br><span class="line"><span class="comment"># X_test /= 255</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 构建模型</span></span><br><span class="line">model = keras.models.Sequential()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 卷积层1 + relu</span></span><br><span class="line"><span class="comment"># 25 卷积核的数量 即输出的维度</span></span><br><span class="line"><span class="comment"># 3 每个过滤器的长度</span></span><br><span class="line">model.add(Conv1D(<span class="number">32</span>, <span class="number">3</span>, activation=<span class="string">&#x27;relu&#x27;</span>, input_shape=(<span class="number">784</span>, <span class="number">1</span>), padding=<span class="string">&quot;same&quot;</span>))</span><br><span class="line"><span class="comment"># 池化层1</span></span><br><span class="line">model.add(MaxPool1D(pool_size=<span class="number">3</span>, strides=<span class="number">3</span>))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 卷积层2 + relu</span></span><br><span class="line">model.add(Conv1D(<span class="number">64</span>, <span class="number">3</span>, strides=<span class="number">1</span>, activation=<span class="string">&#x27;relu&#x27;</span>, padding=<span class="string">&#x27;same&#x27;</span>))</span><br><span class="line"><span class="comment"># 池化层2</span></span><br><span class="line">model.add(MaxPool1D(pool_size=<span class="number">3</span>, strides=<span class="number">3</span>))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 神经元随机失活</span></span><br><span class="line">model.add(Dropout(<span class="number">0.25</span>))</span><br><span class="line"><span class="comment"># 拉成一维数据</span></span><br><span class="line">model.add(Flatten())</span><br><span class="line"><span class="comment"># 全连接层1</span></span><br><span class="line">model.add(Dense(<span class="number">1024</span>))</span><br><span class="line"><span class="comment"># 激活层</span></span><br><span class="line">model.add(Activation(<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 随机失活</span></span><br><span class="line">model.add(Dropout(<span class="number">0.4</span>))</span><br><span class="line"><span class="comment"># 全连接层2</span></span><br><span class="line">model.add(Dense(dense_num))</span><br><span class="line"><span class="comment"># Softmax评分</span></span><br><span class="line">model.add(Activation(<span class="string">&#x27;softmax&#x27;</span>))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看定义的模型</span></span><br><span class="line">model.summary()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 自定义优化器参数</span></span><br><span class="line"><span class="comment"># rmsprop = keras.optimizers.RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># lr表示学习速率</span></span><br><span class="line"><span class="comment"># decay是学习速率的衰减系数(每个epoch衰减一次)</span></span><br><span class="line"><span class="comment"># momentum表示动量项</span></span><br><span class="line"><span class="comment"># Nesterov的值是False或者True，表示使不使用Nesterov momentum</span></span><br><span class="line">sgd = keras.optimizers.SGD(lr=<span class="number">0.01</span>, decay=<span class="number">1e-4</span>, momentum=<span class="number">0.9</span>, nesterov=<span class="literal">True</span>)</span><br><span class="line"> </span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;sgd&#x27;</span>, loss=<span class="string">&#x27;sparse_categorical_crossentropy&#x27;</span>, metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 训练</span></span><br><span class="line">history = model.fit(X_train, y_train, epochs=<span class="number">10</span>, batch_size=<span class="number">1000</span>,</span><br><span class="line">                    verbose=<span class="number">1</span>, validation_data=[X_test, y_test])</span><br><span class="line"> </span><br><span class="line">model.save(model_file)</span><br><span class="line"><span class="built_in">print</span>(history.params)</span><br></pre></td></tr></table></figure><p>注：神经网络初涉，有啥问题请直接指出，谢谢！有流量识别领域的小伙伴欢迎打扰！相互交流！</p><p>说明：鉴于很多人问我数据集的问题，但写这个文章时所用的仅有“Chat”的流量的数据集我已经删除了，所以我在这里提供了包含有我已处理好的六类网络流量的npy数据集，有需要的自取<a href="https://cloud.189.cn/t/meIVFnfiUJFf">天翼云盘地址</a>(访问码:hp8m)，鉴于之前的数据集是二分类的，但我提供的数据集的六个标签，所以代码中需要做出相应修改，我已将修改后的代码附上了。</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷积神经网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性回归的推导与简单的一元线性回归代码实现</title>
      <link href="/2019/12/16/%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/00.%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%9A%84%E6%8E%A8%E5%AF%BC%E4%B8%8E%E7%AE%80%E5%8D%95%E7%9A%84%E4%B8%80%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/12/16/%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/00.%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%9A%84%E6%8E%A8%E5%AF%BC%E4%B8%8E%E7%AE%80%E5%8D%95%E7%9A%84%E4%B8%80%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>直入正题，一元线性回归就是一次函数，即 $y=kx+b$</p><p>在线性函数中，$x$就是自变量，即模型需要输入的数据，$y$就是因变量，即我们需要预测的值</p><p>我们如何拟合一条符合数据变化趋势的曲线呢？这就要涉及误差值了，因为拟合出来的曲线能否代表数据特征，我们需要一个评判标准</p><p>曲线绝对无法完全拟合到每一个数据点上，但是我们能在这种拟合中寻找最优的那条曲线，评判依据就是误差值，什么是这里的误差值呢？</p><h4 id="公式推导"><a href="#公式推导" class="headerlink" title="公式推导"></a>公式推导</h4><p>在这里我们将误差设为$e$，$e=y-kx-b$鉴于误差存在正负的波动所以我们以$|e|$来代表误差的大小，要求最小的误差，即求$|e|$的最小值</p><p>在整个训练数据集中就求：$\sum_{n=i}^{n}|e|$的最小值，将公式进行推导，如下：</p><script type="math/tex; mode=display">{min}(\sum_{n=i}^n|e|)\Rightarrow{min}(\sum_{n=i}^n e^2)\Rightarrow{min}(\sum_{n=i}^n ({y_{i}-kx_i-b})^2)</script><p>令S为：</p><script type="math/tex; mode=display">S =\sum_{n=i}^n ({y_{i}-kx_i-b})^2</script><p>为求S的极值，需要对k，b求偏导，并使其等于0，最后求出k，b的值用于代码的编写：</p><script type="math/tex; mode=display">\begin{cases}\frac{\partial S}{\partial k} = 2 \times \sum_{i=1}^n (y_i-kx_i-b)(-x_i) \\\\\\\frac{\partial S}{\partial b} = 2 \times \sum_{i=1}^n (y_i-kx_i-b)(-1)\end{cases}</script><script type="math/tex; mode=display">\Rightarrow\begin{cases}b = \frac{\sum_{i=1}^n (y_i-kx_i)}{n} = \frac{\sum_{i=1}^n y_i-k \sum_{i=1}^{n} x_i}{n}\\\\\\k = \frac{n\times\sum_{i=1}^n x_iy_i-\sum_{i=1}^n y_i\times\sum_{i=1}^n x_i}{n\times\sum_{i=1}^n x^2 - (\sum_{i=1}^n x_i)^2}\end{cases}</script><p>以下是代码部分，采用python语言编写：</p><h4 id="生成测试数据"><a href="#生成测试数据" class="headerlink" title="生成测试数据"></a>生成测试数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = np.random.uniform(-<span class="number">10</span>,<span class="number">10</span>,size=<span class="number">100</span>)</span><br><span class="line">y = <span class="number">.4</span> * x + <span class="number">3</span> + np.random.uniform(-<span class="number">1</span>,<span class="number">1</span>,size=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;dataset/simulation_data_1d.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">100</span>):</span><br><span class="line">    line = <span class="built_in">str</span>(x[i]) + <span class="string">&#x27;,&#x27;</span> + <span class="built_in">str</span>(y[i])</span><br><span class="line">    f.write(line)</span><br><span class="line">    f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(x,y,<span class="string">&#x27;b.&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="编写算法部分"><a href="#编写算法部分" class="headerlink" title="编写算法部分"></a>编写算法部分</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">data = <span class="built_in">open</span>(<span class="string">&#x27;dataset/simulation_data_1d.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line"><span class="comment"># print(data.split(&#x27;\n&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据读取</span></span><br><span class="line">x = []</span><br><span class="line">y = []</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> data.split(<span class="string">&#x27;\n&#x27;</span>):</span><br><span class="line">    <span class="keyword">if</span> item != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        item = item.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        x.append(<span class="built_in">float</span>(item[<span class="number">0</span>]))</span><br><span class="line">        y.append(<span class="built_in">float</span>(item[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据集构建</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">seperateData</span>(<span class="params">x, y, test_scale</span>):</span><br><span class="line">    <span class="comment"># 将x，y进行矩阵组合</span></span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">for</span> _x <span class="keyword">in</span> x:</span><br><span class="line">        i = x.index(_x)</span><br><span class="line">        data.append([])</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(_x) == <span class="string">&#x27;list&#x27;</span>:</span><br><span class="line">            <span class="keyword">for</span> feature <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(_x)):</span><br><span class="line">                data[i].append(feature)</span><br><span class="line">            data[i].append(y[i])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            data[i].append(_x)</span><br><span class="line">            data[i].append(y[i])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 切割数据集</span></span><br><span class="line">    train = []</span><br><span class="line">    test = []</span><br><span class="line">    random.seed(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">        count = random.random()</span><br><span class="line">        <span class="keyword">if</span> count &gt; test_scale:</span><br><span class="line">            train.append(data[i])</span><br><span class="line">        <span class="keyword">elif</span> count &lt; test_scale:</span><br><span class="line">            test.append(data[i])</span><br><span class="line">    <span class="keyword">return</span> train, test</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">train, test = seperateData(x, y, <span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理成能够用于模型训练的数据结构</span></span><br><span class="line">X_train = []</span><br><span class="line">Y_train = []</span><br><span class="line">X_test = []</span><br><span class="line">Y_test = []</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> train:</span><br><span class="line">    X_train.append(item[:-<span class="number">1</span>])</span><br><span class="line">    Y_train.append(item[-<span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> test:</span><br><span class="line">    X_test.append(item[:-<span class="number">1</span>])</span><br><span class="line">    Y_test.append(item[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">Xsum = <span class="number">0.0</span></span><br><span class="line">Ysum = <span class="number">0.0</span></span><br><span class="line">XY = <span class="number">0.0</span></span><br><span class="line">X2sum = <span class="number">0.0</span></span><br><span class="line">n = <span class="built_in">len</span>(Y_train)</span><br><span class="line"><span class="comment"># 推导的算法结果部分的实现</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    Xsum += X_train[i][<span class="number">0</span>]</span><br><span class="line">    Ysum += Y_train[i]</span><br><span class="line">    XY += X_train[i][<span class="number">0</span>] * Y_train[i]</span><br><span class="line">    X2sum += X_train[i][<span class="number">0</span>] ** <span class="number">2</span></span><br><span class="line">k = (n * XY - Xsum * Ysum) / (n * X2sum  - Xsum ** <span class="number">2</span>)</span><br><span class="line">b = (Ysum - k * Xsum) / n</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;拟合的曲线：y =&quot;</span>,k,<span class="string">&quot;* x +&quot;</span>,b)</span><br><span class="line"></span><br><span class="line">plt.plot(X_train, Y_train, <span class="string">&#x27;b.&#x27;</span>)</span><br><span class="line">plt.plot(X_test, Y_test, <span class="string">&#x27;r*&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;Trian_Area&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Trian_Price&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制拟合的曲线</span></span><br><span class="line">Y = []</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> X_test:</span><br><span class="line">    Y.append(k * item[<span class="number">0</span>] + b)</span><br><span class="line">plt.plot(X_test, Y, <span class="string">&#x27;g-&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><strong>总结：</strong>我jio的还口以，如有错误欢迎指正</p>]]></content>
      
      
      <categories>
          
          <category> 算法详解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法推导 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>护眼色数值</title>
      <link href="/2019/08/05/%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/00.%E6%8A%A4%E7%9C%BC%E8%89%B2%E6%95%B0%E5%80%BC/"/>
      <url>/2019/08/05/%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/00.%E6%8A%A4%E7%9C%BC%E8%89%B2%E6%95%B0%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>咳咳，今天写个记录，记录自用护眼色</p><p>十六进制颜色如下：</p><p><code>#CCE8CF</code></p>]]></content>
      
      
      <categories>
          
          <category> 实用配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 护眼色 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tensorboard使用时scalars没有任何内容</title>
      <link href="/2019/04/20/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/04.tensorboard%E4%BD%BF%E7%94%A8%E6%97%B6scalars%E6%B2%A1%E6%9C%89%E4%BB%BB%E4%BD%95%E5%86%85%E5%AE%B9/"/>
      <url>/2019/04/20/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/04.tensorboard%E4%BD%BF%E7%94%A8%E6%97%B6scalars%E6%B2%A1%E6%9C%89%E4%BB%BB%E4%BD%95%E5%86%85%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>使用windows上的tensorboard时，明明正确生成了graph，但是在logdir参数中赋上绝对路径后进入web板中没有任何数据显示</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>1.打开命令行，cd到生成graph的目录 ==OR== 到目录下shift+右键菜单“在此处打开Powershell窗口”</p><p>2.命令框中直接输入<br> <code>tensorboard --logdir=&quot;./&quot;</code></p><p>简单暴力！</p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorboard </tag>
            
            <tag> scalars </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于HTTP网络代理的校园网（局域网）网络共享</title>
      <link href="/2019/04/01/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/03.%E5%9F%BA%E4%BA%8EHTTP%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86%E7%9A%84%E6%A0%A1%E5%9B%AD%E7%BD%91%EF%BC%88%E5%B1%80%E5%9F%9F%E7%BD%91%EF%BC%89%E7%BD%91%E7%BB%9C%E5%85%B1%E4%BA%AB/"/>
      <url>/2019/04/01/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/03.%E5%9F%BA%E4%BA%8EHTTP%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86%E7%9A%84%E6%A0%A1%E5%9B%AD%E7%BD%91%EF%BC%88%E5%B1%80%E5%9F%9F%E7%BD%91%EF%BC%89%E7%BD%91%E7%BB%9C%E5%85%B1%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>嗯，校园网欠费了，但是宿舍这里无法登陆，显示欠费，实验室的电脑使用的网关是可以登陆正常上网的！不显示欠费！内网远程实验室桌面，没问题，是不是有点麻烦？既然能远程，那说明可以通过代理实现网络数据的转发！网络共享，自己动手丰衣足食！</p><h4 id="问题抽象"><a href="#问题抽象" class="headerlink" title="问题抽象"></a>问题抽象</h4><p>同一局域网内，有一台电脑可以上网，想要通过这台电脑，使得其他电脑或者移动设备可以上网</p><h4 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h4><p>可以上网的电脑：Windows7及以上系统，或者能够部署HTTP代理服务器的皆可</p><p>其他电脑或移动设备：安装有支持全局HTTP网络代理功能的软件，系统自带支持全局亦可</p><h4 id="我的实际环境"><a href="#我的实际环境" class="headerlink" title="我的实际环境"></a>我的实际环境</h4><p>可以上网的电脑：<code>Windows 10 1703 专业版</code></p><p>其他电脑或移动设备：<code>Android</code> &amp; <code>Windows 10</code> 1703 专业版 &amp; <code>iPhone</code></p><p>支持全局HTTP的软件：</p><p>  <code>Android</code> : 系统自带的WLAN中的HTTP代理 或 Adguard(或使用手机版SSR、v2ray等可以实现全局代理流量、支持转发sock或http的app）</p><p>  <code>iPhone</code> : 系统自带的WLAN中的HTTP代理 或 支持HTTP全局代理即可（小飞机）</p><p>  <code>Windows</code> : SStap | Adguard</p><p>代理服务器部署：<code>CCproxy</code></p><h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4><p>① 完成相关软件的安装</p><p>② 配置CCproxy</p><p><img src="https://blog.oss.langzihan.top/images/%E5%9F%BA%E4%BA%8EHTTP%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86%E7%9A%84%E6%A0%A1%E5%9B%AD%E7%BD%91%EF%BC%88%E5%B1%80%E5%9F%9F%E7%BD%91%EF%BC%89%E7%BD%91%E7%BB%9C%E5%85%B1%E4%BA%AB/63bfe808300973c1c9e51edc06b8f894.png" alt="img"></p><p><img src="https://blog.oss.langzihan.top/images/%E5%9F%BA%E4%BA%8EHTTP%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86%E7%9A%84%E6%A0%A1%E5%9B%AD%E7%BD%91%EF%BC%88%E5%B1%80%E5%9F%9F%E7%BD%91%EF%BC%89%E7%BD%91%E7%BB%9C%E5%85%B1%E4%BA%AB/45f1a15bd9a443b225c7946b950b38e2.png" alt="img"></p><p><img src="https://blog.oss.langzihan.top/images/%E5%9F%BA%E4%BA%8EHTTP%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86%E7%9A%84%E6%A0%A1%E5%9B%AD%E7%BD%91%EF%BC%88%E5%B1%80%E5%9F%9F%E7%BD%91%EF%BC%89%E7%BD%91%E7%BB%9C%E5%85%B1%E4%BA%AB/d8534dff83bc79004557c6e93ef7e49c.png" alt="img"></p><p><img src="https://blog.oss.langzihan.top/images/%E5%9F%BA%E4%BA%8EHTTP%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86%E7%9A%84%E6%A0%A1%E5%9B%AD%E7%BD%91%EF%BC%88%E5%B1%80%E5%9F%9F%E7%BD%91%EF%BC%89%E7%BD%91%E7%BB%9C%E5%85%B1%E4%BA%AB/70f5df78eccfe8beddea6a51308689ac.png" alt="img"></p><p>③ 配置需要网络的电脑或移动设备的HTTP代理</p><p>服务器地址就是可上网电脑CCproxy中绑定的内网地址</p><p>端口是CCproxy中配置HTTP的端口号</p><p>用户密码若有则是CCproxy新建的用户名与密码</p><p>若无置空即可</p><p>④ 可以上网了</p><h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>当然以上通过CCproxy的HTTP代理实现的网络共享，同样也可在可上网的电脑上安装node.js搭建SSR服务器，通过SStap可实现SSR的连接，但某些情况下由于有UDP的转发，性能可能不太稳定</p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP代理 </tag>
            
            <tag> 网络共享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python3使用scapy.rdpcap的解码问题</title>
      <link href="/2019/03/14/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/02.python3%E4%BD%BF%E7%94%A8scapy.rdpcap%E7%9A%84%E8%A7%A3%E7%A0%81%E9%97%AE%E9%A2%98/"/>
      <url>/2019/03/14/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/02.python3%E4%BD%BF%E7%94%A8scapy.rdpcap%E7%9A%84%E8%A7%A3%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>为了实现流量的特征提取</p><p>我使用scapy实现抓包数据的读取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> rdpcap</span><br><span class="line"> </span><br><span class="line">a = rdpcap(<span class="string">&#x27;target.pcap&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>但是print的数据却很不人性化如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b&#x27;\x00\x0c)\n\xf1\r\x00PV\xc0\x00\x08\x08\x00E\x00\x00\xa2Z\t@\x00@\x06\xb8z\xc0\xa8S\x01\xc0\xa8S\x80,]#\x8cH_\xc5\xa4L\xed0=P\x18\x01\x00\xff\x8b\x00\x00POST /getname HTTP/1.1\r\nHOST: 192.168.83.128:9100\r\ncontent-type: application/json\r\ncontent-length: 17\r\n\r\n&#123;&quot;name&quot;:&quot;kslaaa&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure><p>这哪是人看的</p><p>所以需要加上一个参数</p><p><code>mysummary</code>，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> rdpcap</span><br><span class="line"> </span><br><span class="line">a = rdpcap(<span class="string">&#x27;target.pcap&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">3</span>].mysummary)</span><br></pre></td></tr></table></figure><p>print出来如下，咳咳，稍微有点人性化，至少可以处理了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bound method Ether.mysummary of &lt;Ether  dst=00:0c:29:0a:f1:0d src=00:50:56:c0:00:08 type=0x800 |&lt;IP  version=4 ihl=5 tos=0x0 len=162 id=23049 flags=DF frag=0 ttl=64 proto=tcp chksum=0xb87a src=192.168.83.1 dst=192.168.83.128 |&lt;TCP  sport=11357 dport=9100 seq=1214236068 ack=1290612797 dataofs=5 reserved=0 flags=PA window=256 chksum=0xff8b urgptr=0 |&lt;Raw  load=&#x27;POST /getname HTTP/1.1\r\nHOST: 192.168.83.128:9100\r\ncontent-type: application/json\r\ncontent-length: 17\r\n\r\n&#123;&quot;name&quot;:&quot;kslaaa&quot;&#125;&#x27; |&gt;&gt;&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 流量解包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Python的支持向量机-鸢尾花</title>
      <link href="/2019/03/09/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/00.%E5%9F%BA%E4%BA%8EPython%E7%9A%84%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA-%E9%B8%A2%E5%B0%BE%E8%8A%B1/"/>
      <url>/2019/03/09/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/00.%E5%9F%BA%E4%BA%8EPython%E7%9A%84%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA-%E9%B8%A2%E5%B0%BE%E8%8A%B1/</url>
      
        <content type="html"><![CDATA[<p>初次尝试编写的支持向量机实例<br>鸢尾花二属性支持向量分类也比较适合我这种新手<br>网上有人多写过，但是我尝试这写时才发现有一堆问题<br>不知是版本问题还是模块方法被废弃了<br>几经波折整理出能正常运行的python代码<br>环境为python3.7</p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> colors</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">iris_type</span>(<span class="params">s</span>):</span><br><span class="line">    it = &#123;<span class="string">b&#x27;Iris-setosa&#x27;</span>: <span class="number">0</span>, <span class="string">b&#x27;Iris-versicolor&#x27;</span>: <span class="number">1</span>, <span class="string">b&#x27;Iris-virginica&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> it[s]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_accuracy</span>(<span class="params">a, b, tip</span>):</span><br><span class="line">    acc = a.ravel() == b.ravel()</span><br><span class="line">    <span class="built_in">print</span>(tip + <span class="string">&#x27;正确率：&#x27;</span>, np.mean(acc))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">path = <span class="string">&#x27;iris.data&#x27;</span></span><br><span class="line">data = np.loadtxt(path, dtype=<span class="built_in">float</span>, delimiter=<span class="string">&#x27;,&#x27;</span>, converters=&#123;<span class="number">4</span>: iris_type&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将Iris分为训练集与测试集</span></span><br><span class="line"><span class="comment"># split(数据，分割位置，轴=1（水平分割） or 0（垂直分割）)</span></span><br><span class="line">x, y = np.split(data, (<span class="number">4</span>,), axis=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># x取样本X的所有行和前两列，进行特征向量训练</span></span><br><span class="line">x = x[:, :<span class="number">2</span>]</span><br><span class="line"><span class="comment"># train_test_split(train_data,train_target,test_size=数字, random_state=0)</span></span><br><span class="line"><span class="comment"># train_data：所要划分的样本特征集</span></span><br><span class="line"><span class="comment"># train_target：所要划分的样本结果</span></span><br><span class="line"><span class="comment"># test_size：样本占比，如果是整数的话就是样本的数量</span></span><br><span class="line"><span class="comment"># random_state：是随机数的种子</span></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(x, y, train_size=<span class="number">0.6</span>, test_size=<span class="number">0.4</span>, random_state=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练svm分类器</span></span><br><span class="line"><span class="comment"># kernel=&#x27;linear&#x27;时，为线性核，C越大分类效果越好，但有可能会过拟合（defaul C=1）。</span></span><br><span class="line"><span class="comment"># kernel=&#x27;rbf&#x27;时（default），为高斯核，gamma值越小，分类界面越连续</span></span><br><span class="line"><span class="comment"># gamma值越大，分类界面越“散”，分类效果越好，但有可能会过拟合。</span></span><br><span class="line"><span class="comment"># ecision_function_shape=&#x27;ovr&#x27;时，为one v rest</span></span><br><span class="line"><span class="comment"># 即一个类别与其他类别进行划分，</span></span><br><span class="line"><span class="comment"># decision_function_shape=&#x27;ovo&#x27;时，为one v one</span></span><br><span class="line"><span class="comment"># 即将类别两两之间进行划分，用二分类的方法模拟多分类的结果。</span></span><br><span class="line">clf = svm.SVC(C=<span class="number">0.8</span>, kernel=<span class="string">&#x27;rbf&#x27;</span>, gamma=<span class="number">20</span>, decision_function_shape=<span class="string">&#x27;ovr&#x27;</span>)</span><br><span class="line">clf.fit(x_train, y_train.ravel())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算svc分类器的准确率</span></span><br><span class="line"><span class="built_in">print</span>(clf.score(x_train, y_train))  <span class="comment"># 精度</span></span><br><span class="line">y_hat = clf.predict(x_train)</span><br><span class="line">show_accuracy(y_hat, y_train, <span class="string">&#x27;训练集&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(clf.score(x_test, y_test))</span><br><span class="line">y_hat = clf.predict(x_test)</span><br><span class="line">show_accuracy(y_hat, y_test, <span class="string">&#x27;测试集&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&#x27;decision_function:\n&#x27;, clf.decision_function(x_train))</span></span><br><span class="line"><span class="comment"># print(&#x27;\npredict:\n&#x27;, clf.predict(x_train))</span></span><br><span class="line"></span><br><span class="line">x1_min, x1_max = x[:, <span class="number">0</span>].<span class="built_in">min</span>(), x[:, <span class="number">0</span>].<span class="built_in">max</span>()  <span class="comment"># 第0列的范围</span></span><br><span class="line">x2_min, x2_max = x[:, <span class="number">1</span>].<span class="built_in">min</span>(), x[:, <span class="number">1</span>].<span class="built_in">max</span>()  <span class="comment"># 第1列的范围</span></span><br><span class="line">x1, x2 = np.mgrid[x1_min:x1_max:<span class="number">200j</span>, x2_min:x2_max:<span class="number">200j</span>]  <span class="comment"># 生成网格采样点</span></span><br><span class="line">grid_test = np.stack((x1.flat, x2.flat), axis=<span class="number">1</span>)  <span class="comment"># 测试点</span></span><br><span class="line">grid_hat = clf.predict(grid_test)   <span class="comment"># 预测分类值</span></span><br><span class="line">grid_hat = grid_hat.reshape(x1.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定默认字体</span></span><br><span class="line">mpl.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">u&#x27;SimHei&#x27;</span>]</span><br><span class="line">mpl.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制</span></span><br><span class="line">cm_light = colors.ListedColormap([<span class="string">&#x27;#A0FFA0&#x27;</span>, <span class="string">&#x27;#FFA0A0&#x27;</span>, <span class="string">&#x27;#A0A0FF&#x27;</span>])</span><br><span class="line">cm_dark = colors.ListedColormap([<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;b&#x27;</span>])</span><br><span class="line">plt.pcolormesh(x1, x2, grid_hat, cmap=cm_light)</span><br><span class="line">plt.scatter(x[:, <span class="number">0</span>], x[:, <span class="number">1</span>], c=np.squeeze(y), edgecolors=<span class="string">&#x27;k&#x27;</span>, s=<span class="number">50</span>, cmap=cm_dark)  <span class="comment"># 样本</span></span><br><span class="line">plt.scatter(x_test[:, <span class="number">0</span>], x_test[:, <span class="number">1</span>], s=<span class="number">120</span>, facecolors=<span class="string">&#x27;none&#x27;</span>, zorder=<span class="number">10</span>)  <span class="comment"># 圈中测试集样本</span></span><br><span class="line">plt.xlabel(<span class="string">u&#x27;花萼长度&#x27;</span>, fontsize=<span class="number">13</span>)</span><br><span class="line">plt.ylabel(<span class="string">u&#x27;花萼宽度&#x27;</span>, fontsize=<span class="number">13</span>)</span><br><span class="line">plt.xlim(x1_min, x1_max)</span><br><span class="line">plt.ylim(x2_min, x2_max)</span><br><span class="line">plt.title(<span class="string">u&#x27;鸢尾花SVM二特征分类&#x27;</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>方便没有数据的小伙伴，以下数据直接复制到<code>iris.data</code>中即可</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line">5.1,3.5,1.4,0.2,Iris-setosa</span><br><span class="line">4.9,3.0,1.4,0.2,Iris-setosa</span><br><span class="line">4.7,3.2,1.3,0.2,Iris-setosa</span><br><span class="line">4.6,3.1,1.5,0.2,Iris-setosa</span><br><span class="line">5.0,3.6,1.4,0.2,Iris-setosa</span><br><span class="line">5.4,3.9,1.7,0.4,Iris-setosa</span><br><span class="line">4.6,3.4,1.4,0.3,Iris-setosa</span><br><span class="line">5.0,3.4,1.5,0.2,Iris-setosa</span><br><span class="line">4.4,2.9,1.4,0.2,Iris-setosa</span><br><span class="line">4.9,3.1,1.5,0.1,Iris-setosa</span><br><span class="line">5.4,3.7,1.5,0.2,Iris-setosa</span><br><span class="line">4.8,3.4,1.6,0.2,Iris-setosa</span><br><span class="line">4.8,3.0,1.4,0.1,Iris-setosa</span><br><span class="line">4.3,3.0,1.1,0.1,Iris-setosa</span><br><span class="line">5.8,4.0,1.2,0.2,Iris-setosa</span><br><span class="line">5.7,4.4,1.5,0.4,Iris-setosa</span><br><span class="line">5.4,3.9,1.3,0.4,Iris-setosa</span><br><span class="line">5.1,3.5,1.4,0.3,Iris-setosa</span><br><span class="line">5.7,3.8,1.7,0.3,Iris-setosa</span><br><span class="line">5.1,3.8,1.5,0.3,Iris-setosa</span><br><span class="line">5.4,3.4,1.7,0.2,Iris-setosa</span><br><span class="line">5.1,3.7,1.5,0.4,Iris-setosa</span><br><span class="line">4.6,3.6,1.0,0.2,Iris-setosa</span><br><span class="line">5.1,3.3,1.7,0.5,Iris-setosa</span><br><span class="line">4.8,3.4,1.9,0.2,Iris-setosa</span><br><span class="line">5.0,3.0,1.6,0.2,Iris-setosa</span><br><span class="line">5.0,3.4,1.6,0.4,Iris-setosa</span><br><span class="line">5.2,3.5,1.5,0.2,Iris-setosa</span><br><span class="line">5.2,3.4,1.4,0.2,Iris-setosa</span><br><span class="line">4.7,3.2,1.6,0.2,Iris-setosa</span><br><span class="line">4.8,3.1,1.6,0.2,Iris-setosa</span><br><span class="line">5.4,3.4,1.5,0.4,Iris-setosa</span><br><span class="line">5.2,4.1,1.5,0.1,Iris-setosa</span><br><span class="line">5.5,4.2,1.4,0.2,Iris-setosa</span><br><span class="line">4.9,3.1,1.5,0.1,Iris-setosa</span><br><span class="line">5.0,3.2,1.2,0.2,Iris-setosa</span><br><span class="line">5.5,3.5,1.3,0.2,Iris-setosa</span><br><span class="line">4.9,3.1,1.5,0.1,Iris-setosa</span><br><span class="line">4.4,3.0,1.3,0.2,Iris-setosa</span><br><span class="line">5.1,3.4,1.5,0.2,Iris-setosa</span><br><span class="line">5.0,3.5,1.3,0.3,Iris-setosa</span><br><span class="line">4.5,2.3,1.3,0.3,Iris-setosa</span><br><span class="line">4.4,3.2,1.3,0.2,Iris-setosa</span><br><span class="line">5.0,3.5,1.6,0.6,Iris-setosa</span><br><span class="line">5.1,3.8,1.9,0.4,Iris-setosa</span><br><span class="line">4.8,3.0,1.4,0.3,Iris-setosa</span><br><span class="line">5.1,3.8,1.6,0.2,Iris-setosa</span><br><span class="line">4.6,3.2,1.4,0.2,Iris-setosa</span><br><span class="line">5.3,3.7,1.5,0.2,Iris-setosa</span><br><span class="line">5.0,3.3,1.4,0.2,Iris-setosa</span><br><span class="line">7.0,3.2,4.7,1.4,Iris-versicolor</span><br><span class="line">6.4,3.2,4.5,1.5,Iris-versicolor</span><br><span class="line">6.9,3.1,4.9,1.5,Iris-versicolor</span><br><span class="line">5.5,2.3,4.0,1.3,Iris-versicolor</span><br><span class="line">6.5,2.8,4.6,1.5,Iris-versicolor</span><br><span class="line">5.7,2.8,4.5,1.3,Iris-versicolor</span><br><span class="line">6.3,3.3,4.7,1.6,Iris-versicolor</span><br><span class="line">4.9,2.4,3.3,1.0,Iris-versicolor</span><br><span class="line">6.6,2.9,4.6,1.3,Iris-versicolor</span><br><span class="line">5.2,2.7,3.9,1.4,Iris-versicolor</span><br><span class="line">5.0,2.0,3.5,1.0,Iris-versicolor</span><br><span class="line">5.9,3.0,4.2,1.5,Iris-versicolor</span><br><span class="line">6.0,2.2,4.0,1.0,Iris-versicolor</span><br><span class="line">6.1,2.9,4.7,1.4,Iris-versicolor</span><br><span class="line">5.6,2.9,3.6,1.3,Iris-versicolor</span><br><span class="line">6.7,3.1,4.4,1.4,Iris-versicolor</span><br><span class="line">5.6,3.0,4.5,1.5,Iris-versicolor</span><br><span class="line">5.8,2.7,4.1,1.0,Iris-versicolor</span><br><span class="line">6.2,2.2,4.5,1.5,Iris-versicolor</span><br><span class="line">5.6,2.5,3.9,1.1,Iris-versicolor</span><br><span class="line">5.9,3.2,4.8,1.8,Iris-versicolor</span><br><span class="line">6.1,2.8,4.0,1.3,Iris-versicolor</span><br><span class="line">6.3,2.5,4.9,1.5,Iris-versicolor</span><br><span class="line">6.1,2.8,4.7,1.2,Iris-versicolor</span><br><span class="line">6.4,2.9,4.3,1.3,Iris-versicolor</span><br><span class="line">6.6,3.0,4.4,1.4,Iris-versicolor</span><br><span class="line">6.8,2.8,4.8,1.4,Iris-versicolor</span><br><span class="line">6.7,3.0,5.0,1.7,Iris-versicolor</span><br><span class="line">6.0,2.9,4.5,1.5,Iris-versicolor</span><br><span class="line">5.7,2.6,3.5,1.0,Iris-versicolor</span><br><span class="line">5.5,2.4,3.8,1.1,Iris-versicolor</span><br><span class="line">5.5,2.4,3.7,1.0,Iris-versicolor</span><br><span class="line">5.8,2.7,3.9,1.2,Iris-versicolor</span><br><span class="line">6.0,2.7,5.1,1.6,Iris-versicolor</span><br><span class="line">5.4,3.0,4.5,1.5,Iris-versicolor</span><br><span class="line">6.0,3.4,4.5,1.6,Iris-versicolor</span><br><span class="line">6.7,3.1,4.7,1.5,Iris-versicolor</span><br><span class="line">6.3,2.3,4.4,1.3,Iris-versicolor</span><br><span class="line">5.6,3.0,4.1,1.3,Iris-versicolor</span><br><span class="line">5.5,2.5,4.0,1.3,Iris-versicolor</span><br><span class="line">5.5,2.6,4.4,1.2,Iris-versicolor</span><br><span class="line">6.1,3.0,4.6,1.4,Iris-versicolor</span><br><span class="line">5.8,2.6,4.0,1.2,Iris-versicolor</span><br><span class="line">5.0,2.3,3.3,1.0,Iris-versicolor</span><br><span class="line">5.6,2.7,4.2,1.3,Iris-versicolor</span><br><span class="line">5.7,3.0,4.2,1.2,Iris-versicolor</span><br><span class="line">5.7,2.9,4.2,1.3,Iris-versicolor</span><br><span class="line">6.2,2.9,4.3,1.3,Iris-versicolor</span><br><span class="line">5.1,2.5,3.0,1.1,Iris-versicolor</span><br><span class="line">5.7,2.8,4.1,1.3,Iris-versicolor</span><br><span class="line">6.3,3.3,6.0,2.5,Iris-virginica</span><br><span class="line">5.8,2.7,5.1,1.9,Iris-virginica</span><br><span class="line">7.1,3.0,5.9,2.1,Iris-virginica</span><br><span class="line">6.3,2.9,5.6,1.8,Iris-virginica</span><br><span class="line">6.5,3.0,5.8,2.2,Iris-virginica</span><br><span class="line">7.6,3.0,6.6,2.1,Iris-virginica</span><br><span class="line">4.9,2.5,4.5,1.7,Iris-virginica</span><br><span class="line">7.3,2.9,6.3,1.8,Iris-virginica</span><br><span class="line">6.7,2.5,5.8,1.8,Iris-virginica</span><br><span class="line">7.2,3.6,6.1,2.5,Iris-virginica</span><br><span class="line">6.5,3.2,5.1,2.0,Iris-virginica</span><br><span class="line">6.4,2.7,5.3,1.9,Iris-virginica</span><br><span class="line">6.8,3.0,5.5,2.1,Iris-virginica</span><br><span class="line">5.7,2.5,5.0,2.0,Iris-virginica</span><br><span class="line">5.8,2.8,5.1,2.4,Iris-virginica</span><br><span class="line">6.4,3.2,5.3,2.3,Iris-virginica</span><br><span class="line">6.5,3.0,5.5,1.8,Iris-virginica</span><br><span class="line">7.7,3.8,6.7,2.2,Iris-virginica</span><br><span class="line">7.7,2.6,6.9,2.3,Iris-virginica</span><br><span class="line">6.0,2.2,5.0,1.5,Iris-virginica</span><br><span class="line">6.9,3.2,5.7,2.3,Iris-virginica</span><br><span class="line">5.6,2.8,4.9,2.0,Iris-virginica</span><br><span class="line">7.7,2.8,6.7,2.0,Iris-virginica</span><br><span class="line">6.3,2.7,4.9,1.8,Iris-virginica</span><br><span class="line">6.7,3.3,5.7,2.1,Iris-virginica</span><br><span class="line">7.2,3.2,6.0,1.8,Iris-virginica</span><br><span class="line">6.2,2.8,4.8,1.8,Iris-virginica</span><br><span class="line">6.1,3.0,4.9,1.8,Iris-virginica</span><br><span class="line">6.4,2.8,5.6,2.1,Iris-virginica</span><br><span class="line">7.2,3.0,5.8,1.6,Iris-virginica</span><br><span class="line">7.4,2.8,6.1,1.9,Iris-virginica</span><br><span class="line">7.9,3.8,6.4,2.0,Iris-virginica</span><br><span class="line">6.4,2.8,5.6,2.2,Iris-virginica</span><br><span class="line">6.3,2.8,5.1,1.5,Iris-virginica</span><br><span class="line">6.1,2.6,5.6,1.4,Iris-virginica</span><br><span class="line">7.7,3.0,6.1,2.3,Iris-virginica</span><br><span class="line">6.3,3.4,5.6,2.4,Iris-virginica</span><br><span class="line">6.4,3.1,5.5,1.8,Iris-virginica</span><br><span class="line">6.0,3.0,4.8,1.8,Iris-virginica</span><br><span class="line">6.9,3.1,5.4,2.1,Iris-virginica</span><br><span class="line">6.7,3.1,5.6,2.4,Iris-virginica</span><br><span class="line">6.9,3.1,5.1,2.3,Iris-virginica</span><br><span class="line">5.8,2.7,5.1,1.9,Iris-virginica</span><br><span class="line">6.8,3.2,5.9,2.3,Iris-virginica</span><br><span class="line">6.7,3.3,5.7,2.5,Iris-virginica</span><br><span class="line">6.7,3.0,5.2,2.3,Iris-virginica</span><br><span class="line">6.3,2.5,5.0,1.9,Iris-virginica</span><br><span class="line">6.5,3.0,5.2,2.0,Iris-virginica</span><br><span class="line">6.2,3.4,5.4,2.3,Iris-virginica</span><br><span class="line">5.9,3.0,5.1,1.8,Iris-virginica</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 支持向量机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>输入字体之间的间隔突然变大了</title>
      <link href="/2019/01/05/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/01.%E8%BE%93%E5%85%A5%E5%AD%97%E4%BD%93%E4%B9%8B%E9%97%B4%E7%9A%84%E9%97%B4%E9%9A%94%E7%AA%81%E7%84%B6%E5%8F%98%E5%A4%A7%E4%BA%86/"/>
      <url>/2019/01/05/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/01.%E8%BE%93%E5%85%A5%E5%AD%97%E4%BD%93%E4%B9%8B%E9%97%B4%E7%9A%84%E9%97%B4%E9%9A%94%E7%AA%81%E7%84%B6%E5%8F%98%E5%A4%A7%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<p>额，这个问题之前也遇到几次，后来莫名其妙变好了</p><p>我就没深究</p><hr><p>最近写代码又出现了这种情况</p><p>就是敲了个快捷键，就变成</p><p><img src="https://blog.oss.langzihan.top/images/%E8%BE%93%E5%85%A5%E5%AD%97%E4%BD%93%E4%B9%8B%E9%97%B4%E7%9A%84%E9%97%B4%E9%9A%94%E7%AA%81%E7%84%B6%E5%8F%98%E5%A4%A7%E4%BA%86/edb59183fa22484ad86737c995ec703a.png" alt="img"></p><p>后来发现是IDE的快捷键和输入法快捷键冲突了</p><hr><p>解决方法：</p><p>按一下 <strong>shift+空格键</strong> 就好啦~</p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字体变大 </tag>
            
            <tag> 输入法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置PLSQL远程连接虚拟机中的Oracle数据库</title>
      <link href="/2018/10/25/%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/02.%E9%85%8D%E7%BD%AEPLSQL%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84Oracle%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2018/10/25/%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/02.%E9%85%8D%E7%BD%AEPLSQL%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84Oracle%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前提：</p><p>1、虚拟机中已成功安装Oracle数据库</p><p>2、配置了监听器</p><p>3、下载安装PLSQL</p></blockquote><p>好了，直接进入正题</p><h4 id="第一步：安装instantclient"><a href="#第一步：安装instantclient" class="headerlink" title="第一步：安装instantclient"></a>第一步：安装instantclient</h4><p>安装甲骨文提供的instantclient作为本地电脑的配置客户端</p><p>这里也提供一个官网的<a href="https://www.oracle.com/technetwork/topics/winx64soft-089540.html">传送门</a>下载页面 ，可以根据需要下载</p><p>该客户端解压即可用</p><h4 id="第二步：配置instantclient"><a href="#第二步：配置instantclient" class="headerlink" title="第二步：配置instantclient"></a>第二步：配置instantclient</h4><p>我提供的资源则直接修改配置即可，从官网down下来的客户端是没有<code>network</code>文件夹的</p><p>需要在文件夹中新建一个<code>network</code>文件夹以及子文件夹<code>admin</code>（也可以不建）</p><p>从安装了oracle数据库的服务端目录<code>product\11.2.0\client_1\network\admin</code>中拷贝一份<code>tnsnames.ora</code>文件</p><p>将<code>tnsnames.ora</code>文件放入<code>network</code>文件夹中</p><p>以下是我的<code>tnsnames.ora</code>配置仅供参考：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tnsnames.ora Network Configuration File: /u01/app/oracle/product/11.2.0.4/network/admin/tnsnames.ora</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Generated by Oracle configuration tools.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ORCL</span> =</span><br><span class="line">  (<span class="attr">DESCRIPTION</span> =</span><br><span class="line">    (<span class="attr">ADDRESS</span> = (PROTOCOL = TCP)(HOST = <span class="number">192.168</span>.<span class="number">1.128</span>)(PORT = <span class="number">1521</span>))</span><br><span class="line">    (<span class="attr">CONNECT_DATA</span> =</span><br><span class="line">      (<span class="attr">SERVER</span> = DEDICATED)</span><br><span class="line">      (<span class="attr">SERVICE_NAME</span> = ORCL)</span><br><span class="line">    )</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><p>以文本格式打开<code>tnsnames.ora</code>，前面两行注释不用管，</p><p><code>PROTOCOL</code>是远程监听器的协议类型，</p><p><code>HOST</code>是远程服务器地址，<code>PORT</code>自然是端口</p><p><code>SERVICE_NAME</code>则是你远程数据库的实例名称，默认安装的话是<code>ORCL</code></p><p>如果是安装在虚拟机中的数据库，连接时记得关闭虚拟机防火墙</p><p>到这里instantclient就配置完了</p><h4 id="第三步：配置PLSQL"><a href="#第三步：配置PLSQL" class="headerlink" title="第三步：配置PLSQL"></a>第三步：配置PLSQL</h4><p>打开PLSQL，关闭登录界面直接进入软件界面</p><p><code>Configure</code> &gt; <code>Preferences</code> &gt; <code>连接</code></p><p>找到右侧面板中的<code>Oracle</code>主目录名和<code>OCI</code>库</p><p>Oracle主目录名中填入<code>instantclient的解压地址</code></p><p>OCI库则是填入instantclient的解压地址<code>/oci.dll</code>，也就是定位到OCI类库</p><p>类似于我这样：</p><p><img src="https://blog.oss.langzihan.top/images/%E9%85%8D%E7%BD%AEPLSQL%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84Oracle%E6%95%B0%E6%8D%AE%E5%BA%93/4c1b83fb06663d7fb3d9882015cd8384.png" alt="20181025114415144"></p><p>确认并重启PLSQL</p><p>此时的登录界面就可以检测到在<code>tnsnames.ora</code>中配置的数据库实例了</p><p>输入对应的用户名密码即可登录数据库，收工！</p>]]></content>
      
      
      <categories>
          
          <category> 安装笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库可视化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pycharm默认输入状态是insert状态，选中文字无法直接输入替换或删除</title>
      <link href="/2018/07/19/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/00.Pycharm%E9%BB%98%E8%AE%A4%E8%BE%93%E5%85%A5%E7%8A%B6%E6%80%81%E6%98%AFinsert%E7%8A%B6%E6%80%81%EF%BC%8C%E9%80%89%E4%B8%AD%E6%96%87%E5%AD%97%E6%97%A0%E6%B3%95%E7%9B%B4%E6%8E%A5%E8%BE%93%E5%85%A5%E6%9B%BF%E6%8D%A2%E6%88%96%E5%88%A0%E9%99%A4/"/>
      <url>/2018/07/19/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/00.Pycharm%E9%BB%98%E8%AE%A4%E8%BE%93%E5%85%A5%E7%8A%B6%E6%80%81%E6%98%AFinsert%E7%8A%B6%E6%80%81%EF%BC%8C%E9%80%89%E4%B8%AD%E6%96%87%E5%AD%97%E6%97%A0%E6%B3%95%E7%9B%B4%E6%8E%A5%E8%BE%93%E5%85%A5%E6%9B%BF%E6%8D%A2%E6%88%96%E5%88%A0%E9%99%A4/</url>
      
        <content type="html"><![CDATA[<p>最近开始学习python，使用Pycharm编辑器进行学习过程中却发现：</p><p>打开一个新的py文件，我的光标处于加粗状态，也就是编程软件经常出现的insert插入编辑模式，我就点击了一下insert按键，退出了这个模式，但是我每次打开都是会处于这种模式，并且选中的文字无法通过键盘输入直接替换或删除，只能一个一个删除再写。。。</p><p><img src="https://blog.oss.langzihan.top/images/Pycharm%E9%BB%98%E8%AE%A4%E8%BE%93%E5%85%A5%E7%8A%B6%E6%80%81%E6%98%AFinsert%E7%8A%B6%E6%80%81%EF%BC%8C%E9%80%89%E4%B8%AD%E6%96%87%E5%AD%97%E6%97%A0%E6%B3%95%E7%9B%B4%E6%8E%A5%E8%BE%93%E5%85%A5%E6%9B%BF%E6%8D%A2%E6%88%96%E5%88%A0%E9%99%A4/7a29d2af0e39ac0824bc24c3b3dade78.jpeg" alt="img"></p><p>于是闲着无聊时，去翻了翻前辈们的博文，终于发现，是那个第一次安装Pycharm时推荐我安装的仿Vim插件搞的鬼~~</p><p>所以如果遇到以上情况只要跑去工具栏中，把Tools下的Vim Emulator勾选状态去掉即可，我的天，这算是给自己挖的坑吗。。。</p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pycharm </tag>
            
            <tag> insert编辑模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在VMware+centos6.5的基础上安装Oracle（下）</title>
      <link href="/2018/07/12/%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/01.%E5%9C%A8VMware+centos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/2018/07/12/%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/01.%E5%9C%A8VMware+centos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>上一节已经应该熟悉了终端的基本操作，这一节将执行更多的命令。</p><h3 id="1-添加用户组与用户"><a href="#1-添加用户组与用户" class="headerlink" title="1 添加用户组与用户"></a>1 添加用户组与用户</h3><p>接着上一节，首先完成用户组和用户的添加，以root账号登陆系统，打开终端，输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">groupadd oinstall</span><br><span class="line">groupadd dba</span><br><span class="line">useradd -g oinstall -g dba -m oracle</span><br><span class="line">passwd oracle   <span class="comment">#该命令会让你两次确认密码</span></span><br></pre></td></tr></table></figure><p>然后创建相关目录，并给用户赋予访问修改权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span>  -p  /data/app/oracle/product/11.2.0.1</span><br><span class="line"><span class="built_in">mkdir</span>  -p  /home/&#123;OracleData,OracleArch/ArchiveLog,OracleBack/&#123;rmanbak,expdpbak,ArchiveLogBak&#125;&#125;</span><br><span class="line"><span class="built_in">chown</span> -R oracle:oinstall /data/app/  /home/Oracle*</span><br><span class="line"><span class="built_in">chmod</span>  -R  775 /data/app/  /home/Oracle*</span><br></pre></td></tr></table></figure><p>接下来就是这一节的主要部分了，首先要知道的是，当通过vi命令打开文件后，按 i 可以进入编辑状态</p><p>当编辑完要退出时，先按键盘左上方<code>Esc</code>键，然后输入冒号，再输入<code>wq</code>完成编辑保存退出</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi test.txt   <span class="comment">#进入编辑模式</span></span><br><span class="line">：wq 回车 保存编辑的文件</span><br></pre></td></tr></table></figure><h3 id="2-配置Oracle相关参数"><a href="#2-配置Oracle相关参数" class="headerlink" title="2 配置Oracle相关参数"></a>2 配置Oracle相关参数</h3><h4 id="2-1-设置用户安全参数"><a href="#2-1-设置用户安全参数" class="headerlink" title="2.1 设置用户安全参数"></a>2.1 设置用户安全参数</h4><p>打开root终端输入以下命令</p><p><code>vim /etc/security/limits.conf</code></p><p>在文件末尾添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">oracle soft nproc 2047</span><br><span class="line">oracle hard nproc 16384</span><br><span class="line">oracle soft nofile 4096</span><br><span class="line">oracle hard nofile 65536</span><br></pre></td></tr></table></figure><h4 id="2-2-将用户安全参数添加到会话执行中"><a href="#2-2-将用户安全参数添加到会话执行中" class="headerlink" title="2.2 将用户安全参数添加到会话执行中"></a>2.2 将用户安全参数添加到会话执行中</h4><p>root终端输入以下命令</p><p><code>vim /etc/pam.d/login</code> </p><p>在文件末尾添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session required /lib64/security/pam_limits.so</span><br><span class="line">session required pam_limits.so</span><br></pre></td></tr></table></figure><h4 id="2-3-配置用户参数初始化逻辑"><a href="#2-3-配置用户参数初始化逻辑" class="headerlink" title="2.3 配置用户参数初始化逻辑"></a>2.3 配置用户参数初始化逻辑</h4><p>root终端输入以下命令</p><p><code>vim /etc/profile</code> </p><p>在文件末尾的done后添加如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="variable">$USER</span> = <span class="string">&quot;oracle&quot;</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$SHELL</span> = <span class="string">&quot;/bin/ksh&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">ulimit</span> -p 16384</span><br><span class="line">        <span class="built_in">ulimit</span> -n 65536</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        <span class="built_in">ulimit</span> -u 16384 -n 65536</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>保存退出后执行以下命令，完成加载配置</p><p><code>source  /etc/profile</code></p><h4 id="2-4-配置oracle用户的环境变量"><a href="#2-4-配置oracle用户的环境变量" class="headerlink" title="2.4 配置oracle用户的环境变量"></a>2.4 配置oracle用户的环境变量</h4><p>在终端使用<code>su oracle</code>命令可以实现终端用户的转换</p><p>oracle终端输入以下命令</p><p><code>vim  ~/.bash_profile</code></p><p>在文件末尾添加   </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#alias sqlplus=&#x27;rlwrap sqlplus&#x27;  </span></span><br><span class="line"><span class="comment">#alias rman=&#x27;rlwrap rman&#x27; </span></span><br><span class="line"><span class="built_in">export</span> TMP=/tmp    </span><br><span class="line"><span class="built_in">export</span> TMPDIR=<span class="variable">$TMP</span>      </span><br><span class="line"><span class="built_in">export</span> ORACLE_BASE=/data/app/oracle</span><br><span class="line"><span class="built_in">export</span> ORACLE_HOME=<span class="variable">$ORACLE_BASE</span>/product/11.2.0.1</span><br><span class="line"><span class="built_in">export</span> EDITOR=/usr/bin/vim</span><br><span class="line"><span class="built_in">export</span> ORACLE_SID=orcl</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$ORACLE_HOME</span>/bin:/usr/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/bin/:/bin:/usr/bin/X11:/usr/local/bin </span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ORACLE_BASE</span>/common/oracle/bin</span><br><span class="line"><span class="built_in">export</span> ORACLE_TERM=xterm</span><br><span class="line"><span class="built_in">export</span> TNS_ADMIN=<span class="variable">$ORACLE_HOME</span>/network/admin</span><br><span class="line"><span class="built_in">export</span> ORA_NLS10=<span class="variable">$ORACLE_HOME</span>/nls/data</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$LD_LIBRARY_PATH</span>:/lib:/usr/lib:/usr/local/lib:<span class="variable">$ORACLE_HOME</span>/oracm/lib:<span class="variable">$ORACLE_HOME</span>/lib</span><br><span class="line"><span class="built_in">export</span> LIBPATH=<span class="variable">$LIBPATH</span>:<span class="variable">$ORA_CRS_HOME</span>/lib:<span class="variable">$ORACLE_HOME</span>/lib </span><br><span class="line"><span class="built_in">export</span> CLASSPATH=<span class="variable">$CLASSPATH</span>:<span class="variable">$ORACLE_HOME</span>/rdbms/jlib:<span class="variable">$ORACLE_HOME</span>/jlib:<span class="variable">$ORACLE_HOME</span>/network/jlib:<span class="variable">$ORACLE_HOME</span>/JRE</span><br></pre></td></tr></table></figure><p>保存退出后执行<code>source  ~/.bash_profile</code>命令，完成加载配置</p><h4 id="2-5-修改系统标识"><a href="#2-5-修改系统标识" class="headerlink" title="2.5 修改系统标识"></a>2.5 修改系统标识</h4><p>由于oracle默认是不可以安装到centos系统上的，所以需要修改centos的系统标识</p><p>可修改成<code>redhat-7</code></p><p>root终端输入</p><p><code>vi /etc/redhat-release</code></p><p>修改原系统标识并保存退出</p><h4 id="2-6-完成Oracle依赖包的下载"><a href="#2-6-完成Oracle依赖包的下载" class="headerlink" title="2.6 完成Oracle依赖包的下载"></a>2.6 完成Oracle依赖包的下载</h4><p>首先确保centos连接上了网络（默认连接配置即可，及虚拟机使用NAT模式，centos连接使用DHCP自动获取，windows网络适配器打开了网络共享，并且共享网络指向VM8网络适配器），你问我网络在哪儿看？下图所示，拿走不谢，记住是鼠标右击那个网络图标，至于如何知道连没连上网，终端输入<code>ping www.baidu.com</code>，能获取到信息就是连上了，不管连上没连上记得按 <code>ctrl+c</code> 退出ping的状态，不然会一直执行的</p><p><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8B%EF%BC%89/2021-10-14-70-e82c92.png" alt="img"></p><p>root终端输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install binutils compat-libstdc++-33 elfutils-libelf elfutils-libelf-devel glibc glibc-common glibc-devel gcc gcc-c++ libaio-devel libaio libgcc libstdc++ libstdc++-devel make sysstat unixODBC unixODBC-devel pdksh numactl-devel glibc-headers</span><br></pre></td></tr></table></figure><p><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8B%EF%BC%89/2021-10-14-70-a125f8.png" alt="img"></p><p>到这里依赖包就全下载完成了，可以考虑更改成网络连接状态了</p><h3 id="3-网络桥接的实现"><a href="#3-网络桥接的实现" class="headerlink" title="3 网络桥接的实现"></a>3 网络桥接的实现</h3><h4 id="3-1-创建桥接"><a href="#3-1-创建桥接" class="headerlink" title="3.1 创建桥接"></a>3.1 创建桥接</h4><p>先要保证网络适配器中有桥接网络的存在，虚拟机工具栏中点开编辑选项，选中下拉菜单中的虚拟网络编辑器（推荐先关闭虚拟机在进行操作，开着虚拟机操作时网络桥接是无法选中自动选项的）</p><p><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8B%EF%BC%89/2021-10-14-70-9d8531.png" alt="img"></p><p>如果你的虚拟网络适配器有桥接模式，可以直接跳过虚拟机的相关设置</p><p><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8B%EF%BC%89/2021-10-14-70-be397a.png" alt="img"></p><p>赋予管理员权限之后就可以执行添加网络的操作了，添加一个网络，并在VMnet信息那一块选中桥接模式，桥到的复选框选择自动（关闭了虚拟机进行设置，默认是自动），然后点击确认即可</p><p>然后就在虚拟机设置中修改网络适配器的连接方式为桥接模式即可</p><h4 id="3-2-centos网络配置"><a href="#3-2-centos网络配置" class="headerlink" title="3.2 centos网络配置"></a>3.2 centos网络配置</h4><h5 id="3-2-1-了解windows上的IPv4、DNS"><a href="#3-2-1-了解windows上的IPv4、DNS" class="headerlink" title="3.2.1 了解windows上的IPv4、DNS"></a>3.2.1 了解windows上的IPv4、DNS</h5><p>windows下启动控制台，输入ipconfig/all 查看网络信息，以下是我的以太网适配器的IPv4信息<br><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8B%EF%BC%89/2021-10-14-70-2eece5.png" alt="img"></p><p>所以我的虚拟机网络设置要和windows处于同一个网段，也就是说必须是<code>192.168.1.*</code>，至于网关我推荐一致就行，以下是我的网络连接的设置，仅供参考</p><p><code>192.168.1.120    255.255.255.0    192.168.1.1    DNS：192.168.1.1</code><br><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8B%EF%BC%89/2021-10-14-70-405726.png" alt="img"></p><p>设置完成后使用centos中的终端和windows终端都ping一下看看是否都能连接</p><p><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8B%EF%BC%89/2021-10-14-70-d40b94.png" alt="img"></p><p><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8B%EF%BC%89/dedd7697ce329be9861bf23ae23f5411.png" alt="img"></p><p>到这里网络设置，呸，到这里网络设置刚刚开始</p><p>设置完以上的连接信息后，<code>/etc/sysconfig/network-scripts</code>目录下的<code>ifcfg-eth0</code>文件中的<code>ONBOOT</code>属性默认就是<code>yes</code>了，不需要再去修改了</p><h5 id="3-2-2-关闭防火墙"><a href="#3-2-2-关闭防火墙" class="headerlink" title="3.2.2 关闭防火墙"></a>3.2.2 关闭防火墙</h5><p>root终端中输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service  iptables  stop  </span><br><span class="line">chkconfig iptables  off</span><br></pre></td></tr></table></figure><h5 id="3-2-3-关闭selinux"><a href="#3-2-3-关闭selinux" class="headerlink" title="3.2.3 关闭selinux"></a>3.2.3 关闭selinux</h5><p>这里我也不清楚为啥要关闭，不过大家都关了，我也就关了，中国式扎堆嘛</p><p>root终端输入以下命令</p><p><code>vim /etc/selinux/config</code></p><p>按 i 键进入编辑状态，将SELINUX属性设为disabled</p><h5 id="3-2-4-设置centos的host文件"><a href="#3-2-4-设置centos的host文件" class="headerlink" title="3.2.4 设置centos的host文件"></a>3.2.4 设置centos的host文件</h5><p>root终端输入以下命令</p><p><code>vim /etc/hosts</code> </p><p>在host文件中插入一行，用于DNS解析主机地址，前面的地址是centos的IPv4地址，后面的centos是之前安装系统时设定的主机名，这样设置可以使oracle的监听器启动的更快</p><p><code>192.168.1.120    centos</code></p><p><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8B%EF%BC%89/8c18611f81d1b7bbf027230185af54e0.png" alt="img"></p><p>3.2.5 添加主机连接参数</p><p>root终端输入以下命令</p><p><code>vim /etc/sysctl.conf</code> </p><p>在文件末尾添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fs.aio-max-nr = 1048576</span><br><span class="line">fs.file-max = 6815744</span><br><span class="line">kernel.shmmni = 4096</span><br><span class="line">kernel.sem = 250 32000 100 128</span><br><span class="line">net.ipv4.ip_local_port_range = 9000 65500</span><br><span class="line">net.core.rmem_default = 262144</span><br><span class="line">net.core.rmem_max = 4194304</span><br><span class="line">net.core.wmem_default = 262144</span><br><span class="line">net.core.wmem_max = 1048576</span><br></pre></td></tr></table></figure><p><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8B%EF%BC%89/0824b236175d92e46f652a4633f178b3.png" alt="img"></p><p>保存退出后，使用命令<code>sysctl -p</code>完成加载配置，到这里网络配置就算结束了</p><h3 id="4-解压安装包，运行安装程序"><a href="#4-解压安装包，运行安装程序" class="headerlink" title="4.解压安装包，运行安装程序"></a>4.解压安装包，运行安装程序</h3><h4 id="4-1-解压安装包"><a href="#4-1-解压安装包" class="headerlink" title="4.1 解压安装包"></a>4.1 解压安装包</h4><p>注销当前root账户，切换到oracle账户进行登录</p><p>通过拖拽，将windows中下载的linux版的两个oracle数据库压缩包传输到<code>/home/oracle/soft</code>目录下（soft当然是自己建的文件夹啊），使用unzip命令进行解压</p><p>打开oracle终端输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/oracle/soft</span><br><span class="line">unzip linux.x64_11gR2_database_1of2.zip </span><br><span class="line">unzip linux.x64_11gR2_database_2of2.zip </span><br></pre></td></tr></table></figure><p>执行完成后soft文件夹中会有一个database文件夹，推荐解压完重启虚拟机</p><p>重启完成后先输入<code>xhost +</code>，如果出现提示<code>access control disabled, clients can connect from any host</code>，则切换到</p><p>oracle终端进行操作</p><h4 id="4-2-运行安装程序"><a href="#4-2-运行安装程序" class="headerlink" title="4.2 运行安装程序"></a>4.2 运行安装程序</h4><p>为防止中文乱码，使用英文模式执行安装程序，oracle终端输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> database</span><br><span class="line"><span class="built_in">export</span> LANG=en_us</span><br><span class="line">./runInstaller</span><br></pre></td></tr></table></figure><p>如果之前的分区按照我的推荐来的话，不会因为内存问题卡在这里，就会显示<code>Please wait</code></p><p>然后就是常规的安装数据库了，指定数据库安装路径时如下图即可</p><p><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8B%EF%BC%89/07767a10763ba242baab43d2acc7250f.png" alt="img"></p><p>接着就是一路根据需要选择，一路next了，遇到第18步时勾上<code>Ignore All</code>即可，因为我们安装的包版本是新的，而第18步只认版本不认包，所以忽略就行</p><p><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8B%EF%BC%89/bd35c44d55c333c891ef41fb562a77f6.png" alt="img"></p><p>当然了安装到最后时需要在终端执行两行命令，就是遇到下图的弹窗时：</p><p><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8B%EF%BC%89/e22c7988da4e2f4564b25716cf476874.png" alt="img"></p><p>而执行的命令就是弹窗中显示的那两行</p><p>打开终端切换到root终端，输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/data/app/oraInventory/orainstRoot.sh</span><br><span class="line">/data/app/oracle/product/11.2.0.1/root.sh</span><br></pre></td></tr></table></figure><p>到这里安装就完成了</p><p>接下来配置监听器，终端输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> LANG=en_us</span><br><span class="line">netca</span><br></pre></td></tr></table></figure><p><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8B%EF%BC%89/bc55177cb24b0ca7baae9c2323cbcb55.png" alt="img"></p><p><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8B%EF%BC%89/4cdf48a2b0cc3066d70c79ba8420bf0d.png" alt="img"></p><p><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8B%EF%BC%89/10c82c302e44ecbbc2bf124e03f53a82.png" alt="img"></p><p><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8B%EF%BC%89/81bc07a81f635b59430c027ce1783a8b.png" alt="img"></p><p><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8B%EF%BC%89/87b1bda642e312c1ab8d555f3f28f02e.png" alt="img"></p><p><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8B%EF%BC%89/537715a194a03620e34ce98f18a6edab.png" alt="img"></p><p>然后点击<code>next</code>，最后点击finish退出配置监听器界面，完成配置</p><p>测试监听器：</p><p>打开监听器：<code>lsnrctl start</code>   （默认启动监器LISTENER，如果启动非LISTENER则使用lsnrctl start  XXXX命令，XXXX是监听器名字）</p><p>查看1521接口侦测情况：<code>netstat -ant|grep 1521</code></p><p>连接：<code>sql /nolog</code></p><p>连接权限：<code>connect / as sysdba</code></p><p>立即关闭服务：<code>shutdown immediate</code></p><p>启动服务：<code>startup</code></p><p>退出SQL：<code>exit</code></p><p>关闭监听器：<code>lsnrctl stop</code></p><p>功能测试无误，这一次记录到此完结，至于在windows上使用PLSQL连接到虚拟机中的该Oracle的指导记录，如果有空闲的话会考虑写一篇文章的。</p><p>此记录+教学的文章中用到的很多命令都是我在网上学习借鉴的，再次感谢前辈大神们的文章，此文中也包含了许多我个人的理解，如果有错，多多包涵。</p><p>只要跟着我的步骤一步一步来，是肯定可以搭建成功的，最容易出问题的是忽视了root终端与oracle终端的切换，细节决定成败！祝你们好运！</p>]]></content>
      
      
      <categories>
          
          <category> 安装笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMware </tag>
            
            <tag> Oracle </tag>
            
            <tag> 桥接模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在VMware+centos6.5的基础上安装Oracle（上）</title>
      <link href="/2018/07/12/%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/00.%E5%9C%A8VMware+centos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/2018/07/12/%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/00.%E5%9C%A8VMware+centos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>百般折腾后（我会说我装了不下5遍的系统吗0.0），终于在CentOS 6.5上成功搭建了Oracle11g数据库，感动到自己想哭，在此记录下搭建和安装过程，在此首先感谢，各个论坛大佬的博客。我第一次发技术文章，如果有问题，还请多多包涵，哈哈~<br>好了进入正题。</p><h3 id="1-安装VMware虚拟机"><a href="#1-安装VMware虚拟机" class="headerlink" title="1 安装VMware虚拟机"></a>1 安装VMware虚拟机</h3><p><strong>安装一个VMware虚拟机，安装过程网上一大把。</strong></p><h3 id="2-安装centos"><a href="#2-安装centos" class="headerlink" title="2 安装centos"></a>2 安装centos</h3><p>在虚拟机上安装CentOS6.5,系统映像我是去官网下载的。<br>这里我也给出6.5链接：<a href="http://vault.centos.org/6.5/isos/x86_64/">点击打开链接</a><br><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-1.1-ed2efc.png" alt=""><br>下载bt，用下载工具下载就行了，下载下来是两个镜像，使用DVD1镜像安装即可。</p><h4 id="2-1-配置虚拟机"><a href="#2-1-配置虚拟机" class="headerlink" title="2.1 配置虚拟机"></a>2.1 配置虚拟机</h4><p><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-2.1-b2cb13.png" alt=""><br><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-2.2-31135d.png" alt=""><br><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-2.3-92bb14.png" alt=""><br><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-2.4-8207fc.png" alt=""><br><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-2.5-bfd64f.png" alt=""><br><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-2.6-7e60e6.png" alt=""><br><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-2.7-f1e37e.png" alt=""><br>上处由于要安装oracle的依赖包，要用到yum进行联网下载，所以目前以NAT模式连接主机网络，之后要改成桥接网络，然后点击完成就可以启动虚拟机了</p><h4 id="2-2-安装centos6-5"><a href="#2-2-安装centos6-5" class="headerlink" title="2.2 安装centos6.5"></a>2.2 安装centos6.5</h4><p><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-2.8-e49344.png" alt=""><br><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-2.9-ff1741.png" alt=""><br><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-2.10-fff1a6.png" alt=""><br><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-2.11-b868a9.png" alt=""><br><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-2.12-e60b35.png" alt=""><br><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-2.13-cbba4d.png" alt=""><br><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-2.14-9b900d.png" alt=""><br>这里先不配置网络，直接点击下一步<br><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-2.15-bb563c.png" alt=""><br><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-2.16-d38ca6.png" alt=""><br>如果设定的密码位数低于8位，会出现密码不安全的提醒，不用管他，直接下一步就行<br><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-2.17-ec2de3.png" alt=""><br>此处我选择自定义布局即手动分区，以下是我的分区结构，仅供参考，可以不同，但是推荐swap分区分配3GB以上的空间，不然安装Oracle时会出现swap空间不足的问题<br><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-2.18-20b6f9.png" alt=""><br>创建分区时选择默认的标准即可<br><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-2.19-c7d2be.png" alt=""><br><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-2.20-3ac91a.png" alt=""><br><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-2.21-724104.png" alt=""><br>完成分区后确认无误，点击下一步-&gt;格式化-&gt;将修改写入磁盘，分区工作就算完成了<br><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-2.22-241361.png" alt=""><br><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-2.23-784837.png" alt=""><br>接下来就是选择安装的内容了，我所选择的都只是为装oracle做准备的，仅供参考，可以根据需要选择安装<br><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-2.24-fbb912.png" alt=""><br><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-2.26-dc3081.png" alt=""><br><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-2.25-0eea05.png" alt=""><br>oracle数据库的英文安装界面不会出现乱码问题，系统选择中文有可能出现乱码，可以采用命令的方式进行英文界面安装命令如下：<br><code>export LANG=en_us</code><br>完成安装选择后就可以点击下一步进行安装了，安装完成后点击重新引导，会进入账号创建界面<br><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-2.27-1799a7.png" alt=""><br>一路点击确认，最后重启<br><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-2.28-4c70a1.png" alt=""><br>到这里，centos6.5就算是安装完成了<br>重启后进入登录界面，点击其他，输入超级管理员账号root与之前第一次设定的密码进行登录，成功登陆就可以进入桌面了。</p><h3 id="3-Oracle数据库安装的前提准备"><a href="#3-Oracle数据库安装的前提准备" class="headerlink" title="3 Oracle数据库安装的前提准备"></a>3 Oracle数据库安装的前提准备</h3><p>在进行安装之前，需要做好事前工作，如下：  </p><h4 id="3-1-下载"><a href="#3-1-下载" class="headerlink" title="3.1 下载"></a>3.1 下载</h4><p>① linux版的oracle，附上官网下载地址：<a href="http://www.oracle.com/technetwork/cn/database/enterprise-edition/downloads/index.html">点击打开链接</a>，官网需要注册才能下载，邮箱注册一下就可以了，还得点击上方的我同意，具体如下：<br><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-3.1-3a7ec8.png" alt=""><br><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-3.2-eed846.png" alt="">  </p><h4 id="3-2-安装VMware-Tools"><a href="#3-2-安装VMware-Tools" class="headerlink" title="3.2 安装VMware Tools"></a>3.2 安装VMware Tools</h4><p>安装了VMware Tools之后将能够将windows中的文件直接通过鼠标拖拽的方式传输到虚拟机中，方便传输linux版的数据库压缩文件<br>点击虚拟机上方工具栏中的虚拟机按钮（如果窗口缩太小则在上方工具栏的Workstation的二级菜单中），下拉框中找到安装VMwaretools<br><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-3.3-fa0222.png" alt=""> 此时目录中的文件是在media中的，无法直接执行安装操作   <img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-3.4-f87f38.png" alt="">  所需要将目录中的所有文件拷贝到mnt目录（<code>桌面双击计算机-&gt;文件系统-&gt;mnt</code>）中的VMware tools文件夹中（什么，你跟我说没有这个文件夹，当然没有啦，我是自己建的），当然直接选中拖拽过去也是可以的，效果如下图。<br><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-3.5-fdbb2c.png" alt=""><br>然后就是敲命令的时间了，打开终端（你问我终端在哪里？截图如下，拿走不谢）<br><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-3.6-85b9c0.png" alt=""><br>在终端输入命令：</p><p><code>cd /mnt/VMware\ tools/</code><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-3.7-8e918f.png" alt=""></p><blockquote><p>注：在终端中和很多编写网页的软件似的，只要你编写的命令不错，在敲目录中时可以使用tab建，根据你已写的目录路径实现自动补全（前提是你已写目录没有错误，且目录中有匹配的文件或文件夹，如果你不清楚目录情况，可以通过ls命令查询目录下的所有文件，ll命令可以查询当前目录下附带详细信息的所有文件）</p></blockquote><p>然后输入命令解压文件，</p><p><code>tar -xzf  要解压的文件名</code></p><p><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-3.8-141d57.png" alt=""><br><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-3.9-d2982e.png" alt=""><br>进入到解压出来的文件中，然后安装 VMware Tools，命令如下：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> vmware-tools-distrib\</span><br><span class="line">./vmware-install.pl</span><br></pre></td></tr></table></figure><p><img src="https://blog.oss.langzihan.top/images/%E5%9C%A8VMware%2Bcentos6.5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%EF%BC%88%E4%B8%8A%EF%BC%89/2021-10-14-3.10-89872e.png" alt=""><br>安装过程中会有一堆询问的提示，一路无脑enter就行了，enter就是选择默认属性，安装完成后重启就可以拖拽文件到centos的桌面了</p><h4 id="3-3-配置"><a href="#3-3-配置" class="headerlink" title="3.3 配置"></a>3.3 配置</h4><p>在centos中添加新的群组和账号，以及赋予账号安装执行oracle数据库的权限，这留到下一节中写上。</p>]]></content>
      
      
      <categories>
          
          <category> 安装笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMware </tag>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
